(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./lib/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./lib/CypherLexer.js":
/*!****************************!*\
  !*** ./libs/CypherLexer.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return CypherLexer; });
/* harmony import */ var antlr4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antlr4 */ "./node_modules/antlr4/src/antlr4/index.js");
/* harmony import */ var antlr4__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(antlr4__WEBPACK_IMPORTED_MODULE_0__);
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Generated from Cypher.g4 by ANTLR 4.9
// jshint ignore: start

const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786", "\u5964\u0002\u0083\u0403\b\u0001\u0004\u0002\t\u0002\u0004\u0003\t\u0003", "\u0004\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007", "\t\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004", "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010", "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013", "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017", "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a", "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e", "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#", "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004", "*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004", "1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004", "8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004", "?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004", "F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004", "M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004", "T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004", "[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004", "b\tb\u0004c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004", "i\ti\u0004j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004", "p\tp\u0004q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004", "w\tw\u0004x\tx\u0004y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004", "~\t~\u0004\u007f\t\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004", "\u0082\t\u0082\u0004\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t", "\u0085\u0004\u0086\t\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004", "\u0089\t\u0089\u0004\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t", "\u008c\u0004\u008d\t\u008d\u0004\u008e\t\u008e\u0004\u008f\t\u008f\u0004", "\u0090\t\u0090\u0004\u0091\t\u0091\u0004\u0092\t\u0092\u0004\u0093\t", "\u0093\u0004\u0094\t\u0094\u0004\u0095\t\u0095\u0004\u0096\t\u0096\u0003", "\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003", "\u0005\u0003\u0005\u0003\u0005\u0003\u0006\u0003\u0006\u0003\u0007\u0003", "\u0007\u0003\b\u0003\b\u0003\t\u0003\t\u0003\n\u0003\n\u0003\u000b\u0003", "\u000b\u0003\f\u0003\f\u0003\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e", "\u0003\u000f\u0003\u000f\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011", "\u0003\u0012\u0003\u0012\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0014", "\u0003\u0014\u0003\u0015\u0003\u0015\u0003\u0016\u0003\u0016\u0003\u0016", "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0003\u0019", "\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001b\u0003\u001b\u0003\u001c", "\u0003\u001c\u0003\u001d\u0003\u001d\u0003\u001e\u0003\u001e\u0003\u001f", "\u0003\u001f\u0003 \u0003 \u0003!\u0003!\u0003\"\u0003\"\u0003#\u0003", "#\u0003$\u0003$\u0003%\u0003%\u0003&\u0003&\u0003\'\u0003\'\u0003(\u0003", "(\u0003)\u0003)\u0003*\u0003*\u0003+\u0003+\u0003,\u0003,\u0003-\u0003", "-\u0003.\u0003.\u0003/\u0003/\u0003/\u0003/\u0003/\u0003/\u00030\u0003", "0\u00030\u00030\u00031\u00031\u00031\u00031\u00031\u00031\u00031\u0003", "1\u00031\u00032\u00032\u00032\u00032\u00032\u00032\u00033\u00033\u0003", "3\u00033\u00033\u00033\u00033\u00034\u00034\u00034\u00035\u00035\u0003", "5\u00035\u00035\u00035\u00036\u00036\u00036\u00037\u00037\u00037\u0003", "7\u00037\u00037\u00037\u00038\u00038\u00038\u00038\u00039\u00039\u0003", "9\u00039\u00039\u00039\u00039\u0003:\u0003:\u0003:\u0003:\u0003:\u0003", ":\u0003:\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0003<\u0003", "<\u0003<\u0003<\u0003<\u0003=\u0003=\u0003=\u0003=\u0003=\u0003=\u0003", ">\u0003>\u0003>\u0003>\u0003>\u0003?\u0003?\u0003?\u0003?\u0003?\u0003", "?\u0003?\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003", "@\u0003A\u0003A\u0003A\u0003A\u0003A\u0003A\u0003B\u0003B\u0003B\u0003", "C\u0003C\u0003C\u0003C\u0003C\u0003D\u0003D\u0003D\u0003D\u0003D\u0003", "D\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003E\u0003", "E\u0003F\u0003F\u0003F\u0003F\u0003G\u0003G\u0003G\u0003G\u0003G\u0003", "G\u0003G\u0003G\u0003G\u0003G\u0003G\u0003H\u0003H\u0003H\u0003H\u0003", "H\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003J\u0003J\u0003J\u0003", "K\u0003K\u0003K\u0003K\u0003L\u0003L\u0003L\u0003L\u0003M\u0003M\u0003", "M\u0003M\u0003N\u0003N\u0003N\u0003O\u0003O\u0003O\u0003O\u0003O\u0003", "O\u0003O\u0003P\u0003P\u0003P\u0003P\u0003P\u0003Q\u0003Q\u0003Q\u0003", "Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003Q\u0003R\u0003R\u0003R\u0003S\u0003", "S\u0003S\u0003S\u0003S\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003", "T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003T\u0003U\u0003U\u0003U\u0003", "U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003U\u0003", "U\u0003U\u0003U\u0003U\u0003V\u0003V\u0003V\u0003V\u0003V\u0003V\u0003", "W\u0003W\u0003W\u0003W\u0003X\u0003X\u0003X\u0003X\u0003X\u0003Y\u0003", "Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Z\u0003Z\u0003Z\u0003Z\u0003", "Z\u0003[\u0003[\u0003[\u0003[\u0003[\u0003[\u0003\\\u0003\\\u0003\\", "\u0003\\\u0003\\\u0003\\\u0003\\\u0003]\u0003]\u0003]\u0003]\u0003]", "\u0003^\u0003^\u0003^\u0003^\u0003^\u0003_\u0003_\u0003_\u0003_\u0003", "`\u0003`\u0003`\u0003`\u0003`\u0003a\u0003a\u0003a\u0003a\u0003a\u0003", "b\u0003b\u0003b\u0007b\u02c1\nb\fb\u000eb\u02c4\u000bb\u0003b\u0003", "b\u0003b\u0003b\u0007b\u02ca\nb\fb\u000eb\u02cd\u000bb\u0003b\u0005", "b\u02d0\nb\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003", "c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0003c\u0005", "c\u02e4\nc\u0003d\u0003d\u0003d\u0003d\u0006d\u02ea\nd\rd\u000ed\u02eb", "\u0003e\u0003e\u0003e\u0007e\u02f1\ne\fe\u000ee\u02f4\u000be\u0005e", "\u02f6\ne\u0003f\u0003f\u0006f\u02fa\nf\rf\u000ef\u02fb\u0003g\u0005", "g\u02ff\ng\u0003h\u0003h\u0005h\u0303\nh\u0003i\u0003i\u0005i\u0307", "\ni\u0003j\u0003j\u0005j\u030b\nj\u0003k\u0003k\u0003l\u0003l\u0005", "l\u0311\nl\u0003m\u0003m\u0003n\u0006n\u0316\nn\rn\u000en\u0317\u0003", "n\u0006n\u031b\nn\rn\u000en\u031c\u0003n\u0003n\u0006n\u0321\nn\rn\u000e", "n\u0322\u0003n\u0003n\u0006n\u0327\nn\rn\u000en\u0328\u0005n\u032b\n", "n\u0003n\u0003n\u0005n\u032f\nn\u0003n\u0006n\u0332\nn\rn\u000en\u0333", "\u0003o\u0007o\u0337\no\fo\u000eo\u033a\u000bo\u0003o\u0003o\u0006o", "\u033e\no\ro\u000eo\u033f\u0003p\u0003p\u0003p\u0003p\u0003p\u0003p", "\u0003p\u0003p\u0003p\u0003p\u0003p\u0003q\u0003q\u0003q\u0003r\u0003", "r\u0003r\u0003r\u0003s\u0003s\u0003s\u0003s\u0003s\u0003s\u0003s\u0003", "s\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003t\u0003u\u0003u\u0003", "u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003u\u0003v\u0003v\u0003", "v\u0003v\u0003v\u0003v\u0003v\u0003w\u0003w\u0003w\u0003x\u0003x\u0003", "x\u0003x\u0003y\u0003y\u0003y\u0003y\u0003y\u0003z\u0003z\u0003z\u0003", "z\u0003z\u0003z\u0003z\u0003{\u0003{\u0003{\u0003{\u0003{\u0003{\u0003", "{\u0003{\u0003|\u0003|\u0007|\u0391\n|\f|\u000e|\u0394\u000b|\u0003", "}\u0003}\u0005}\u0398\n}\u0003~\u0003~\u0005~\u039c\n~\u0003\u007f\u0003", "\u007f\u0007\u007f\u03a0\n\u007f\f\u007f\u000e\u007f\u03a3\u000b\u007f", "\u0003\u007f\u0006\u007f\u03a6\n\u007f\r\u007f\u000e\u007f\u03a7\u0003", "\u0080\u0006\u0080\u03ab\n\u0080\r\u0080\u000e\u0080\u03ac\u0003\u0081", "\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081", "\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0003\u0081\u0005\u0081", "\u03bb\n\u0081\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003", "\u0082\u0003\u0082\u0007\u0082\u03c3\n\u0082\f\u0082\u000e\u0082\u03c6", "\u000b\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082\u0003\u0082", "\u0003\u0082\u0007\u0082\u03ce\n\u0082\f\u0082\u000e\u0082\u03d1\u000b", "\u0082\u0003\u0082\u0005\u0082\u03d4\n\u0082\u0003\u0082\u0003\u0082", "\u0005\u0082\u03d8\n\u0082\u0005\u0082\u03da\n\u0082\u0003\u0083\u0003", "\u0083\u0003\u0084\u0003\u0084\u0003\u0085\u0003\u0085\u0003\u0086\u0003", "\u0086\u0003\u0087\u0003\u0087\u0003\u0088\u0003\u0088\u0003\u0089\u0003", "\u0089\u0003\u008a\u0003\u008a\u0003\u008b\u0003\u008b\u0003\u008c\u0003", "\u008c\u0003\u008d\u0003\u008d\u0003\u008e\u0003\u008e\u0003\u008f\u0003", "\u008f\u0003\u0090\u0003\u0090\u0003\u0091\u0003\u0091\u0003\u0092\u0003", "\u0092\u0003\u0093\u0003\u0093\u0003\u0094\u0003\u0094\u0003\u0095\u0003", "\u0095\u0003\u0096\u0003\u0096\u0002\u0002\u0097\u0003\u0003\u0005\u0004", "\u0007\u0005\t\u0006\u000b\u0007\r\b\u000f\t\u0011\n\u0013\u000b\u0015", "\f\u0017\r\u0019\u000e\u001b\u000f\u001d\u0010\u001f\u0011!\u0012#\u0013", "%\u0014\'\u0015)\u0016+\u0017-\u0018/\u00191\u001a3\u001b5\u001c7\u001d", "9\u001e;\u001f= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]0_1a2c3e4g5i6k7m8o", "9q:s;u<w=y>{?}@\u007fA\u0081B\u0083C\u0085D\u0087E\u0089F\u008bG\u008d", "H\u008fI\u0091J\u0093K\u0095L\u0097M\u0099N\u009bO\u009dP\u009fQ\u00a1", "R\u00a3S\u00a5T\u00a7U\u00a9V\u00abW\u00adX\u00afY\u00b1Z\u00b3[\u00b5", "\\\u00b7]\u00b9^\u00bb_\u00bd`\u00bfa\u00c1b\u00c3c\u00c5d\u00c7e\u00c9", "f\u00cbg\u00cdh\u00cfi\u00d1j\u00d3k\u00d5l\u00d7m\u00d9n\u00dbo\u00dd", "p\u00dfq\u00e1r\u00e3s\u00e5t\u00e7u\u00e9v\u00ebw\u00edx\u00efy\u00f1", "z\u00f3{\u00f5|\u00f7}\u00f9~\u00fb\u007f\u00fd\u0080\u00ff\u0081\u0101", "\u0082\u0103\u0083\u0105\u0002\u0107\u0002\u0109\u0002\u010b\u0002\u010d", "\u0002\u010f\u0002\u0111\u0002\u0113\u0002\u0115\u0002\u0117\u0002\u0119", "\u0002\u011b\u0002\u011d\u0002\u011f\u0002\u0121\u0002\u0123\u0002\u0125", "\u0002\u0127\u0002\u0129\u0002\u012b\u0002\u0003\u0002/\u0004\u0002", "WWww\u0004\u0002PPpp\u0004\u0002KKkk\u0004\u0002QQqq\u0004\u0002CCc", "c\u0004\u0002NNnn\u0004\u0002RRrr\u0004\u0002VVvv\u0004\u0002OOoo\u0004", "\u0002EEee\u0004\u0002JJjj\u0004\u0002YYyy\u0004\u0002FFff\u0004\u0002", "UUuu\u0004\u0002GGgg\u0004\u0002TTtt\u0004\u0002IIii\u0004\u0002XXx", "x\u0004\u0002[[{{\u0004\u0002DDdd\u0004\u0002MMmm\u0004\u0002ZZzz\u0004", "\u0002HHhh\u000f\u0002$$))DDHHPPTTVV^^ddhhppttvv\u0004\u0002CHch\u0004", "\u0002SSss\n\u0002\u00a2\u00a2\u1682\u1682\u1810\u1810\u2002\u200c\u202a", "\u202b\u2031\u2031\u2061\u2061\u3002\u3002\u0003\u0002\u000e\u000e\u0003", "\u0002bb\u0003\u0002  \u0003\u0002,,\u0004\u0002))^^\u0004\u0002\f\f", "\u000f\u000f\u0003\u000211\u0003\u0002\u001f\u001f\u0003\u0002\u001e", "\u001e\u0003\u0002\u000f\u000f\u0013\u0002&&\u00a4\u00a7\u0591\u0591", "\u060d\u060d\u09f4\u09f5\u09fd\u09fd\u0af3\u0af3\u0bfb\u0bfb\u0e41\u0e41", "\u17dd\u17dd\u20a2\u20c1\ua83a\ua83a\ufdfe\ufdfe\ufe6b\ufe6b\uff06\uff06", "\uffe2\uffe3\uffe7\uffe8\u0003\u0002\"\"\b\u0002aa\u2041\u2042\u2056", "\u2056\ufe35\ufe36\ufe4f\ufe51\uff41\uff41\u0003\u0002\u000b\u000b\u0004", "\u0002$$^^\u0003\u0002\f\f\u0003\u0002\r\r\u0003\u0002!!\u0004\u02b3", "\u00022\u0002;\u0002C\u0002\\\u0002a\u0002a\u0002c\u0002|\u0002\u00ac", "\u0002\u00ac\u0002\u00b7\u0002\u00b7\u0002\u00b9\u0002\u00b9\u0002\u00bc", "\u0002\u00bc\u0002\u00c2\u0002\u00d8\u0002\u00da\u0002\u00f8\u0002\u00fa", "\u0002\u02c3\u0002\u02c8\u0002\u02d3\u0002\u02e2\u0002\u02e6\u0002\u02ee", "\u0002\u02ee\u0002\u02f0\u0002\u02f0\u0002\u0302\u0002\u0376\u0002\u0378", "\u0002\u0379\u0002\u037c\u0002\u037f\u0002\u0381\u0002\u0381\u0002\u0388", "\u0002\u038c\u0002\u038e\u0002\u038e\u0002\u0390\u0002\u03a3\u0002\u03a5", "\u0002\u03f7\u0002\u03f9\u0002\u0483\u0002\u0485\u0002\u0489\u0002\u048c", "\u0002\u0531\u0002\u0533\u0002\u0558\u0002\u055b\u0002\u055b\u0002\u0563", "\u0002\u0589\u0002\u0593\u0002\u05bf\u0002\u05c1\u0002\u05c1\u0002\u05c3", "\u0002\u05c4\u0002\u05c6\u0002\u05c7\u0002\u05c9\u0002\u05c9\u0002\u05d2", "\u0002\u05ec\u0002\u05f2\u0002\u05f4\u0002\u0612\u0002\u061c\u0002\u0622", "\u0002\u066b\u0002\u0670\u0002\u06d5\u0002\u06d7\u0002\u06de\u0002\u06e1", "\u0002\u06ea\u0002\u06ec\u0002\u06fe\u0002\u0701\u0002\u0701\u0002\u0712", "\u0002\u074c\u0002\u074f\u0002\u07b3\u0002\u07c2\u0002\u07f7\u0002\u07fc", "\u0002\u07fc\u0002\u0802\u0002\u082f\u0002\u0842\u0002\u085d\u0002\u0862", "\u0002\u086c\u0002\u08a2\u0002\u08b6\u0002\u08b8\u0002\u08bf\u0002\u08d6", "\u0002\u08e3\u0002\u08e5\u0002\u0965\u0002\u0968\u0002\u0971\u0002\u0973", "\u0002\u0985\u0002\u0987\u0002\u098e\u0002\u0991\u0002\u0992\u0002\u0995", "\u0002\u09aa\u0002\u09ac\u0002\u09b2\u0002\u09b4\u0002\u09b4\u0002\u09b8", "\u0002\u09bb\u0002\u09be\u0002\u09c6\u0002\u09c9\u0002\u09ca\u0002\u09cd", "\u0002\u09d0\u0002\u09d9\u0002\u09d9\u0002\u09de\u0002\u09df\u0002\u09e1", "\u0002\u09e5\u0002\u09e8\u0002\u09f3\u0002\u09fe\u0002\u09fe\u0002\u0a03", "\u0002\u0a05\u0002\u0a07\u0002\u0a0c\u0002\u0a11\u0002\u0a12\u0002\u0a15", "\u0002\u0a2a\u0002\u0a2c\u0002\u0a32\u0002\u0a34\u0002\u0a35\u0002\u0a37", "\u0002\u0a38\u0002\u0a3a\u0002\u0a3b\u0002\u0a3e\u0002\u0a3e\u0002\u0a40", "\u0002\u0a44\u0002\u0a49\u0002\u0a4a\u0002\u0a4d\u0002\u0a4f\u0002\u0a53", "\u0002\u0a53\u0002\u0a5b\u0002\u0a5e\u0002\u0a60\u0002\u0a60\u0002\u0a68", "\u0002\u0a77\u0002\u0a83\u0002\u0a85\u0002\u0a87\u0002\u0a8f\u0002\u0a91", "\u0002\u0a93\u0002\u0a95\u0002\u0aaa\u0002\u0aac\u0002\u0ab2\u0002\u0ab4", "\u0002\u0ab5\u0002\u0ab7\u0002\u0abb\u0002\u0abe\u0002\u0ac7\u0002\u0ac9", "\u0002\u0acb\u0002\u0acd\u0002\u0acf\u0002\u0ad2\u0002\u0ad2\u0002\u0ae2", "\u0002\u0ae5\u0002\u0ae8\u0002\u0af1\u0002\u0afb\u0002\u0b01\u0002\u0b03", "\u0002\u0b05\u0002\u0b07\u0002\u0b0e\u0002\u0b11\u0002\u0b12\u0002\u0b15", "\u0002\u0b2a\u0002\u0b2c\u0002\u0b32\u0002\u0b34\u0002\u0b35\u0002\u0b37", "\u0002\u0b3b\u0002\u0b3e\u0002\u0b46\u0002\u0b49\u0002\u0b4a\u0002\u0b4d", "\u0002\u0b4f\u0002\u0b58\u0002\u0b59\u0002\u0b5e\u0002\u0b5f\u0002\u0b61", "\u0002\u0b65\u0002\u0b68\u0002\u0b71\u0002\u0b73\u0002\u0b73\u0002\u0b84", "\u0002\u0b85\u0002\u0b87\u0002\u0b8c\u0002\u0b90\u0002\u0b92\u0002\u0b94", "\u0002\u0b97\u0002\u0b9b\u0002\u0b9c\u0002\u0b9e\u0002\u0b9e\u0002\u0ba0", "\u0002\u0ba1\u0002\u0ba5\u0002\u0ba6\u0002\u0baa\u0002\u0bac\u0002\u0bb0", "\u0002\u0bbb\u0002\u0bc0\u0002\u0bc4\u0002\u0bc8\u0002\u0bca\u0002\u0bcc", "\u0002\u0bcf\u0002\u0bd2\u0002\u0bd2\u0002\u0bd9\u0002\u0bd9\u0002\u0be8", "\u0002\u0bf1\u0002\u0c02\u0002\u0c05\u0002\u0c07\u0002\u0c0e\u0002\u0c10", "\u0002\u0c12\u0002\u0c14\u0002\u0c2a\u0002\u0c2c\u0002\u0c3b\u0002\u0c3f", "\u0002\u0c46\u0002\u0c48\u0002\u0c4a\u0002\u0c4c\u0002\u0c4f\u0002\u0c57", "\u0002\u0c58\u0002\u0c5a\u0002\u0c5c\u0002\u0c62\u0002\u0c65\u0002\u0c68", "\u0002\u0c71\u0002\u0c82\u0002\u0c85\u0002\u0c87\u0002\u0c8e\u0002\u0c90", "\u0002\u0c92\u0002\u0c94\u0002\u0caa\u0002\u0cac\u0002\u0cb5\u0002\u0cb7", "\u0002\u0cbb\u0002\u0cbe\u0002\u0cc6\u0002\u0cc8\u0002\u0cca\u0002\u0ccc", "\u0002\u0ccf\u0002\u0cd7\u0002\u0cd8\u0002\u0ce0\u0002\u0ce0\u0002\u0ce2", "\u0002\u0ce5\u0002\u0ce8\u0002\u0cf1\u0002\u0cf3\u0002\u0cf4\u0002\u0d02", "\u0002\u0d05\u0002\u0d07\u0002\u0d0e\u0002\u0d10\u0002\u0d12\u0002\u0d14", "\u0002\u0d46\u0002\u0d48\u0002\u0d4a\u0002\u0d4c\u0002\u0d50\u0002\u0d56", "\u0002\u0d59\u0002\u0d61\u0002\u0d65\u0002\u0d68\u0002\u0d71\u0002\u0d7c", "\u0002\u0d81\u0002\u0d84\u0002\u0d85\u0002\u0d87\u0002\u0d98\u0002\u0d9c", "\u0002\u0db3\u0002\u0db5\u0002\u0dbd\u0002\u0dbf\u0002\u0dbf\u0002\u0dc2", "\u0002\u0dc8\u0002\u0dcc\u0002\u0dcc\u0002\u0dd1\u0002\u0dd6\u0002\u0dd8", "\u0002\u0dd8\u0002\u0dda\u0002\u0de1\u0002\u0de8\u0002\u0df1\u0002\u0df4", "\u0002\u0df5\u0002\u0e03\u0002\u0e3c\u0002\u0e42\u0002\u0e50\u0002\u0e52", "\u0002\u0e5b\u0002\u0e83\u0002\u0e84\u0002\u0e86\u0002\u0e86\u0002\u0e89", "\u0002\u0e8a\u0002\u0e8c\u0002\u0e8c\u0002\u0e8f\u0002\u0e8f\u0002\u0e96", "\u0002\u0e99\u0002\u0e9b\u0002\u0ea1\u0002\u0ea3\u0002\u0ea5\u0002\u0ea7", "\u0002\u0ea7\u0002\u0ea9\u0002\u0ea9\u0002\u0eac\u0002\u0ead\u0002\u0eaf", "\u0002\u0ebb\u0002\u0ebd\u0002\u0ebf\u0002\u0ec2\u0002\u0ec6\u0002\u0ec8", "\u0002\u0ec8\u0002\u0eca\u0002\u0ecf\u0002\u0ed2\u0002\u0edb\u0002\u0ede", "\u0002\u0ee1\u0002\u0f02\u0002\u0f02\u0002\u0f1a\u0002\u0f1b\u0002\u0f22", "\u0002\u0f2b\u0002\u0f37\u0002\u0f37\u0002\u0f39\u0002\u0f39\u0002\u0f3b", "\u0002\u0f3b\u0002\u0f40\u0002\u0f49\u0002\u0f4b\u0002\u0f6e\u0002\u0f73", "\u0002\u0f86\u0002\u0f88\u0002\u0f99\u0002\u0f9b\u0002\u0fbe\u0002\u0fc8", "\u0002\u0fc8\u0002\u1002\u0002\u104b\u0002\u1052\u0002\u109f\u0002\u10a2", "\u0002\u10c7\u0002\u10c9\u0002\u10c9\u0002\u10cf\u0002\u10cf\u0002\u10d2", "\u0002\u10fc\u0002\u10fe\u0002\u124a\u0002\u124c\u0002\u124f\u0002\u1252", "\u0002\u1258\u0002\u125a\u0002\u125a\u0002\u125c\u0002\u125f\u0002\u1262", "\u0002\u128a\u0002\u128c\u0002\u128f\u0002\u1292\u0002\u12b2\u0002\u12b4", "\u0002\u12b7\u0002\u12ba\u0002\u12c0\u0002\u12c2\u0002\u12c2\u0002\u12c4", "\u0002\u12c7\u0002\u12ca\u0002\u12d8\u0002\u12da\u0002\u1312\u0002\u1314", "\u0002\u1317\u0002\u131a\u0002\u135c\u0002\u135f\u0002\u1361\u0002\u136b", "\u0002\u1373\u0002\u1382\u0002\u1391\u0002\u13a2\u0002\u13f7\u0002\u13fa", "\u0002\u13ff\u0002\u1403\u0002\u166e\u0002\u1671\u0002\u1681\u0002\u1683", "\u0002\u169c\u0002\u16a2\u0002\u16ec\u0002\u16f0\u0002\u16fa\u0002\u1702", "\u0002\u170e\u0002\u1710\u0002\u1716\u0002\u1722\u0002\u1736\u0002\u1742", "\u0002\u1755\u0002\u1762\u0002\u176e\u0002\u1770\u0002\u1772\u0002\u1774", "\u0002\u1775\u0002\u1782\u0002\u17d5\u0002\u17d9\u0002\u17d9\u0002\u17de", "\u0002\u17df\u0002\u17e2\u0002\u17eb\u0002\u180d\u0002\u180f\u0002\u1812", "\u0002\u181b\u0002\u1822\u0002\u1879\u0002\u1882\u0002\u18ac\u0002\u18b2", "\u0002\u18f7\u0002\u1902\u0002\u1920\u0002\u1922\u0002\u192d\u0002\u1932", "\u0002\u193d\u0002\u1948\u0002\u196f\u0002\u1972\u0002\u1976\u0002\u1982", "\u0002\u19ad\u0002\u19b2\u0002\u19cb\u0002\u19d2\u0002\u19dc\u0002\u1a02", "\u0002\u1a1d\u0002\u1a22\u0002\u1a60\u0002\u1a62\u0002\u1a7e\u0002\u1a81", "\u0002\u1a8b\u0002\u1a92\u0002\u1a9b\u0002\u1aa9\u0002\u1aa9\u0002\u1ab2", "\u0002\u1abf\u0002\u1b02\u0002\u1b4d\u0002\u1b52\u0002\u1b5b\u0002\u1b6d", "\u0002\u1b75\u0002\u1b82\u0002\u1bf5\u0002\u1c02\u0002\u1c39\u0002\u1c42", "\u0002\u1c4b\u0002\u1c4f\u0002\u1c7f\u0002\u1c82\u0002\u1c8a\u0002\u1cd2", "\u0002\u1cd4\u0002\u1cd6\u0002\u1cfb\u0002\u1d02\u0002\u1dfb\u0002\u1dfd", "\u0002\u1f17\u0002\u1f1a\u0002\u1f1f\u0002\u1f22\u0002\u1f47\u0002\u1f4a", "\u0002\u1f4f\u0002\u1f52\u0002\u1f59\u0002\u1f5b\u0002\u1f5b\u0002\u1f5d", "\u0002\u1f5d\u0002\u1f5f\u0002\u1f5f\u0002\u1f61\u0002\u1f7f\u0002\u1f82", "\u0002\u1fb6\u0002\u1fb8\u0002\u1fbe\u0002\u1fc0\u0002\u1fc0\u0002\u1fc4", "\u0002\u1fc6\u0002\u1fc8\u0002\u1fce\u0002\u1fd2\u0002\u1fd5\u0002\u1fd8", "\u0002\u1fdd\u0002\u1fe2\u0002\u1fee\u0002\u1ff4\u0002\u1ff6\u0002\u1ff8", "\u0002\u1ffe\u0002\u2041\u0002\u2042\u0002\u2056\u0002\u2056\u0002\u2073", "\u0002\u2073\u0002\u2081\u0002\u2081\u0002\u2092\u0002\u209e\u0002\u20d2", "\u0002\u20de\u0002\u20e3\u0002\u20e3\u0002\u20e7\u0002\u20f2\u0002\u2104", "\u0002\u2104\u0002\u2109\u0002\u2109\u0002\u210c\u0002\u2115\u0002\u2117", "\u0002\u2117\u0002\u211a\u0002\u211f\u0002\u2126\u0002\u2126\u0002\u2128", "\u0002\u2128\u0002\u212a\u0002\u212a\u0002\u212c\u0002\u213b\u0002\u213e", "\u0002\u2141\u0002\u2147\u0002\u214b\u0002\u2150\u0002\u2150\u0002\u2162", "\u0002\u218a\u0002\u2c02\u0002\u2c30\u0002\u2c32\u0002\u2c60\u0002\u2c62", "\u0002\u2ce6\u0002\u2ced\u0002\u2cf5\u0002\u2d02\u0002\u2d27\u0002\u2d29", "\u0002\u2d29\u0002\u2d2f\u0002\u2d2f\u0002\u2d32\u0002\u2d69\u0002\u2d71", "\u0002\u2d71\u0002\u2d81\u0002\u2d98\u0002\u2da2\u0002\u2da8\u0002\u2daa", "\u0002\u2db0\u0002\u2db2\u0002\u2db8\u0002\u2dba\u0002\u2dc0\u0002\u2dc2", "\u0002\u2dc8\u0002\u2dca\u0002\u2dd0\u0002\u2dd2\u0002\u2dd8\u0002\u2dda", "\u0002\u2de0\u0002\u2de2\u0002\u2e01\u0002\u3007\u0002\u3009\u0002\u3023", "\u0002\u3031\u0002\u3033\u0002\u3037\u0002\u303a\u0002\u303e\u0002\u3043", "\u0002\u3098\u0002\u309b\u0002\u30a1\u0002\u30a3\u0002\u30fc\u0002\u30fe", "\u0002\u3101\u0002\u3107\u0002\u3130\u0002\u3133\u0002\u3190\u0002\u31a2", "\u0002\u31bc\u0002\u31f2\u0002\u3201\u0002\u3402\u0002\u4db7\u0002\u4e02", "\u0002\u9fec\u0002\ua002\u0002\ua48e\u0002\ua4d2\u0002\ua4ff\u0002\ua502", "\u0002\ua60e\u0002\ua612\u0002\ua62d\u0002\ua642\u0002\ua671\u0002\ua676", "\u0002\ua67f\u0002\ua681\u0002\ua6f3\u0002\ua719\u0002\ua721\u0002\ua724", "\u0002\ua78a\u0002\ua78d\u0002\ua7b0\u0002\ua7b2\u0002\ua7b9\u0002\ua7f9", "\u0002\ua829\u0002\ua842\u0002\ua875\u0002\ua882\u0002\ua8c7\u0002\ua8d2", "\u0002\ua8db\u0002\ua8e2\u0002\ua8f9\u0002\ua8fd\u0002\ua8fd\u0002\ua8ff", "\u0002\ua8ff\u0002\ua902\u0002\ua92f\u0002\ua932\u0002\ua955\u0002\ua962", "\u0002\ua97e\u0002\ua982\u0002\ua9c2\u0002\ua9d1\u0002\ua9db\u0002\ua9e2", "\u0002\uaa00\u0002\uaa02\u0002\uaa38\u0002\uaa42\u0002\uaa4f\u0002\uaa52", "\u0002\uaa5b\u0002\uaa62\u0002\uaa78\u0002\uaa7c\u0002\uaac4\u0002\uaadd", "\u0002\uaadf\u0002\uaae2\u0002\uaaf1\u0002\uaaf4\u0002\uaaf8\u0002\uab03", "\u0002\uab08\u0002\uab0b\u0002\uab10\u0002\uab13\u0002\uab18\u0002\uab22", "\u0002\uab28\u0002\uab2a\u0002\uab30\u0002\uab32\u0002\uab5c\u0002\uab5e", "\u0002\uab67\u0002\uab72\u0002\uabec\u0002\uabee\u0002\uabef\u0002\uabf2", "\u0002\uabfb\u0002\uac02\u0002\ud7a5\u0002\ud7b2\u0002\ud7c8\u0002\ud7cd", "\u0002\ud7fd\u0002\uf902\u0002\ufa6f\u0002\ufa72\u0002\ufadb\u0002\ufb02", "\u0002\ufb08\u0002\ufb15\u0002\ufb19\u0002\ufb1f\u0002\ufb2a\u0002\ufb2c", "\u0002\ufb38\u0002\ufb3a\u0002\ufb3e\u0002\ufb40\u0002\ufb40\u0002\ufb42", "\u0002\ufb43\u0002\ufb45\u0002\ufb46\u0002\ufb48\u0002\ufbb3\u0002\ufbd5", "\u0002\ufd3f\u0002\ufd52\u0002\ufd91\u0002\ufd94\u0002\ufdc9\u0002\ufdf2", "\u0002\ufdfd\u0002\ufe02\u0002\ufe11\u0002\ufe22\u0002\ufe31\u0002\ufe35", "\u0002\ufe36\u0002\ufe4f\u0002\ufe51\u0002\ufe72\u0002\ufe76\u0002\ufe78", "\u0002\ufefe\u0002\uff12\u0002\uff1b\u0002\uff23\u0002\uff3c\u0002\uff41", "\u0002\uff41\u0002\uff43\u0002\uff5c\u0002\uff68\u0002\uffc0\u0002\uffc4", "\u0002\uffc9\u0002\uffcc\u0002\uffd1\u0002\uffd4\u0002\uffd9\u0002\uffdc", "\u0002\uffde\u0002\u0002\u0003\r\u0003\u000f\u0003(\u0003*\u0003<\u0003", ">\u0003?\u0003A\u0003O\u0003R\u0003_\u0003\u0082\u0003\u00fc\u0003\u0142", "\u0003\u0176\u0003\u01ff\u0003\u01ff\u0003\u0282\u0003\u029e\u0003\u02a2", "\u0003\u02d2\u0003\u02e2\u0003\u02e2\u0003\u0302\u0003\u0321\u0003\u032f", "\u0003\u034c\u0003\u0352\u0003\u037c\u0003\u0382\u0003\u039f\u0003\u03a2", "\u0003\u03c5\u0003\u03ca\u0003\u03d1\u0003\u03d3\u0003\u03d7\u0003\u0402", "\u0003\u049f\u0003\u04a2\u0003\u04ab\u0003\u04b2\u0003\u04d5\u0003\u04da", "\u0003\u04fd\u0003\u0502\u0003\u0529\u0003\u0532\u0003\u0565\u0003\u0602", "\u0003\u0738\u0003\u0742\u0003\u0757\u0003\u0762\u0003\u0769\u0003\u0802", "\u0003\u0807\u0003\u080a\u0003\u080a\u0003\u080c\u0003\u0837\u0003\u0839", "\u0003\u083a\u0003\u083e\u0003\u083e\u0003\u0841\u0003\u0857\u0003\u0862", "\u0003\u0878\u0003\u0882\u0003\u08a0\u0003\u08e2\u0003\u08f4\u0003\u08f6", "\u0003\u08f7\u0003\u0902\u0003\u0917\u0003\u0922\u0003\u093b\u0003\u0982", "\u0003\u09b9\u0003\u09c0\u0003\u09c1\u0003\u0a02\u0003\u0a05\u0003\u0a07", "\u0003\u0a08\u0003\u0a0e\u0003\u0a15\u0003\u0a17\u0003\u0a19\u0003\u0a1b", "\u0003\u0a35\u0003\u0a3a\u0003\u0a3c\u0003\u0a41\u0003\u0a41\u0003\u0a62", "\u0003\u0a7e\u0003\u0a82\u0003\u0a9e\u0003\u0ac2\u0003\u0ac9\u0003\u0acb", "\u0003\u0ae8\u0003\u0b02\u0003\u0b37\u0003\u0b42\u0003\u0b57\u0003\u0b62", "\u0003\u0b74\u0003\u0b82\u0003\u0b93\u0003\u0c02\u0003\u0c4a\u0003\u0c82", "\u0003\u0cb4\u0003\u0cc2\u0003\u0cf4\u0003\u1002\u0003\u1048\u0003\u1068", "\u0003\u1071\u0003\u1081\u0003\u10bc\u0003\u10d2\u0003\u10ea\u0003\u10f2", "\u0003\u10fb\u0003\u1102\u0003\u1136\u0003\u1138\u0003\u1141\u0003\u1152", "\u0003\u1175\u0003\u1178\u0003\u1178\u0003\u1182\u0003\u11c6\u0003\u11cc", "\u0003\u11ce\u0003\u11d2\u0003\u11dc\u0003\u11de\u0003\u11de\u0003\u1202", "\u0003\u1213\u0003\u1215\u0003\u1239\u0003\u1240\u0003\u1240\u0003\u1282", "\u0003\u1288\u0003\u128a\u0003\u128a\u0003\u128c\u0003\u128f\u0003\u1291", "\u0003\u129f\u0003\u12a1\u0003\u12aa\u0003\u12b2\u0003\u12ec\u0003\u12f2", "\u0003\u12fb\u0003\u1302\u0003\u1305\u0003\u1307\u0003\u130e\u0003\u1311", "\u0003\u1312\u0003\u1315\u0003\u132a\u0003\u132c\u0003\u1332\u0003\u1334", "\u0003\u1335\u0003\u1337\u0003\u133b\u0003\u133e\u0003\u1346\u0003\u1349", "\u0003\u134a\u0003\u134d\u0003\u134f\u0003\u1352\u0003\u1352\u0003\u1359", "\u0003\u1359\u0003\u135f\u0003\u1365\u0003\u1368\u0003\u136e\u0003\u1372", "\u0003\u1376\u0003\u1402\u0003\u144c\u0003\u1452\u0003\u145b\u0003\u1482", "\u0003\u14c7\u0003\u14c9\u0003\u14c9\u0003\u14d2\u0003\u14db\u0003\u1582", "\u0003\u15b7\u0003\u15ba\u0003\u15c2\u0003\u15da\u0003\u15df\u0003\u1602", "\u0003\u1642\u0003\u1646\u0003\u1646\u0003\u1652\u0003\u165b\u0003\u1682", "\u0003\u16b9\u0003\u16c2\u0003\u16cb\u0003\u1702\u0003\u171b\u0003\u171f", "\u0003\u172d\u0003\u1732\u0003\u173b\u0003\u18a2\u0003\u18eb\u0003\u1901", "\u0003\u1901\u0003\u1a02\u0003\u1a40\u0003\u1a49\u0003\u1a49\u0003\u1a52", "\u0003\u1a85\u0003\u1a88\u0003\u1a9b\u0003\u1ac2\u0003\u1afa\u0003\u1c02", "\u0003\u1c0a\u0003\u1c0c\u0003\u1c38\u0003\u1c3a\u0003\u1c42\u0003\u1c52", "\u0003\u1c5b\u0003\u1c74\u0003\u1c91\u0003\u1c94\u0003\u1ca9\u0003\u1cab", "\u0003\u1cb8\u0003\u1d02\u0003\u1d08\u0003\u1d0a\u0003\u1d0b\u0003\u1d0d", "\u0003\u1d38\u0003\u1d3c\u0003\u1d3c\u0003\u1d3e\u0003\u1d3f\u0003\u1d41", "\u0003\u1d49\u0003\u1d52\u0003\u1d5b\u0003\u2002\u0003\u239b\u0003\u2402", "\u0003\u2470\u0003\u2482\u0003\u2545\u0003\u3002\u0003\u3430\u0003\u4402", "\u0003\u4648\u0003\u6802\u0003\u6a3a\u0003\u6a42\u0003\u6a60\u0003\u6a62", "\u0003\u6a6b\u0003\u6ad2\u0003\u6aef\u0003\u6af2\u0003\u6af6\u0003\u6b02", "\u0003\u6b38\u0003\u6b42\u0003\u6b45\u0003\u6b52\u0003\u6b5b\u0003\u6b65", "\u0003\u6b79\u0003\u6b7f\u0003\u6b91\u0003\u6f02\u0003\u6f46\u0003\u6f52", "\u0003\u6f80\u0003\u6f91\u0003\u6fa1\u0003\u6fe2\u0003\u6fe3\u0003\u7002", "\u0003\u87ee\u0003\u8802\u0003\u8af4\u0003\ub002\u0003\ub120\u0003\ub172", "\u0003\ub2fd\u0003\ubc02\u0003\ubc6c\u0003\ubc72\u0003\ubc7e\u0003\ubc82", "\u0003\ubc8a\u0003\ubc92\u0003\ubc9b\u0003\ubc9f\u0003\ubca0\u0003\ud167", "\u0003\ud16b\u0003\ud16f\u0003\ud174\u0003\ud17d\u0003\ud184\u0003\ud187", "\u0003\ud18d\u0003\ud1ac\u0003\ud1af\u0003\ud244\u0003\ud246\u0003\ud402", "\u0003\ud456\u0003\ud458\u0003\ud49e\u0003\ud4a0\u0003\ud4a1\u0003\ud4a4", "\u0003\ud4a4\u0003\ud4a7\u0003\ud4a8\u0003\ud4ab\u0003\ud4ae\u0003\ud4b0", "\u0003\ud4bb\u0003\ud4bd\u0003\ud4bd\u0003\ud4bf\u0003\ud4c5\u0003\ud4c7", "\u0003\ud507\u0003\ud509\u0003\ud50c\u0003\ud50f\u0003\ud516\u0003\ud518", "\u0003\ud51e\u0003\ud520\u0003\ud53b\u0003\ud53d\u0003\ud540\u0003\ud542", "\u0003\ud546\u0003\ud548\u0003\ud548\u0003\ud54c\u0003\ud552\u0003\ud554", "\u0003\ud6a7\u0003\ud6aa\u0003\ud6c2\u0003\ud6c4\u0003\ud6dc\u0003\ud6de", "\u0003\ud6fc\u0003\ud6fe\u0003\ud716\u0003\ud718\u0003\ud736\u0003\ud738", "\u0003\ud750\u0003\ud752\u0003\ud770\u0003\ud772\u0003\ud78a\u0003\ud78c", "\u0003\ud7aa\u0003\ud7ac\u0003\ud7c4\u0003\ud7c6\u0003\ud7cd\u0003\ud7d0", "\u0003\ud801\u0003\uda02\u0003\uda38\u0003\uda3d\u0003\uda6e\u0003\uda77", "\u0003\uda77\u0003\uda86\u0003\uda86\u0003\uda9d\u0003\udaa1\u0003\udaa3", "\u0003\udab1\u0003\ue002\u0003\ue008\u0003\ue00a\u0003\ue01a\u0003\ue01d", "\u0003\ue023\u0003\ue025\u0003\ue026\u0003\ue028\u0003\ue02c\u0003\ue802", "\u0003\ue8c6\u0003\ue8d2\u0003\ue8d8\u0003\ue902\u0003\ue94c\u0003\ue952", "\u0003\ue95b\u0003\uee02\u0003\uee05\u0003\uee07\u0003\uee21\u0003\uee23", "\u0003\uee24\u0003\uee26\u0003\uee26\u0003\uee29\u0003\uee29\u0003\uee2b", "\u0003\uee34\u0003\uee36\u0003\uee39\u0003\uee3b\u0003\uee3b\u0003\uee3d", "\u0003\uee3d\u0003\uee44\u0003\uee44\u0003\uee49\u0003\uee49\u0003\uee4b", "\u0003\uee4b\u0003\uee4d\u0003\uee4d\u0003\uee4f\u0003\uee51\u0003\uee53", "\u0003\uee54\u0003\uee56\u0003\uee56\u0003\uee59\u0003\uee59\u0003\uee5b", "\u0003\uee5b\u0003\uee5d\u0003\uee5d\u0003\uee5f\u0003\uee5f\u0003\uee61", "\u0003\uee61\u0003\uee63\u0003\uee64\u0003\uee66\u0003\uee66\u0003\uee69", "\u0003\uee6c\u0003\uee6e\u0003\uee74\u0003\uee76\u0003\uee79\u0003\uee7b", "\u0003\uee7e\u0003\uee80\u0003\uee80\u0003\uee82\u0003\uee8b\u0003\uee8d", "\u0003\uee9d\u0003\ueea3\u0003\ueea5\u0003\ueea7\u0003\ueeab\u0003\ueead", "\u0003\ueebd\u0003\u0002\u0004\ua6d8\u0004\ua702\u0004\ub736\u0004\ub742", "\u0004\ub81f\u0004\ub822\u0004\ucea3\u0004\uceb2\u0004\uebe2\u0004\uf802", "\u0004\ufa1f\u0004\u0102\u0010\u01f1\u0010\u024b\u0002C\u0002\\\u0002", "c\u0002|\u0002\u00ac\u0002\u00ac\u0002\u00b7\u0002\u00b7\u0002\u00bc", "\u0002\u00bc\u0002\u00c2\u0002\u00d8\u0002\u00da\u0002\u00f8\u0002\u00fa", "\u0002\u02c3\u0002\u02c8\u0002\u02d3\u0002\u02e2\u0002\u02e6\u0002\u02ee", "\u0002\u02ee\u0002\u02f0\u0002\u02f0\u0002\u0372\u0002\u0376\u0002\u0378", "\u0002\u0379\u0002\u037c\u0002\u037f\u0002\u0381\u0002\u0381\u0002\u0388", "\u0002\u0388\u0002\u038a\u0002\u038c\u0002\u038e\u0002\u038e\u0002\u0390", "\u0002\u03a3\u0002\u03a5\u0002\u03f7\u0002\u03f9\u0002\u0483\u0002\u048c", "\u0002\u0531\u0002\u0533\u0002\u0558\u0002\u055b\u0002\u055b\u0002\u0563", "\u0002\u0589\u0002\u05d2\u0002\u05ec\u0002\u05f2\u0002\u05f4\u0002\u0622", "\u0002\u064c\u0002\u0670\u0002\u0671\u0002\u0673\u0002\u06d5\u0002\u06d7", "\u0002\u06d7\u0002\u06e7\u0002\u06e8\u0002\u06f0\u0002\u06f1\u0002\u06fc", "\u0002\u06fe\u0002\u0701\u0002\u0701\u0002\u0712\u0002\u0712\u0002\u0714", "\u0002\u0731\u0002\u074f\u0002\u07a7\u0002\u07b3\u0002\u07b3\u0002\u07cc", "\u0002\u07ec\u0002\u07f6\u0002\u07f7\u0002\u07fc\u0002\u07fc\u0002\u0802", "\u0002\u0817\u0002\u081c\u0002\u081c\u0002\u0826\u0002\u0826\u0002\u082a", "\u0002\u082a\u0002\u0842\u0002\u085a\u0002\u0862\u0002\u086c\u0002\u08a2", "\u0002\u08b6\u0002\u08b8\u0002\u08bf\u0002\u0906\u0002\u093b\u0002\u093f", "\u0002\u093f\u0002\u0952\u0002\u0952\u0002\u095a\u0002\u0963\u0002\u0973", "\u0002\u0982\u0002\u0987\u0002\u098e\u0002\u0991\u0002\u0992\u0002\u0995", "\u0002\u09aa\u0002\u09ac\u0002\u09b2\u0002\u09b4\u0002\u09b4\u0002\u09b8", "\u0002\u09bb\u0002\u09bf\u0002\u09bf\u0002\u09d0\u0002\u09d0\u0002\u09de", "\u0002\u09df\u0002\u09e1\u0002\u09e3\u0002\u09f2\u0002\u09f3\u0002\u09fe", "\u0002\u09fe\u0002\u0a07\u0002\u0a0c\u0002\u0a11\u0002\u0a12\u0002\u0a15", "\u0002\u0a2a\u0002\u0a2c\u0002\u0a32\u0002\u0a34\u0002\u0a35\u0002\u0a37", "\u0002\u0a38\u0002\u0a3a\u0002\u0a3b\u0002\u0a5b\u0002\u0a5e\u0002\u0a60", "\u0002\u0a60\u0002\u0a74\u0002\u0a76\u0002\u0a87\u0002\u0a8f\u0002\u0a91", "\u0002\u0a93\u0002\u0a95\u0002\u0aaa\u0002\u0aac\u0002\u0ab2\u0002\u0ab4", "\u0002\u0ab5\u0002\u0ab7\u0002\u0abb\u0002\u0abf\u0002\u0abf\u0002\u0ad2", "\u0002\u0ad2\u0002\u0ae2\u0002\u0ae3\u0002\u0afb\u0002\u0afb\u0002\u0b07", "\u0002\u0b0e\u0002\u0b11\u0002\u0b12\u0002\u0b15\u0002\u0b2a\u0002\u0b2c", "\u0002\u0b32\u0002\u0b34\u0002\u0b35\u0002\u0b37\u0002\u0b3b\u0002\u0b3f", "\u0002\u0b3f\u0002\u0b5e\u0002\u0b5f\u0002\u0b61\u0002\u0b63\u0002\u0b73", "\u0002\u0b73\u0002\u0b85\u0002\u0b85\u0002\u0b87\u0002\u0b8c\u0002\u0b90", "\u0002\u0b92\u0002\u0b94\u0002\u0b97\u0002\u0b9b\u0002\u0b9c\u0002\u0b9e", "\u0002\u0b9e\u0002\u0ba0\u0002\u0ba1\u0002\u0ba5\u0002\u0ba6\u0002\u0baa", "\u0002\u0bac\u0002\u0bb0\u0002\u0bbb\u0002\u0bd2\u0002\u0bd2\u0002\u0c07", "\u0002\u0c0e\u0002\u0c10\u0002\u0c12\u0002\u0c14\u0002\u0c2a\u0002\u0c2c", "\u0002\u0c3b\u0002\u0c3f\u0002\u0c3f\u0002\u0c5a\u0002\u0c5c\u0002\u0c62", "\u0002\u0c63\u0002\u0c82\u0002\u0c82\u0002\u0c87\u0002\u0c8e\u0002\u0c90", "\u0002\u0c92\u0002\u0c94\u0002\u0caa\u0002\u0cac\u0002\u0cb5\u0002\u0cb7", "\u0002\u0cbb\u0002\u0cbf\u0002\u0cbf\u0002\u0ce0\u0002\u0ce0\u0002\u0ce2", "\u0002\u0ce3\u0002\u0cf3\u0002\u0cf4\u0002\u0d07\u0002\u0d0e\u0002\u0d10", "\u0002\u0d12\u0002\u0d14\u0002\u0d3c\u0002\u0d3f\u0002\u0d3f\u0002\u0d50", "\u0002\u0d50\u0002\u0d56\u0002\u0d58\u0002\u0d61\u0002\u0d63\u0002\u0d7c", "\u0002\u0d81\u0002\u0d87\u0002\u0d98\u0002\u0d9c\u0002\u0db3\u0002\u0db5", "\u0002\u0dbd\u0002\u0dbf\u0002\u0dbf\u0002\u0dc2\u0002\u0dc8\u0002\u0e03", "\u0002\u0e32\u0002\u0e34\u0002\u0e35\u0002\u0e42\u0002\u0e48\u0002\u0e83", "\u0002\u0e84\u0002\u0e86\u0002\u0e86\u0002\u0e89\u0002\u0e8a\u0002\u0e8c", "\u0002\u0e8c\u0002\u0e8f\u0002\u0e8f\u0002\u0e96\u0002\u0e99\u0002\u0e9b", "\u0002\u0ea1\u0002\u0ea3\u0002\u0ea5\u0002\u0ea7\u0002\u0ea7\u0002\u0ea9", "\u0002\u0ea9\u0002\u0eac\u0002\u0ead\u0002\u0eaf\u0002\u0eb2\u0002\u0eb4", "\u0002\u0eb5\u0002\u0ebf\u0002\u0ebf\u0002\u0ec2\u0002\u0ec6\u0002\u0ec8", "\u0002\u0ec8\u0002\u0ede\u0002\u0ee1\u0002\u0f02\u0002\u0f02\u0002\u0f42", "\u0002\u0f49\u0002\u0f4b\u0002\u0f6e\u0002\u0f8a\u0002\u0f8e\u0002\u1002", "\u0002\u102c\u0002\u1041\u0002\u1041\u0002\u1052\u0002\u1057\u0002\u105c", "\u0002\u105f\u0002\u1063\u0002\u1063\u0002\u1067\u0002\u1068\u0002\u1070", "\u0002\u1072\u0002\u1077\u0002\u1083\u0002\u1090\u0002\u1090\u0002\u10a2", "\u0002\u10c7\u0002\u10c9\u0002\u10c9\u0002\u10cf\u0002\u10cf\u0002\u10d2", "\u0002\u10fc\u0002\u10fe\u0002\u124a\u0002\u124c\u0002\u124f\u0002\u1252", "\u0002\u1258\u0002\u125a\u0002\u125a\u0002\u125c\u0002\u125f\u0002\u1262", "\u0002\u128a\u0002\u128c\u0002\u128f\u0002\u1292\u0002\u12b2\u0002\u12b4", "\u0002\u12b7\u0002\u12ba\u0002\u12c0\u0002\u12c2\u0002\u12c2\u0002\u12c4", "\u0002\u12c7\u0002\u12ca\u0002\u12d8\u0002\u12da\u0002\u1312\u0002\u1314", "\u0002\u1317\u0002\u131a\u0002\u135c\u0002\u1382\u0002\u1391\u0002\u13a2", "\u0002\u13f7\u0002\u13fa\u0002\u13ff\u0002\u1403\u0002\u166e\u0002\u1671", "\u0002\u1681\u0002\u1683\u0002\u169c\u0002\u16a2\u0002\u16ec\u0002\u16f0", "\u0002\u16fa\u0002\u1702\u0002\u170e\u0002\u1710\u0002\u1713\u0002\u1722", "\u0002\u1733\u0002\u1742\u0002\u1753\u0002\u1762\u0002\u176e\u0002\u1770", "\u0002\u1772\u0002\u1782\u0002\u17b5\u0002\u17d9\u0002\u17d9\u0002\u17de", "\u0002\u17de\u0002\u1822\u0002\u1879\u0002\u1882\u0002\u18aa\u0002\u18ac", "\u0002\u18ac\u0002\u18b2\u0002\u18f7\u0002\u1902\u0002\u1920\u0002\u1952", "\u0002\u196f\u0002\u1972\u0002\u1976\u0002\u1982\u0002\u19ad\u0002\u19b2", "\u0002\u19cb\u0002\u1a02\u0002\u1a18\u0002\u1a22\u0002\u1a56\u0002\u1aa9", "\u0002\u1aa9\u0002\u1b07\u0002\u1b35\u0002\u1b47\u0002\u1b4d\u0002\u1b85", "\u0002\u1ba2\u0002\u1bb0\u0002\u1bb1\u0002\u1bbc\u0002\u1be7\u0002\u1c02", "\u0002\u1c25\u0002\u1c4f\u0002\u1c51\u0002\u1c5c\u0002\u1c7f\u0002\u1c82", "\u0002\u1c8a\u0002\u1ceb\u0002\u1cee\u0002\u1cf0\u0002\u1cf3\u0002\u1cf7", "\u0002\u1cf8\u0002\u1d02\u0002\u1dc1\u0002\u1e02\u0002\u1f17\u0002\u1f1a", "\u0002\u1f1f\u0002\u1f22\u0002\u1f47\u0002\u1f4a\u0002\u1f4f\u0002\u1f52", "\u0002\u1f59\u0002\u1f5b\u0002\u1f5b\u0002\u1f5d\u0002\u1f5d\u0002\u1f5f", "\u0002\u1f5f\u0002\u1f61\u0002\u1f7f\u0002\u1f82\u0002\u1fb6\u0002\u1fb8", "\u0002\u1fbe\u0002\u1fc0\u0002\u1fc0\u0002\u1fc4\u0002\u1fc6\u0002\u1fc8", "\u0002\u1fce\u0002\u1fd2\u0002\u1fd5\u0002\u1fd8\u0002\u1fdd\u0002\u1fe2", "\u0002\u1fee\u0002\u1ff4\u0002\u1ff6\u0002\u1ff8\u0002\u1ffe\u0002\u2073", "\u0002\u2073\u0002\u2081\u0002\u2081\u0002\u2092\u0002\u209e\u0002\u2104", "\u0002\u2104\u0002\u2109\u0002\u2109\u0002\u210c\u0002\u2115\u0002\u2117", "\u0002\u2117\u0002\u211a\u0002\u211f\u0002\u2126\u0002\u2126\u0002\u2128", "\u0002\u2128\u0002\u212a\u0002\u212a\u0002\u212c\u0002\u213b\u0002\u213e", "\u0002\u2141\u0002\u2147\u0002\u214b\u0002\u2150\u0002\u2150\u0002\u2162", "\u0002\u218a\u0002\u2c02\u0002\u2c30\u0002\u2c32\u0002\u2c60\u0002\u2c62", "\u0002\u2ce6\u0002\u2ced\u0002\u2cf0\u0002\u2cf4\u0002\u2cf5\u0002\u2d02", "\u0002\u2d27\u0002\u2d29\u0002\u2d29\u0002\u2d2f\u0002\u2d2f\u0002\u2d32", "\u0002\u2d69\u0002\u2d71\u0002\u2d71\u0002\u2d82\u0002\u2d98\u0002\u2da2", "\u0002\u2da8\u0002\u2daa\u0002\u2db0\u0002\u2db2\u0002\u2db8\u0002\u2dba", "\u0002\u2dc0\u0002\u2dc2\u0002\u2dc8\u0002\u2dca\u0002\u2dd0\u0002\u2dd2", "\u0002\u2dd8\u0002\u2dda\u0002\u2de0\u0002\u3007\u0002\u3009\u0002\u3023", "\u0002\u302b\u0002\u3033\u0002\u3037\u0002\u303a\u0002\u303e\u0002\u3043", "\u0002\u3098\u0002\u309d\u0002\u30a1\u0002\u30a3\u0002\u30fc\u0002\u30fe", "\u0002\u3101\u0002\u3107\u0002\u3130\u0002\u3133\u0002\u3190\u0002\u31a2", "\u0002\u31bc\u0002\u31f2\u0002\u3201\u0002\u3402\u0002\u4db7\u0002\u4e02", "\u0002\u9fec\u0002\ua002\u0002\ua48e\u0002\ua4d2\u0002\ua4ff\u0002\ua502", "\u0002\ua60e\u0002\ua612\u0002\ua621\u0002\ua62c\u0002\ua62d\u0002\ua642", "\u0002\ua670\u0002\ua681\u0002\ua69f\u0002\ua6a2\u0002\ua6f1\u0002\ua719", "\u0002\ua721\u0002\ua724\u0002\ua78a\u0002\ua78d\u0002\ua7b0\u0002\ua7b2", "\u0002\ua7b9\u0002\ua7f9\u0002\ua803\u0002\ua805\u0002\ua807\u0002\ua809", "\u0002\ua80c\u0002\ua80e\u0002\ua824\u0002\ua842\u0002\ua875\u0002\ua884", "\u0002\ua8b5\u0002\ua8f4\u0002\ua8f9\u0002\ua8fd\u0002\ua8fd\u0002\ua8ff", "\u0002\ua8ff\u0002\ua90c\u0002\ua927\u0002\ua932\u0002\ua948\u0002\ua962", "\u0002\ua97e\u0002\ua986\u0002\ua9b4\u0002\ua9d1\u0002\ua9d1\u0002\ua9e2", "\u0002\ua9e6\u0002\ua9e8\u0002\ua9f1\u0002\ua9fc\u0002\uaa00\u0002\uaa02", "\u0002\uaa2a\u0002\uaa42\u0002\uaa44\u0002\uaa46\u0002\uaa4d\u0002\uaa62", "\u0002\uaa78\u0002\uaa7c\u0002\uaa7c\u0002\uaa80\u0002\uaab1\u0002\uaab3", "\u0002\uaab3\u0002\uaab7\u0002\uaab8\u0002\uaabb\u0002\uaabf\u0002\uaac2", "\u0002\uaac2\u0002\uaac4\u0002\uaac4\u0002\uaadd\u0002\uaadf\u0002\uaae2", "\u0002\uaaec\u0002\uaaf4\u0002\uaaf6\u0002\uab03\u0002\uab08\u0002\uab0b", "\u0002\uab10\u0002\uab13\u0002\uab18\u0002\uab22\u0002\uab28\u0002\uab2a", "\u0002\uab30\u0002\uab32\u0002\uab5c\u0002\uab5e\u0002\uab67\u0002\uab72", "\u0002\uabe4\u0002\uac02\u0002\ud7a5\u0002\ud7b2\u0002\ud7c8\u0002\ud7cd", "\u0002\ud7fd\u0002\uf902\u0002\ufa6f\u0002\ufa72\u0002\ufadb\u0002\ufb02", "\u0002\ufb08\u0002\ufb15\u0002\ufb19\u0002\ufb1f\u0002\ufb1f\u0002\ufb21", "\u0002\ufb2a\u0002\ufb2c\u0002\ufb38\u0002\ufb3a\u0002\ufb3e\u0002\ufb40", "\u0002\ufb40\u0002\ufb42\u0002\ufb43\u0002\ufb45\u0002\ufb46\u0002\ufb48", "\u0002\ufbb3\u0002\ufbd5\u0002\ufd3f\u0002\ufd52\u0002\ufd91\u0002\ufd94", "\u0002\ufdc9\u0002\ufdf2\u0002\ufdfd\u0002\ufe72\u0002\ufe76\u0002\ufe78", "\u0002\ufefe\u0002\uff23\u0002\uff3c\u0002\uff43\u0002\uff5c\u0002\uff68", "\u0002\uffc0\u0002\uffc4\u0002\uffc9\u0002\uffcc\u0002\uffd1\u0002\uffd4", "\u0002\uffd9\u0002\uffdc\u0002\uffde\u0002\u0002\u0003\r\u0003\u000f", "\u0003(\u0003*\u0003<\u0003>\u0003?\u0003A\u0003O\u0003R\u0003_\u0003", "\u0082\u0003\u00fc\u0003\u0142\u0003\u0176\u0003\u0282\u0003\u029e\u0003", "\u02a2\u0003\u02d2\u0003\u0302\u0003\u0321\u0003\u032f\u0003\u034c\u0003", "\u0352\u0003\u0377\u0003\u0382\u0003\u039f\u0003\u03a2\u0003\u03c5\u0003", "\u03ca\u0003\u03d1\u0003\u03d3\u0003\u03d7\u0003\u0402\u0003\u049f\u0003", "\u04b2\u0003\u04d5\u0003\u04da\u0003\u04fd\u0003\u0502\u0003\u0529\u0003", "\u0532\u0003\u0565\u0003\u0602\u0003\u0738\u0003\u0742\u0003\u0757\u0003", "\u0762\u0003\u0769\u0003\u0802\u0003\u0807\u0003\u080a\u0003\u080a\u0003", "\u080c\u0003\u0837\u0003\u0839\u0003\u083a\u0003\u083e\u0003\u083e\u0003", "\u0841\u0003\u0857\u0003\u0862\u0003\u0878\u0003\u0882\u0003\u08a0\u0003", "\u08e2\u0003\u08f4\u0003\u08f6\u0003\u08f7\u0003\u0902\u0003\u0917\u0003", "\u0922\u0003\u093b\u0003\u0982\u0003\u09b9\u0003\u09c0\u0003\u09c1\u0003", "\u0a02\u0003\u0a02\u0003\u0a12\u0003\u0a15\u0003\u0a17\u0003\u0a19\u0003", "\u0a1b\u0003\u0a35\u0003\u0a62\u0003\u0a7e\u0003\u0a82\u0003\u0a9e\u0003", "\u0ac2\u0003\u0ac9\u0003\u0acb\u0003\u0ae6\u0003\u0b02\u0003\u0b37\u0003", "\u0b42\u0003\u0b57\u0003\u0b62\u0003\u0b74\u0003\u0b82\u0003\u0b93\u0003", "\u0c02\u0003\u0c4a\u0003\u0c82\u0003\u0cb4\u0003\u0cc2\u0003\u0cf4\u0003", "\u1005\u0003\u1039\u0003\u1085\u0003\u10b1\u0003\u10d2\u0003\u10ea\u0003", "\u1105\u0003\u1128\u0003\u1152\u0003\u1174\u0003\u1178\u0003\u1178\u0003", "\u1185\u0003\u11b4\u0003\u11c3\u0003\u11c6\u0003\u11dc\u0003\u11dc\u0003", "\u11de\u0003\u11de\u0003\u1202\u0003\u1213\u0003\u1215\u0003\u122d\u0003", "\u1282\u0003\u1288\u0003\u128a\u0003\u128a\u0003\u128c\u0003\u128f\u0003", "\u1291\u0003\u129f\u0003\u12a1\u0003\u12aa\u0003\u12b2\u0003\u12e0\u0003", "\u1307\u0003\u130e\u0003\u1311\u0003\u1312\u0003\u1315\u0003\u132a\u0003", "\u132c\u0003\u1332\u0003\u1334\u0003\u1335\u0003\u1337\u0003\u133b\u0003", "\u133f\u0003\u133f\u0003\u1352\u0003\u1352\u0003\u135f\u0003\u1363\u0003", "\u1402\u0003\u1436\u0003\u1449\u0003\u144c\u0003\u1482\u0003\u14b1\u0003", "\u14c6\u0003\u14c7\u0003\u14c9\u0003\u14c9\u0003\u1582\u0003\u15b0\u0003", "\u15da\u0003\u15dd\u0003\u1602\u0003\u1631\u0003\u1646\u0003\u1646\u0003", "\u1682\u0003\u16ac\u0003\u1702\u0003\u171b\u0003\u18a2\u0003\u18e1\u0003", "\u1901\u0003\u1901\u0003\u1a02\u0003\u1a02\u0003\u1a0d\u0003\u1a34\u0003", "\u1a3c\u0003\u1a3c\u0003\u1a52\u0003\u1a52\u0003\u1a5e\u0003\u1a85\u0003", "\u1a88\u0003\u1a8b\u0003\u1ac2\u0003\u1afa\u0003\u1c02\u0003\u1c0a\u0003", "\u1c0c\u0003\u1c30\u0003\u1c42\u0003\u1c42\u0003\u1c74\u0003\u1c91\u0003", "\u1d02\u0003\u1d08\u0003\u1d0a\u0003\u1d0b\u0003\u1d0d\u0003\u1d32\u0003", "\u1d48\u0003\u1d48\u0003\u2002\u0003\u239b\u0003\u2402\u0003\u2470\u0003", "\u2482\u0003\u2545\u0003\u3002\u0003\u3430\u0003\u4402\u0003\u4648\u0003", "\u6802\u0003\u6a3a\u0003\u6a42\u0003\u6a60\u0003\u6ad2\u0003\u6aef\u0003", "\u6b02\u0003\u6b31\u0003\u6b42\u0003\u6b45\u0003\u6b65\u0003\u6b79\u0003", "\u6b7f\u0003\u6b91\u0003\u6f02\u0003\u6f46\u0003\u6f52\u0003\u6f52\u0003", "\u6f95\u0003\u6fa1\u0003\u6fe2\u0003\u6fe3\u0003\u7002\u0003\u87ee\u0003", "\u8802\u0003\u8af4\u0003\ub002\u0003\ub120\u0003\ub172\u0003\ub2fd\u0003", "\ubc02\u0003\ubc6c\u0003\ubc72\u0003\ubc7e\u0003\ubc82\u0003\ubc8a\u0003", "\ubc92\u0003\ubc9b\u0003\ud402\u0003\ud456\u0003\ud458\u0003\ud49e\u0003", "\ud4a0\u0003\ud4a1\u0003\ud4a4\u0003\ud4a4\u0003\ud4a7\u0003\ud4a8\u0003", "\ud4ab\u0003\ud4ae\u0003\ud4b0\u0003\ud4bb\u0003\ud4bd\u0003\ud4bd\u0003", "\ud4bf\u0003\ud4c5\u0003\ud4c7\u0003\ud507\u0003\ud509\u0003\ud50c\u0003", "\ud50f\u0003\ud516\u0003\ud518\u0003\ud51e\u0003\ud520\u0003\ud53b\u0003", "\ud53d\u0003\ud540\u0003\ud542\u0003\ud546\u0003\ud548\u0003\ud548\u0003", "\ud54c\u0003\ud552\u0003\ud554\u0003\ud6a7\u0003\ud6aa\u0003\ud6c2\u0003", "\ud6c4\u0003\ud6dc\u0003\ud6de\u0003\ud6fc\u0003\ud6fe\u0003\ud716\u0003", "\ud718\u0003\ud736\u0003\ud738\u0003\ud750\u0003\ud752\u0003\ud770\u0003", "\ud772\u0003\ud78a\u0003\ud78c\u0003\ud7aa\u0003\ud7ac\u0003\ud7c4\u0003", "\ud7c6\u0003\ud7cd\u0003\ue802\u0003\ue8c6\u0003\ue902\u0003\ue945\u0003", "\uee02\u0003\uee05\u0003\uee07\u0003\uee21\u0003\uee23\u0003\uee24\u0003", "\uee26\u0003\uee26\u0003\uee29\u0003\uee29\u0003\uee2b\u0003\uee34\u0003", "\uee36\u0003\uee39\u0003\uee3b\u0003\uee3b\u0003\uee3d\u0003\uee3d\u0003", "\uee44\u0003\uee44\u0003\uee49\u0003\uee49\u0003\uee4b\u0003\uee4b\u0003", "\uee4d\u0003\uee4d\u0003\uee4f\u0003\uee51\u0003\uee53\u0003\uee54\u0003", "\uee56\u0003\uee56\u0003\uee59\u0003\uee59\u0003\uee5b\u0003\uee5b\u0003", "\uee5d\u0003\uee5d\u0003\uee5f\u0003\uee5f\u0003\uee61\u0003\uee61\u0003", "\uee63\u0003\uee64\u0003\uee66\u0003\uee66\u0003\uee69\u0003\uee6c\u0003", "\uee6e\u0003\uee74\u0003\uee76\u0003\uee79\u0003\uee7b\u0003\uee7e\u0003", "\uee80\u0003\uee80\u0003\uee82\u0003\uee8b\u0003\uee8d\u0003\uee9d\u0003", "\ueea3\u0003\ueea5\u0003\ueea7\u0003\ueeab\u0003\ueead\u0003\ueebd\u0003", "\u0002\u0004\ua6d8\u0004\ua702\u0004\ub736\u0004\ub742\u0004\ub81f\u0004", "\ub822\u0004\ucea3\u0004\uceb2\u0004\uebe2\u0004\uf802\u0004\ufa1f\u0004", "\u041e\u0002\u0003\u0003\u0002\u0002\u0002\u0002\u0005\u0003\u0002\u0002", "\u0002\u0002\u0007\u0003\u0002\u0002\u0002\u0002\t\u0003\u0002\u0002", "\u0002\u0002\u000b\u0003\u0002\u0002\u0002\u0002\r\u0003\u0002\u0002", "\u0002\u0002\u000f\u0003\u0002\u0002\u0002\u0002\u0011\u0003\u0002\u0002", "\u0002\u0002\u0013\u0003\u0002\u0002\u0002\u0002\u0015\u0003\u0002\u0002", "\u0002\u0002\u0017\u0003\u0002\u0002\u0002\u0002\u0019\u0003\u0002\u0002", "\u0002\u0002\u001b\u0003\u0002\u0002\u0002\u0002\u001d\u0003\u0002\u0002", "\u0002\u0002\u001f\u0003\u0002\u0002\u0002\u0002!\u0003\u0002\u0002", "\u0002\u0002#\u0003\u0002\u0002\u0002\u0002%\u0003\u0002\u0002\u0002", "\u0002\'\u0003\u0002\u0002\u0002\u0002)\u0003\u0002\u0002\u0002\u0002", "+\u0003\u0002\u0002\u0002\u0002-\u0003\u0002\u0002\u0002\u0002/\u0003", "\u0002\u0002\u0002\u00021\u0003\u0002\u0002\u0002\u00023\u0003\u0002", "\u0002\u0002\u00025\u0003\u0002\u0002\u0002\u00027\u0003\u0002\u0002", "\u0002\u00029\u0003\u0002\u0002\u0002\u0002;\u0003\u0002\u0002\u0002", "\u0002=\u0003\u0002\u0002\u0002\u0002?\u0003\u0002\u0002\u0002\u0002", "A\u0003\u0002\u0002\u0002\u0002C\u0003\u0002\u0002\u0002\u0002E\u0003", "\u0002\u0002\u0002\u0002G\u0003\u0002\u0002\u0002\u0002I\u0003\u0002", "\u0002\u0002\u0002K\u0003\u0002\u0002\u0002\u0002M\u0003\u0002\u0002", "\u0002\u0002O\u0003\u0002\u0002\u0002\u0002Q\u0003\u0002\u0002\u0002", "\u0002S\u0003\u0002\u0002\u0002\u0002U\u0003\u0002\u0002\u0002\u0002", "W\u0003\u0002\u0002\u0002\u0002Y\u0003\u0002\u0002\u0002\u0002[\u0003", "\u0002\u0002\u0002\u0002]\u0003\u0002\u0002\u0002\u0002_\u0003\u0002", "\u0002\u0002\u0002a\u0003\u0002\u0002\u0002\u0002c\u0003\u0002\u0002", "\u0002\u0002e\u0003\u0002\u0002\u0002\u0002g\u0003\u0002\u0002\u0002", "\u0002i\u0003\u0002\u0002\u0002\u0002k\u0003\u0002\u0002\u0002\u0002", "m\u0003\u0002\u0002\u0002\u0002o\u0003\u0002\u0002\u0002\u0002q\u0003", "\u0002\u0002\u0002\u0002s\u0003\u0002\u0002\u0002\u0002u\u0003\u0002", "\u0002\u0002\u0002w\u0003\u0002\u0002\u0002\u0002y\u0003\u0002\u0002", "\u0002\u0002{\u0003\u0002\u0002\u0002\u0002}\u0003\u0002\u0002\u0002", "\u0002\u007f\u0003\u0002\u0002\u0002\u0002\u0081\u0003\u0002\u0002\u0002", "\u0002\u0083\u0003\u0002\u0002\u0002\u0002\u0085\u0003\u0002\u0002\u0002", "\u0002\u0087\u0003\u0002\u0002\u0002\u0002\u0089\u0003\u0002\u0002\u0002", "\u0002\u008b\u0003\u0002\u0002\u0002\u0002\u008d\u0003\u0002\u0002\u0002", "\u0002\u008f\u0003\u0002\u0002\u0002\u0002\u0091\u0003\u0002\u0002\u0002", "\u0002\u0093\u0003\u0002\u0002\u0002\u0002\u0095\u0003\u0002\u0002\u0002", "\u0002\u0097\u0003\u0002\u0002\u0002\u0002\u0099\u0003\u0002\u0002\u0002", "\u0002\u009b\u0003\u0002\u0002\u0002\u0002\u009d\u0003\u0002\u0002\u0002", "\u0002\u009f\u0003\u0002\u0002\u0002\u0002\u00a1\u0003\u0002\u0002\u0002", "\u0002\u00a3\u0003\u0002\u0002\u0002\u0002\u00a5\u0003\u0002\u0002\u0002", "\u0002\u00a7\u0003\u0002\u0002\u0002\u0002\u00a9\u0003\u0002\u0002\u0002", "\u0002\u00ab\u0003\u0002\u0002\u0002\u0002\u00ad\u0003\u0002\u0002\u0002", "\u0002\u00af\u0003\u0002\u0002\u0002\u0002\u00b1\u0003\u0002\u0002\u0002", "\u0002\u00b3\u0003\u0002\u0002\u0002\u0002\u00b5\u0003\u0002\u0002\u0002", "\u0002\u00b7\u0003\u0002\u0002\u0002\u0002\u00b9\u0003\u0002\u0002\u0002", "\u0002\u00bb\u0003\u0002\u0002\u0002\u0002\u00bd\u0003\u0002\u0002\u0002", "\u0002\u00bf\u0003\u0002\u0002\u0002\u0002\u00c1\u0003\u0002\u0002\u0002", "\u0002\u00c3\u0003\u0002\u0002\u0002\u0002\u00c5\u0003\u0002\u0002\u0002", "\u0002\u00c7\u0003\u0002\u0002\u0002\u0002\u00c9\u0003\u0002\u0002\u0002", "\u0002\u00cb\u0003\u0002\u0002\u0002\u0002\u00cd\u0003\u0002\u0002\u0002", "\u0002\u00cf\u0003\u0002\u0002\u0002\u0002\u00d1\u0003\u0002\u0002\u0002", "\u0002\u00d3\u0003\u0002\u0002\u0002\u0002\u00d5\u0003\u0002\u0002\u0002", "\u0002\u00d7\u0003\u0002\u0002\u0002\u0002\u00d9\u0003\u0002\u0002\u0002", "\u0002\u00db\u0003\u0002\u0002\u0002\u0002\u00dd\u0003\u0002\u0002\u0002", "\u0002\u00df\u0003\u0002\u0002\u0002\u0002\u00e1\u0003\u0002\u0002\u0002", "\u0002\u00e3\u0003\u0002\u0002\u0002\u0002\u00e5\u0003\u0002\u0002\u0002", "\u0002\u00e7\u0003\u0002\u0002\u0002\u0002\u00e9\u0003\u0002\u0002\u0002", "\u0002\u00eb\u0003\u0002\u0002\u0002\u0002\u00ed\u0003\u0002\u0002\u0002", "\u0002\u00ef\u0003\u0002\u0002\u0002\u0002\u00f1\u0003\u0002\u0002\u0002", "\u0002\u00f3\u0003\u0002\u0002\u0002\u0002\u00f5\u0003\u0002\u0002\u0002", "\u0002\u00f7\u0003\u0002\u0002\u0002\u0002\u00f9\u0003\u0002\u0002\u0002", "\u0002\u00fb\u0003\u0002\u0002\u0002\u0002\u00fd\u0003\u0002\u0002\u0002", "\u0002\u00ff\u0003\u0002\u0002\u0002\u0002\u0101\u0003\u0002\u0002\u0002", "\u0002\u0103\u0003\u0002\u0002\u0002\u0003\u012d\u0003\u0002\u0002\u0002", "\u0005\u012f\u0003\u0002\u0002\u0002\u0007\u0131\u0003\u0002\u0002\u0002", "\t\u0133\u0003\u0002\u0002\u0002\u000b\u0136\u0003\u0002\u0002\u0002", "\r\u0138\u0003\u0002\u0002\u0002\u000f\u013a\u0003\u0002\u0002\u0002", "\u0011\u013c\u0003\u0002\u0002\u0002\u0013\u013e\u0003\u0002\u0002\u0002", "\u0015\u0140\u0003\u0002\u0002\u0002\u0017\u0142\u0003\u0002\u0002\u0002", "\u0019\u0144\u0003\u0002\u0002\u0002\u001b\u0147\u0003\u0002\u0002\u0002", "\u001d\u0149\u0003\u0002\u0002\u0002\u001f\u014b\u0003\u0002\u0002\u0002", "!\u014d\u0003\u0002\u0002\u0002#\u014f\u0003\u0002\u0002\u0002%\u0151", "\u0003\u0002\u0002\u0002\'\u0154\u0003\u0002\u0002\u0002)\u0156\u0003", "\u0002\u0002\u0002+\u0158\u0003\u0002\u0002\u0002-\u015b\u0003\u0002", "\u0002\u0002/\u015e\u0003\u0002\u0002\u00021\u0160\u0003\u0002\u0002", "\u00023\u0162\u0003\u0002\u0002\u00025\u0164\u0003\u0002\u0002\u0002", "7\u0166\u0003\u0002\u0002\u00029\u0168\u0003\u0002\u0002\u0002;\u016a", "\u0003\u0002\u0002\u0002=\u016c\u0003\u0002\u0002\u0002?\u016e\u0003", "\u0002\u0002\u0002A\u0170\u0003\u0002\u0002\u0002C\u0172\u0003\u0002", "\u0002\u0002E\u0174\u0003\u0002\u0002\u0002G\u0176\u0003\u0002\u0002", "\u0002I\u0178\u0003\u0002\u0002\u0002K\u017a\u0003\u0002\u0002\u0002", "M\u017c\u0003\u0002\u0002\u0002O\u017e\u0003\u0002\u0002\u0002Q\u0180", "\u0003\u0002\u0002\u0002S\u0182\u0003\u0002\u0002\u0002U\u0184\u0003", "\u0002\u0002\u0002W\u0186\u0003\u0002\u0002\u0002Y\u0188\u0003\u0002", "\u0002\u0002[\u018a\u0003\u0002\u0002\u0002]\u018c\u0003\u0002\u0002", "\u0002_\u0192\u0003\u0002\u0002\u0002a\u0196\u0003\u0002\u0002\u0002", "c\u019f\u0003\u0002\u0002\u0002e\u01a5\u0003\u0002\u0002\u0002g\u01ac", "\u0003\u0002\u0002\u0002i\u01af\u0003\u0002\u0002\u0002k\u01b5\u0003", "\u0002\u0002\u0002m\u01b8\u0003\u0002\u0002\u0002o\u01bf\u0003\u0002", "\u0002\u0002q\u01c3\u0003\u0002\u0002\u0002s\u01ca\u0003\u0002\u0002", "\u0002u\u01d1\u0003\u0002\u0002\u0002w\u01d8\u0003\u0002\u0002\u0002", "y\u01dd\u0003\u0002\u0002\u0002{\u01e3\u0003\u0002\u0002\u0002}\u01e8", "\u0003\u0002\u0002\u0002\u007f\u01ef\u0003\u0002\u0002\u0002\u0081\u01f8", "\u0003\u0002\u0002\u0002\u0083\u01fe\u0003\u0002\u0002\u0002\u0085\u0201", "\u0003\u0002\u0002\u0002\u0087\u0206\u0003\u0002\u0002\u0002\u0089\u020c", "\u0003\u0002\u0002\u0002\u008b\u0216\u0003\u0002\u0002\u0002\u008d\u021a", "\u0003\u0002\u0002\u0002\u008f\u0225\u0003\u0002\u0002\u0002\u0091\u022a", "\u0003\u0002\u0002\u0002\u0093\u0230\u0003\u0002\u0002\u0002\u0095\u0233", "\u0003\u0002\u0002\u0002\u0097\u0237\u0003\u0002\u0002\u0002\u0099\u023b", "\u0003\u0002\u0002\u0002\u009b\u023f\u0003\u0002\u0002\u0002\u009d\u0242", "\u0003\u0002\u0002\u0002\u009f\u0249\u0003\u0002\u0002\u0002\u00a1\u024e", "\u0003\u0002\u0002\u0002\u00a3\u0257\u0003\u0002\u0002\u0002\u00a5\u025a", "\u0003\u0002\u0002\u0002\u00a7\u025f\u0003\u0002\u0002\u0002\u00a9\u026c", "\u0003\u0002\u0002\u0002\u00ab\u027d\u0003\u0002\u0002\u0002\u00ad\u0283", "\u0003\u0002\u0002\u0002\u00af\u0287\u0003\u0002\u0002\u0002\u00b1\u028c", "\u0003\u0002\u0002\u0002\u00b3\u0293\u0003\u0002\u0002\u0002\u00b5\u0298", "\u0003\u0002\u0002\u0002\u00b7\u029e\u0003\u0002\u0002\u0002\u00b9\u02a5", "\u0003\u0002\u0002\u0002\u00bb\u02aa\u0003\u0002\u0002\u0002\u00bd\u02af", "\u0003\u0002\u0002\u0002\u00bf\u02b3\u0003\u0002\u0002\u0002\u00c1\u02b8", "\u0003\u0002\u0002\u0002\u00c3\u02cf\u0003\u0002\u0002\u0002\u00c5\u02d1", "\u0003\u0002\u0002\u0002\u00c7\u02e5\u0003\u0002\u0002\u0002\u00c9\u02f5", "\u0003\u0002\u0002\u0002\u00cb\u02f7\u0003\u0002\u0002\u0002\u00cd\u02fe", "\u0003\u0002\u0002\u0002\u00cf\u0302\u0003\u0002\u0002\u0002\u00d1\u0306", "\u0003\u0002\u0002\u0002\u00d3\u030a\u0003\u0002\u0002\u0002\u00d5\u030c", "\u0003\u0002\u0002\u0002\u00d7\u0310\u0003\u0002\u0002\u0002\u00d9\u0312", "\u0003\u0002\u0002\u0002\u00db\u032a\u0003\u0002\u0002\u0002\u00dd\u0338", "\u0003\u0002\u0002\u0002\u00df\u0341\u0003\u0002\u0002\u0002\u00e1\u034c", "\u0003\u0002\u0002\u0002\u00e3\u034f\u0003\u0002\u0002\u0002\u00e5\u0353", "\u0003\u0002\u0002\u0002\u00e7\u035b\u0003\u0002\u0002\u0002\u00e9\u0362", "\u0003\u0002\u0002\u0002\u00eb\u036c\u0003\u0002\u0002\u0002\u00ed\u0373", "\u0003\u0002\u0002\u0002\u00ef\u0376\u0003\u0002\u0002\u0002\u00f1\u037a", "\u0003\u0002\u0002\u0002\u00f3\u037f\u0003\u0002\u0002\u0002\u00f5\u0386", "\u0003\u0002\u0002\u0002\u00f7\u038e\u0003\u0002\u0002\u0002\u00f9\u0397", "\u0003\u0002\u0002\u0002\u00fb\u039b\u0003\u0002\u0002\u0002\u00fd\u03a5", "\u0003\u0002\u0002\u0002\u00ff\u03aa\u0003\u0002\u0002\u0002\u0101\u03ba", "\u0003\u0002\u0002\u0002\u0103\u03d9\u0003\u0002\u0002\u0002\u0105\u03db", "\u0003\u0002\u0002\u0002\u0107\u03dd\u0003\u0002\u0002\u0002\u0109\u03df", "\u0003\u0002\u0002\u0002\u010b\u03e1\u0003\u0002\u0002\u0002\u010d\u03e3", "\u0003\u0002\u0002\u0002\u010f\u03e5\u0003\u0002\u0002\u0002\u0111\u03e7", "\u0003\u0002\u0002\u0002\u0113\u03e9\u0003\u0002\u0002\u0002\u0115\u03eb", "\u0003\u0002\u0002\u0002\u0117\u03ed\u0003\u0002\u0002\u0002\u0119\u03ef", "\u0003\u0002\u0002\u0002\u011b\u03f1\u0003\u0002\u0002\u0002\u011d\u03f3", "\u0003\u0002\u0002\u0002\u011f\u03f5\u0003\u0002\u0002\u0002\u0121\u03f7", "\u0003\u0002\u0002\u0002\u0123\u03f9\u0003\u0002\u0002\u0002\u0125\u03fb", "\u0003\u0002\u0002\u0002\u0127\u03fd\u0003\u0002\u0002\u0002\u0129\u03ff", "\u0003\u0002\u0002\u0002\u012b\u0401\u0003\u0002\u0002\u0002\u012d\u012e", "\u0007=\u0002\u0002\u012e\u0004\u0003\u0002\u0002\u0002\u012f\u0130", "\u0007.\u0002\u0002\u0130\u0006\u0003\u0002\u0002\u0002\u0131\u0132", "\u0007?\u0002\u0002\u0132\b\u0003\u0002\u0002\u0002\u0133\u0134\u0007", "-\u0002\u0002\u0134\u0135\u0007?\u0002\u0002\u0135\n\u0003\u0002\u0002", "\u0002\u0136\u0137\u0007,\u0002\u0002\u0137\f\u0003\u0002\u0002\u0002", "\u0138\u0139\u0007*\u0002\u0002\u0139\u000e\u0003\u0002\u0002\u0002", "\u013a\u013b\u0007+\u0002\u0002\u013b\u0010\u0003\u0002\u0002\u0002", "\u013c\u013d\u0007]\u0002\u0002\u013d\u0012\u0003\u0002\u0002\u0002", "\u013e\u013f\u0007_\u0002\u0002\u013f\u0014\u0003\u0002\u0002\u0002", "\u0140\u0141\u0007<\u0002\u0002\u0141\u0016\u0003\u0002\u0002\u0002", "\u0142\u0143\u0007~\u0002\u0002\u0143\u0018\u0003\u0002\u0002\u0002", "\u0144\u0145\u00070\u0002\u0002\u0145\u0146\u00070\u0002\u0002\u0146", "\u001a\u0003\u0002\u0002\u0002\u0147\u0148\u0007-\u0002\u0002\u0148", "\u001c\u0003\u0002\u0002\u0002\u0149\u014a\u0007/\u0002\u0002\u014a", "\u001e\u0003\u0002\u0002\u0002\u014b\u014c\u00071\u0002\u0002\u014c", " \u0003\u0002\u0002\u0002\u014d\u014e\u0007\'\u0002\u0002\u014e\"\u0003", "\u0002\u0002\u0002\u014f\u0150\u0007`\u0002\u0002\u0150$\u0003\u0002", "\u0002\u0002\u0151\u0152\u0007>\u0002\u0002\u0152\u0153\u0007@\u0002", "\u0002\u0153&\u0003\u0002\u0002\u0002\u0154\u0155\u0007>\u0002\u0002", "\u0155(\u0003\u0002\u0002\u0002\u0156\u0157\u0007@\u0002\u0002\u0157", "*\u0003\u0002\u0002\u0002\u0158\u0159\u0007>\u0002\u0002\u0159\u015a", "\u0007?\u0002\u0002\u015a,\u0003\u0002\u0002\u0002\u015b\u015c\u0007", "@\u0002\u0002\u015c\u015d\u0007?\u0002\u0002\u015d.\u0003\u0002\u0002", "\u0002\u015e\u015f\u00070\u0002\u0002\u015f0\u0003\u0002\u0002\u0002", "\u0160\u0161\u0007}\u0002\u0002\u01612\u0003\u0002\u0002\u0002\u0162", "\u0163\u0007\u007f\u0002\u0002\u01634\u0003\u0002\u0002\u0002\u0164", "\u0165\u0007&\u0002\u0002\u01656\u0003\u0002\u0002\u0002\u0166\u0167", "\u0007\u27ea\u0002\u0002\u01678\u0003\u0002\u0002\u0002\u0168\u0169", "\u0007\u300a\u0002\u0002\u0169:\u0003\u0002\u0002\u0002\u016a\u016b", "\u0007\ufe66\u0002\u0002\u016b<\u0003\u0002\u0002\u0002\u016c\u016d", "\u0007\uff1e\u0002\u0002\u016d>\u0003\u0002\u0002\u0002\u016e\u016f", "\u0007\u27eb\u0002\u0002\u016f@\u0003\u0002\u0002\u0002\u0170\u0171", "\u0007\u300b\u0002\u0002\u0171B\u0003\u0002\u0002\u0002\u0172\u0173", "\u0007\ufe67\u0002\u0002\u0173D\u0003\u0002\u0002\u0002\u0174\u0175", "\u0007\uff20\u0002\u0002\u0175F\u0003\u0002\u0002\u0002\u0176\u0177", "\u0007\u00af\u0002\u0002\u0177H\u0003\u0002\u0002\u0002\u0178\u0179", "\u0007\u2012\u0002\u0002\u0179J\u0003\u0002\u0002\u0002\u017a\u017b", "\u0007\u2013\u0002\u0002\u017bL\u0003\u0002\u0002\u0002\u017c\u017d", "\u0007\u2014\u0002\u0002\u017dN\u0003\u0002\u0002\u0002\u017e\u017f", "\u0007\u2015\u0002\u0002\u017fP\u0003\u0002\u0002\u0002\u0180\u0181", "\u0007\u2016\u0002\u0002\u0181R\u0003\u0002\u0002\u0002\u0182\u0183", "\u0007\u2017\u0002\u0002\u0183T\u0003\u0002\u0002\u0002\u0184\u0185", "\u0007\u2214\u0002\u0002\u0185V\u0003\u0002\u0002\u0002\u0186\u0187", "\u0007\ufe5a\u0002\u0002\u0187X\u0003\u0002\u0002\u0002\u0188\u0189", "\u0007\ufe65\u0002\u0002\u0189Z\u0003\u0002\u0002\u0002\u018a\u018b", "\u0007\uff0f\u0002\u0002\u018b\\\u0003\u0002\u0002\u0002\u018c\u018d", "\t\u0002\u0002\u0002\u018d\u018e\t\u0003\u0002\u0002\u018e\u018f\t\u0004", "\u0002\u0002\u018f\u0190\t\u0005\u0002\u0002\u0190\u0191\t\u0003\u0002", "\u0002\u0191^\u0003\u0002\u0002\u0002\u0192\u0193\t\u0006\u0002\u0002", "\u0193\u0194\t\u0007\u0002\u0002\u0194\u0195\t\u0007\u0002\u0002\u0195", "`\u0003\u0002\u0002\u0002\u0196\u0197\t\u0005\u0002\u0002\u0197\u0198", "\t\b\u0002\u0002\u0198\u0199\t\t\u0002\u0002\u0199\u019a\t\u0004\u0002", "\u0002\u019a\u019b\t\u0005\u0002\u0002\u019b\u019c\t\u0003\u0002\u0002", "\u019c\u019d\t\u0006\u0002\u0002\u019d\u019e\t\u0007\u0002\u0002\u019e", "b\u0003\u0002\u0002\u0002\u019f\u01a0\t\n\u0002\u0002\u01a0\u01a1\t", "\u0006\u0002\u0002\u01a1\u01a2\t\t\u0002\u0002\u01a2\u01a3\t\u000b\u0002", "\u0002\u01a3\u01a4\t\f\u0002\u0002\u01a4d\u0003\u0002\u0002\u0002\u01a5", "\u01a6\t\u0002\u0002\u0002\u01a6\u01a7\t\u0003\u0002\u0002\u01a7\u01a8", "\t\r\u0002\u0002\u01a8\u01a9\t\u0004\u0002\u0002\u01a9\u01aa\t\u0003", "\u0002\u0002\u01aa\u01ab\t\u000e\u0002\u0002\u01abf\u0003\u0002\u0002", "\u0002\u01ac\u01ad\t\u0006\u0002\u0002\u01ad\u01ae\t\u000f\u0002\u0002", "\u01aeh\u0003\u0002\u0002\u0002\u01af\u01b0\t\n\u0002\u0002\u01b0\u01b1", "\t\u0010\u0002\u0002\u01b1\u01b2\t\u0011\u0002\u0002\u01b2\u01b3\t\u0012", "\u0002\u0002\u01b3\u01b4\t\u0010\u0002\u0002\u01b4j\u0003\u0002\u0002", "\u0002\u01b5\u01b6\t\u0005\u0002\u0002\u01b6\u01b7\t\u0003\u0002\u0002", "\u01b7l\u0003\u0002\u0002\u0002\u01b8\u01b9\t\u000b\u0002\u0002\u01b9", "\u01ba\t\u0011\u0002\u0002\u01ba\u01bb\t\u0010\u0002\u0002\u01bb\u01bc", "\t\u0006\u0002\u0002\u01bc\u01bd\t\t\u0002\u0002\u01bd\u01be\t\u0010", "\u0002\u0002\u01ben\u0003\u0002\u0002\u0002\u01bf\u01c0\t\u000f\u0002", "\u0002\u01c0\u01c1\t\u0010\u0002\u0002\u01c1\u01c2\t\t\u0002\u0002\u01c2", "p\u0003\u0002\u0002\u0002\u01c3\u01c4\t\u000e\u0002\u0002\u01c4\u01c5", "\t\u0010\u0002\u0002\u01c5\u01c6\t\t\u0002\u0002\u01c6\u01c7\t\u0006", "\u0002\u0002\u01c7\u01c8\t\u000b\u0002\u0002\u01c8\u01c9\t\f\u0002\u0002", "\u01c9r\u0003\u0002\u0002\u0002\u01ca\u01cb\t\u000e\u0002\u0002\u01cb", "\u01cc\t\u0010\u0002\u0002\u01cc\u01cd\t\u0007\u0002\u0002\u01cd\u01ce", "\t\u0010\u0002\u0002\u01ce\u01cf\t\t\u0002\u0002\u01cf\u01d0\t\u0010", "\u0002\u0002\u01d0t\u0003\u0002\u0002\u0002\u01d1\u01d2\t\u0011\u0002", "\u0002\u01d2\u01d3\t\u0010\u0002\u0002\u01d3\u01d4\t\n\u0002\u0002\u01d4", "\u01d5\t\u0005\u0002\u0002\u01d5\u01d6\t\u0013\u0002\u0002\u01d6\u01d7", "\t\u0010\u0002\u0002\u01d7v\u0003\u0002\u0002\u0002\u01d8\u01d9\t\u000b", "\u0002\u0002\u01d9\u01da\t\u0006\u0002\u0002\u01da\u01db\t\u0007\u0002", "\u0002\u01db\u01dc\t\u0007\u0002\u0002\u01dcx\u0003\u0002\u0002\u0002", "\u01dd\u01de\t\u0014\u0002\u0002\u01de\u01df\t\u0004\u0002\u0002\u01df", "\u01e0\t\u0010\u0002\u0002\u01e0\u01e1\t\u0007\u0002\u0002\u01e1\u01e2", "\t\u000e\u0002\u0002\u01e2z\u0003\u0002\u0002\u0002\u01e3\u01e4\t\r", "\u0002\u0002\u01e4\u01e5\t\u0004\u0002\u0002\u01e5\u01e6\t\t\u0002\u0002", "\u01e6\u01e7\t\f\u0002\u0002\u01e7|\u0003\u0002\u0002\u0002\u01e8\u01e9", "\t\u0011\u0002\u0002\u01e9\u01ea\t\u0010\u0002\u0002\u01ea\u01eb\t\t", "\u0002\u0002\u01eb\u01ec\t\u0002\u0002\u0002\u01ec\u01ed\t\u0011\u0002", "\u0002\u01ed\u01ee\t\u0003\u0002\u0002\u01ee~\u0003\u0002\u0002\u0002", "\u01ef\u01f0\t\u000e\u0002\u0002\u01f0\u01f1\t\u0004\u0002\u0002\u01f1", "\u01f2\t\u000f\u0002\u0002\u01f2\u01f3\t\t\u0002\u0002\u01f3\u01f4\t", "\u0004\u0002\u0002\u01f4\u01f5\t\u0003\u0002\u0002\u01f5\u01f6\t\u000b", "\u0002\u0002\u01f6\u01f7\t\t\u0002\u0002\u01f7\u0080\u0003\u0002\u0002", "\u0002\u01f8\u01f9\t\u0005\u0002\u0002\u01f9\u01fa\t\u0011\u0002\u0002", "\u01fa\u01fb\t\u000e\u0002\u0002\u01fb\u01fc\t\u0010\u0002\u0002\u01fc", "\u01fd\t\u0011\u0002\u0002\u01fd\u0082\u0003\u0002\u0002\u0002\u01fe", "\u01ff\t\u0015\u0002\u0002\u01ff\u0200\t\u0014\u0002\u0002\u0200\u0084", "\u0003\u0002\u0002\u0002\u0201\u0202\t\u000f\u0002\u0002\u0202\u0203", "\t\u0016\u0002\u0002\u0203\u0204\t\u0004\u0002\u0002\u0204\u0205\t\b", "\u0002\u0002\u0205\u0086\u0003\u0002\u0002\u0002\u0206\u0207\t\u0007", "\u0002\u0002\u0207\u0208\t\u0004\u0002\u0002\u0208\u0209\t\n\u0002\u0002", "\u0209\u020a\t\u0004\u0002\u0002\u020a\u020b\t\t\u0002\u0002\u020b\u0088", "\u0003\u0002\u0002\u0002\u020c\u020d\t\u0006\u0002\u0002\u020d\u020e", "\t\u000f\u0002\u0002\u020e\u020f\t\u000b\u0002\u0002\u020f\u0210\t\u0010", "\u0002\u0002\u0210\u0211\t\u0003\u0002\u0002\u0211\u0212\t\u000e\u0002", "\u0002\u0212\u0213\t\u0004\u0002\u0002\u0213\u0214\t\u0003\u0002\u0002", "\u0214\u0215\t\u0012\u0002\u0002\u0215\u008a\u0003\u0002\u0002\u0002", "\u0216\u0217\t\u0006\u0002\u0002\u0217\u0218\t\u000f\u0002\u0002\u0218", "\u0219\t\u000b\u0002\u0002\u0219\u008c\u0003\u0002\u0002\u0002\u021a", "\u021b\t\u000e\u0002\u0002\u021b\u021c\t\u0010\u0002\u0002\u021c\u021d", "\t\u000f\u0002\u0002\u021d\u021e\t\u000b\u0002\u0002\u021e\u021f\t\u0010", "\u0002\u0002\u021f\u0220\t\u0003\u0002\u0002\u0220\u0221\t\u000e\u0002", "\u0002\u0221\u0222\t\u0004\u0002\u0002\u0222\u0223\t\u0003\u0002\u0002", "\u0223\u0224\t\u0012\u0002\u0002\u0224\u008e\u0003\u0002\u0002\u0002", "\u0225\u0226\t\u000e\u0002\u0002\u0226\u0227\t\u0010\u0002\u0002\u0227", "\u0228\t\u000f\u0002\u0002\u0228\u0229\t\u000b\u0002\u0002\u0229\u0090", "\u0003\u0002\u0002\u0002\u022a\u022b\t\r\u0002\u0002\u022b\u022c\t\f", "\u0002\u0002\u022c\u022d\t\u0010\u0002\u0002\u022d\u022e\t\u0011\u0002", "\u0002\u022e\u022f\t\u0010\u0002\u0002\u022f\u0092\u0003\u0002\u0002", "\u0002\u0230\u0231\t\u0005\u0002\u0002\u0231\u0232\t\u0011\u0002\u0002", "\u0232\u0094\u0003\u0002\u0002\u0002\u0233\u0234\t\u0017\u0002\u0002", "\u0234\u0235\t\u0005\u0002\u0002\u0235\u0236\t\u0011\u0002\u0002\u0236", "\u0096\u0003\u0002\u0002\u0002\u0237\u0238\t\u0006\u0002\u0002\u0238", "\u0239\t\u0003\u0002\u0002\u0239\u023a\t\u000e\u0002\u0002\u023a\u0098", "\u0003\u0002\u0002\u0002\u023b\u023c\t\u0003\u0002\u0002\u023c\u023d", "\t\u0005\u0002\u0002\u023d\u023e\t\t\u0002\u0002\u023e\u009a\u0003\u0002", "\u0002\u0002\u023f\u0240\t\u0004\u0002\u0002\u0240\u0241\t\u0003\u0002", "\u0002\u0241\u009c\u0003\u0002\u0002\u0002\u0242\u0243\t\u000f\u0002", "\u0002\u0243\u0244\t\t\u0002\u0002\u0244\u0245\t\u0006\u0002\u0002\u0245", "\u0246\t\u0011\u0002\u0002\u0246\u0247\t\t\u0002\u0002\u0247\u0248\t", "\u000f\u0002\u0002\u0248\u009e\u0003\u0002\u0002\u0002\u0249\u024a\t", "\u0010\u0002\u0002\u024a\u024b\t\u0003\u0002\u0002\u024b\u024c\t\u000e", "\u0002\u0002\u024c\u024d\t\u000f\u0002\u0002\u024d\u00a0\u0003\u0002", "\u0002\u0002\u024e\u024f\t\u000b\u0002\u0002\u024f\u0250\t\u0005\u0002", "\u0002\u0250\u0251\t\u0003\u0002\u0002\u0251\u0252\t\t\u0002\u0002\u0252", "\u0253\t\u0006\u0002\u0002\u0253\u0254\t\u0004\u0002\u0002\u0254\u0255", "\t\u0003\u0002\u0002\u0255\u0256\t\u000f\u0002\u0002\u0256\u00a2\u0003", "\u0002\u0002\u0002\u0257\u0258\t\u0004\u0002\u0002\u0258\u0259\t\u000f", "\u0002\u0002\u0259\u00a4\u0003\u0002\u0002\u0002\u025a\u025b\t\u0003", "\u0002\u0002\u025b\u025c\t\u0002\u0002\u0002\u025c\u025d\t\u0007\u0002", "\u0002\u025d\u025e\t\u0007\u0002\u0002\u025e\u00a6\u0003\u0002\u0002", "\u0002\u025f\u0260\t\u000f\u0002\u0002\u0260\u0261\t\f\u0002\u0002\u0261", "\u0262\t\u0005\u0002\u0002\u0262\u0263\t\u0011\u0002\u0002\u0263\u0264", "\t\t\u0002\u0002\u0264\u0265\t\u0010\u0002\u0002\u0265\u0266\t\u000f", "\u0002\u0002\u0266\u0267\t\t\u0002\u0002\u0267\u0268\t\b\u0002\u0002", "\u0268\u0269\t\u0006\u0002\u0002\u0269\u026a\t\t\u0002\u0002\u026a\u026b", "\t\f\u0002\u0002\u026b\u00a8\u0003\u0002\u0002\u0002\u026c\u026d\t\u0006", "\u0002\u0002\u026d\u026e\t\u0007\u0002\u0002\u026e\u026f\t\u0007\u0002", "\u0002\u026f\u0270\t\u000f\u0002\u0002\u0270\u0271\t\f\u0002\u0002\u0271", "\u0272\t\u0005\u0002\u0002\u0272\u0273\t\u0011\u0002\u0002\u0273\u0274", "\t\t\u0002\u0002\u0274\u0275\t\u0010\u0002\u0002\u0275\u0276\t\u000f", "\u0002\u0002\u0276\u0277\t\t\u0002\u0002\u0277\u0278\t\b\u0002\u0002", "\u0278\u0279\t\u0006\u0002\u0002\u0279\u027a\t\t\u0002\u0002\u027a\u027b", "\t\f\u0002\u0002\u027b\u027c\t\u000f\u0002\u0002\u027c\u00aa\u0003\u0002", "\u0002\u0002\u027d\u027e\t\u000b\u0002\u0002\u027e\u027f\t\u0005\u0002", "\u0002\u027f\u0280\t\u0002\u0002\u0002\u0280\u0281\t\u0003\u0002\u0002", "\u0281\u0282\t\t\u0002\u0002\u0282\u00ac\u0003\u0002\u0002\u0002\u0283", "\u0284\t\u0006\u0002\u0002\u0284\u0285\t\u0003\u0002\u0002\u0285\u0286", "\t\u0014\u0002\u0002\u0286\u00ae\u0003\u0002\u0002\u0002\u0287\u0288", "\t\u0003\u0002\u0002\u0288\u0289\t\u0005\u0002\u0002\u0289\u028a\t\u0003", "\u0002\u0002\u028a\u028b\t\u0010\u0002\u0002\u028b\u00b0\u0003\u0002", "\u0002\u0002\u028c\u028d\t\u000f\u0002\u0002\u028d\u028e\t\u0004\u0002", "\u0002\u028e\u028f\t\u0003\u0002\u0002\u028f\u0290\t\u0012\u0002\u0002", "\u0290\u0291\t\u0007\u0002\u0002\u0291\u0292\t\u0010\u0002\u0002\u0292", "\u00b2\u0003\u0002\u0002\u0002\u0293\u0294\t\t\u0002\u0002\u0294\u0295", "\t\u0011\u0002\u0002\u0295\u0296\t\u0002\u0002\u0002\u0296\u0297\t\u0010", "\u0002\u0002\u0297\u00b4\u0003\u0002\u0002\u0002\u0298\u0299\t\u0018", "\u0002\u0002\u0299\u029a\t\u0006\u0002\u0002\u029a\u029b\t\u0007\u0002", "\u0002\u029b\u029c\t\u000f\u0002\u0002\u029c\u029d\t\u0010\u0002\u0002", "\u029d\u00b6\u0003\u0002\u0002\u0002\u029e\u029f\t\u0010\u0002\u0002", "\u029f\u02a0\t\u0017\u0002\u0002\u02a0\u02a1\t\u0004\u0002\u0002\u02a1", "\u02a2\t\u000f\u0002\u0002\u02a2\u02a3\t\t\u0002\u0002\u02a3\u02a4\t", "\u000f\u0002\u0002\u02a4\u00b8\u0003\u0002\u0002\u0002\u02a5\u02a6\t", "\u000b\u0002\u0002\u02a6\u02a7\t\u0006\u0002\u0002\u02a7\u02a8\t\u000f", "\u0002\u0002\u02a8\u02a9\t\u0010\u0002\u0002\u02a9\u00ba\u0003\u0002", "\u0002\u0002\u02aa\u02ab\t\u0010\u0002\u0002\u02ab\u02ac\t\u0007\u0002", "\u0002\u02ac\u02ad\t\u000f\u0002\u0002\u02ad\u02ae\t\u0010\u0002\u0002", "\u02ae\u00bc\u0003\u0002\u0002\u0002\u02af\u02b0\t\u0010\u0002\u0002", "\u02b0\u02b1\t\u0003\u0002\u0002\u02b1\u02b2\t\u000e\u0002\u0002\u02b2", "\u00be\u0003\u0002\u0002\u0002\u02b3\u02b4\t\r\u0002\u0002\u02b4\u02b5", "\t\f\u0002\u0002\u02b5\u02b6\t\u0010\u0002\u0002\u02b6\u02b7\t\u0003", "\u0002\u0002\u02b7\u00c0\u0003\u0002\u0002\u0002\u02b8\u02b9\t\t\u0002", "\u0002\u02b9\u02ba\t\f\u0002\u0002\u02ba\u02bb\t\u0010\u0002\u0002\u02bb", "\u02bc\t\u0003\u0002\u0002\u02bc\u00c2\u0003\u0002\u0002\u0002\u02bd", "\u02c2\u0007$\u0002\u0002\u02be\u02c1\u0005\u0123\u0092\u0002\u02bf", "\u02c1\u0005\u00c5c\u0002\u02c0\u02be\u0003\u0002\u0002\u0002\u02c0", "\u02bf\u0003\u0002\u0002\u0002\u02c1\u02c4\u0003\u0002\u0002\u0002\u02c2", "\u02c0\u0003\u0002\u0002\u0002\u02c2\u02c3\u0003\u0002\u0002\u0002\u02c3", "\u02c5\u0003\u0002\u0002\u0002\u02c4\u02c2\u0003\u0002\u0002\u0002\u02c5", "\u02d0\u0007$\u0002\u0002\u02c6\u02cb\u0007)\u0002\u0002\u02c7\u02ca", "\u0005\u010f\u0088\u0002\u02c8\u02ca\u0005\u00c5c\u0002\u02c9\u02c7", "\u0003\u0002\u0002\u0002\u02c9\u02c8\u0003\u0002\u0002\u0002\u02ca\u02cd", "\u0003\u0002\u0002\u0002\u02cb\u02c9\u0003\u0002\u0002\u0002\u02cb\u02cc", "\u0003\u0002\u0002\u0002\u02cc\u02ce\u0003\u0002\u0002\u0002\u02cd\u02cb", "\u0003\u0002\u0002\u0002\u02ce\u02d0\u0007)\u0002\u0002\u02cf\u02bd", "\u0003\u0002\u0002\u0002\u02cf\u02c6\u0003\u0002\u0002\u0002\u02d0\u00c4", "\u0003\u0002\u0002\u0002\u02d1\u02e3\u0007^\u0002\u0002\u02d2\u02e4", "\t\u0019\u0002\u0002\u02d3\u02d4\t\u0002\u0002\u0002\u02d4\u02d5\u0005", "\u00cfh\u0002\u02d5\u02d6\u0005\u00cfh\u0002\u02d6\u02d7\u0005\u00cf", "h\u0002\u02d7\u02d8\u0005\u00cfh\u0002\u02d8\u02e4\u0003\u0002\u0002", "\u0002\u02d9\u02da\t\u0002\u0002\u0002\u02da\u02db\u0005\u00cfh\u0002", "\u02db\u02dc\u0005\u00cfh\u0002\u02dc\u02dd\u0005\u00cfh\u0002\u02dd", "\u02de\u0005\u00cfh\u0002\u02de\u02df\u0005\u00cfh\u0002\u02df\u02e0", "\u0005\u00cfh\u0002\u02e0\u02e1\u0005\u00cfh\u0002\u02e1\u02e2\u0005", "\u00cfh\u0002\u02e2\u02e4\u0003\u0002\u0002\u0002\u02e3\u02d2\u0003", "\u0002\u0002\u0002\u02e3\u02d3\u0003\u0002\u0002\u0002\u02e3\u02d9\u0003", "\u0002\u0002\u0002\u02e4\u00c6\u0003\u0002\u0002\u0002\u02e5\u02e6\u0007", "2\u0002\u0002\u02e6\u02e7\u0007z\u0002\u0002\u02e7\u02e9\u0003\u0002", "\u0002\u0002\u02e8\u02ea\u0005\u00cfh\u0002\u02e9\u02e8\u0003\u0002", "\u0002\u0002\u02ea\u02eb\u0003\u0002\u0002\u0002\u02eb\u02e9\u0003\u0002", "\u0002\u0002\u02eb\u02ec\u0003\u0002\u0002\u0002\u02ec\u00c8\u0003\u0002", "\u0002\u0002\u02ed\u02f6\u0005\u00d9m\u0002\u02ee\u02f2\u0005\u00d3", "j\u0002\u02ef\u02f1\u0005\u00d1i\u0002\u02f0\u02ef\u0003\u0002\u0002", "\u0002\u02f1\u02f4\u0003\u0002\u0002\u0002\u02f2\u02f0\u0003\u0002\u0002", "\u0002\u02f2\u02f3\u0003\u0002\u0002\u0002\u02f3\u02f6\u0003\u0002\u0002", "\u0002\u02f4\u02f2\u0003\u0002\u0002\u0002\u02f5\u02ed\u0003\u0002\u0002", "\u0002\u02f5\u02ee\u0003\u0002\u0002\u0002\u02f6\u00ca\u0003\u0002\u0002", "\u0002\u02f7\u02f9\u0005\u00d9m\u0002\u02f8\u02fa\u0005\u00d7l\u0002", "\u02f9\u02f8\u0003\u0002\u0002\u0002\u02fa\u02fb\u0003\u0002\u0002\u0002", "\u02fb\u02f9\u0003\u0002\u0002\u0002\u02fb\u02fc\u0003\u0002\u0002\u0002", "\u02fc\u00cc\u0003\u0002\u0002\u0002\u02fd\u02ff\t\u001a\u0002\u0002", "\u02fe\u02fd\u0003\u0002\u0002\u0002\u02ff\u00ce\u0003\u0002\u0002\u0002", "\u0300\u0303\u0005\u00d1i\u0002\u0301\u0303\u0005\u00cdg\u0002\u0302", "\u0300\u0003\u0002\u0002\u0002\u0302\u0301\u0003\u0002\u0002\u0002\u0303", "\u00d0\u0003\u0002\u0002\u0002\u0304\u0307\u0005\u00d9m\u0002\u0305", "\u0307\u0005\u00d3j\u0002\u0306\u0304\u0003\u0002\u0002\u0002\u0306", "\u0305\u0003\u0002\u0002\u0002\u0307\u00d2\u0003\u0002\u0002\u0002\u0308", "\u030b\u0005\u00d5k\u0002\u0309\u030b\u0004:;\u0002\u030a\u0308\u0003", "\u0002\u0002\u0002\u030a\u0309\u0003\u0002\u0002\u0002\u030b\u00d4\u0003", "\u0002\u0002\u0002\u030c\u030d\u000439\u0002\u030d\u00d6\u0003\u0002", "\u0002\u0002\u030e\u0311\u0005\u00d9m\u0002\u030f\u0311\u0005\u00d5", "k\u0002\u0310\u030e\u0003\u0002\u0002\u0002\u0310\u030f\u0003\u0002", "\u0002\u0002\u0311\u00d8\u0003\u0002\u0002\u0002\u0312\u0313\u00072", "\u0002\u0002\u0313\u00da\u0003\u0002\u0002\u0002\u0314\u0316\u0005\u00d1", "i\u0002\u0315\u0314\u0003\u0002\u0002\u0002\u0316\u0317\u0003\u0002", "\u0002\u0002\u0317\u0315\u0003\u0002\u0002\u0002\u0317\u0318\u0003\u0002", "\u0002\u0002\u0318\u032b\u0003\u0002\u0002\u0002\u0319\u031b\u0005\u00d1", "i\u0002\u031a\u0319\u0003\u0002\u0002\u0002\u031b\u031c\u0003\u0002", "\u0002\u0002\u031c\u031a\u0003\u0002\u0002\u0002\u031c\u031d\u0003\u0002", "\u0002\u0002\u031d\u031e\u0003\u0002\u0002\u0002\u031e\u0320\u00070", "\u0002\u0002\u031f\u0321\u0005\u00d1i\u0002\u0320\u031f\u0003\u0002", "\u0002\u0002\u0321\u0322\u0003\u0002\u0002\u0002\u0322\u0320\u0003\u0002", "\u0002\u0002\u0322\u0323\u0003\u0002\u0002\u0002\u0323\u032b\u0003\u0002", "\u0002\u0002\u0324\u0326\u00070\u0002\u0002\u0325\u0327\u0005\u00d1", "i\u0002\u0326\u0325\u0003\u0002\u0002\u0002\u0327\u0328\u0003\u0002", "\u0002\u0002\u0328\u0326\u0003\u0002\u0002\u0002\u0328\u0329\u0003\u0002", "\u0002\u0002\u0329\u032b\u0003\u0002\u0002\u0002\u032a\u0315\u0003\u0002", "\u0002\u0002\u032a\u031a\u0003\u0002\u0002\u0002\u032a\u0324\u0003\u0002", "\u0002\u0002\u032b\u032c\u0003\u0002\u0002\u0002\u032c\u032e\t\u0010", "\u0002\u0002\u032d\u032f\u0007/\u0002\u0002\u032e\u032d\u0003\u0002", "\u0002\u0002\u032e\u032f\u0003\u0002\u0002\u0002\u032f\u0331\u0003\u0002", "\u0002\u0002\u0330\u0332\u0005\u00d1i\u0002\u0331\u0330\u0003\u0002", "\u0002\u0002\u0332\u0333\u0003\u0002\u0002\u0002\u0333\u0331\u0003\u0002", "\u0002\u0002\u0333\u0334\u0003\u0002\u0002\u0002\u0334\u00dc\u0003\u0002", "\u0002\u0002\u0335\u0337\u0005\u00d1i\u0002\u0336\u0335\u0003\u0002", "\u0002\u0002\u0337\u033a\u0003\u0002\u0002\u0002\u0338\u0336\u0003\u0002", "\u0002\u0002\u0338\u0339\u0003\u0002\u0002\u0002\u0339\u033b\u0003\u0002", "\u0002\u0002\u033a\u0338\u0003\u0002\u0002\u0002\u033b\u033d\u00070", "\u0002\u0002\u033c\u033e\u0005\u00d1i\u0002\u033d\u033c\u0003\u0002", "\u0002\u0002\u033e\u033f\u0003\u0002\u0002\u0002\u033f\u033d\u0003\u0002", "\u0002\u0002\u033f\u0340\u0003\u0002\u0002\u0002\u0340\u00de\u0003\u0002", "\u0002\u0002\u0341\u0342\t\u000b\u0002\u0002\u0342\u0343\t\u0005\u0002", "\u0002\u0343\u0344\t\u0003\u0002\u0002\u0344\u0345\t\u000f\u0002\u0002", "\u0345\u0346\t\t\u0002\u0002\u0346\u0347\t\u0011\u0002\u0002\u0347\u0348", "\t\u0006\u0002\u0002\u0348\u0349\t\u0004\u0002\u0002\u0349\u034a\t\u0003", "\u0002\u0002\u034a\u034b\t\t\u0002\u0002\u034b\u00e0\u0003\u0002\u0002", "\u0002\u034c\u034d\t\u000e\u0002\u0002\u034d\u034e\t\u0005\u0002\u0002", "\u034e\u00e2\u0003\u0002\u0002\u0002\u034f\u0350\t\u0018\u0002\u0002", "\u0350\u0351\t\u0005\u0002\u0002\u0351\u0352\t\u0011\u0002\u0002\u0352", "\u00e4\u0003\u0002\u0002\u0002\u0353\u0354\t\u0011\u0002\u0002\u0354", "\u0355\t\u0010\u0002\u0002\u0355\u0356\t\u001b\u0002\u0002\u0356\u0357", "\t\u0002\u0002\u0002\u0357\u0358\t\u0004\u0002\u0002\u0358\u0359\t\u0011", "\u0002\u0002\u0359\u035a\t\u0010\u0002\u0002\u035a\u00e6\u0003\u0002", "\u0002\u0002\u035b\u035c\t\u0002\u0002\u0002\u035c\u035d\t\u0003\u0002", "\u0002\u035d\u035e\t\u0004\u0002\u0002\u035e\u035f\t\u001b\u0002\u0002", "\u035f\u0360\t\u0002\u0002\u0002\u0360\u0361\t\u0010\u0002\u0002\u0361", "\u00e8\u0003\u0002\u0002\u0002\u0362\u0363\t\n\u0002\u0002\u0363\u0364", "\t\u0006\u0002\u0002\u0364\u0365\t\u0003\u0002\u0002\u0365\u0366\t\u000e", "\u0002\u0002\u0366\u0367\t\u0006\u0002\u0002\u0367\u0368\t\t\u0002\u0002", "\u0368\u0369\t\u0005\u0002\u0002\u0369\u036a\t\u0011\u0002\u0002\u036a", "\u036b\t\u0014\u0002\u0002\u036b\u00ea\u0003\u0002\u0002\u0002\u036c", "\u036d\t\u000f\u0002\u0002\u036d\u036e\t\u000b\u0002\u0002\u036e\u036f", "\t\u0006\u0002\u0002\u036f\u0370\t\u0007\u0002\u0002\u0370\u0371\t\u0006", "\u0002\u0002\u0371\u0372\t\u0011\u0002\u0002\u0372\u00ec\u0003\u0002", "\u0002\u0002\u0373\u0374\t\u0005\u0002\u0002\u0374\u0375\t\u0018\u0002", "\u0002\u0375\u00ee\u0003\u0002\u0002\u0002\u0376\u0377\t\u0006\u0002", "\u0002\u0377\u0378\t\u000e\u0002\u0002\u0378\u0379\t\u000e\u0002\u0002", "\u0379\u00f0\u0003\u0002\u0002\u0002\u037a\u037b\t\u000e\u0002\u0002", "\u037b\u037c\t\u0011\u0002\u0002\u037c\u037d\t\u0005\u0002\u0002\u037d", "\u037e\t\b\u0002\u0002\u037e\u00f2\u0003\u0002\u0002\u0002\u037f\u0380", "\t\u0018\u0002\u0002\u0380\u0381\t\u0004\u0002\u0002\u0381\u0382\t\u0007", "\u0002\u0002\u0382\u0383\t\t\u0002\u0002\u0383\u0384\t\u0010\u0002\u0002", "\u0384\u0385\t\u0011\u0002\u0002\u0385\u00f4\u0003\u0002\u0002\u0002", "\u0386\u0387\t\u0010\u0002\u0002\u0387\u0388\t\u0017\u0002\u0002\u0388", "\u0389\t\t\u0002\u0002\u0389\u038a\t\u0011\u0002\u0002\u038a\u038b\t", "\u0006\u0002\u0002\u038b\u038c\t\u000b\u0002\u0002\u038c\u038d\t\t\u0002", "\u0002\u038d\u00f6\u0003\u0002\u0002\u0002\u038e\u0392\u0005\u00f9}", "\u0002\u038f\u0391\u0005\u00fb~\u0002\u0390\u038f\u0003\u0002\u0002", "\u0002\u0391\u0394\u0003\u0002\u0002\u0002\u0392\u0390\u0003\u0002\u0002", "\u0002\u0392\u0393\u0003\u0002\u0002\u0002\u0393\u00f8\u0003\u0002\u0002", "\u0002\u0394\u0392\u0003\u0002\u0002\u0002\u0395\u0398\u0005\u012b\u0096", "\u0002\u0396\u0398\u0005\u011f\u0090\u0002\u0397\u0395\u0003\u0002\u0002", "\u0002\u0397\u0396\u0003\u0002\u0002\u0002\u0398\u00fa\u0003\u0002\u0002", "\u0002\u0399\u039c\u0005\u010b\u0086\u0002\u039a\u039c\u0005\u011b\u008e", "\u0002\u039b\u0399\u0003\u0002\u0002\u0002\u039b\u039a\u0003\u0002\u0002", "\u0002\u039c\u00fc\u0003\u0002\u0002\u0002\u039d\u03a1\u0007b\u0002", "\u0002\u039e\u03a0\u0005\u0107\u0084\u0002\u039f\u039e\u0003\u0002\u0002", "\u0002\u03a0\u03a3\u0003\u0002\u0002\u0002\u03a1\u039f\u0003\u0002\u0002", "\u0002\u03a1\u03a2\u0003\u0002\u0002\u0002\u03a2\u03a4\u0003\u0002\u0002", "\u0002\u03a3\u03a1\u0003\u0002\u0002\u0002\u03a4\u03a6\u0007b\u0002", "\u0002\u03a5\u039d\u0003\u0002\u0002\u0002\u03a6\u03a7\u0003\u0002\u0002", "\u0002\u03a7\u03a5\u0003\u0002\u0002\u0002\u03a7\u03a8\u0003\u0002\u0002", "\u0002\u03a8\u00fe\u0003\u0002\u0002\u0002\u03a9\u03ab\u0005\u0101\u0081", "\u0002\u03aa\u03a9\u0003\u0002\u0002\u0002\u03ab\u03ac\u0003\u0002\u0002", "\u0002\u03ac\u03aa\u0003\u0002\u0002\u0002\u03ac\u03ad\u0003\u0002\u0002", "\u0002\u03ad\u0100\u0003\u0002\u0002\u0002\u03ae\u03bb\u0005\u011d\u008f", "\u0002\u03af\u03bb\u0005\u0121\u0091\u0002\u03b0\u03bb\u0005\u0125\u0093", "\u0002\u03b1\u03bb\u0005\u0127\u0094\u0002\u03b2\u03bb\u0005\u0105\u0083", "\u0002\u03b3\u03bb\u0005\u0119\u008d\u0002\u03b4\u03bb\u0005\u0117\u008c", "\u0002\u03b5\u03bb\u0005\u0115\u008b\u0002\u03b6\u03bb\u0005\u0109\u0085", "\u0002\u03b7\u03bb\u0005\u0129\u0095\u0002\u03b8\u03bb\t\u001c\u0002", "\u0002\u03b9\u03bb\u0005\u0103\u0082\u0002\u03ba\u03ae\u0003\u0002\u0002", "\u0002\u03ba\u03af\u0003\u0002\u0002\u0002\u03ba\u03b0\u0003\u0002\u0002", "\u0002\u03ba\u03b1\u0003\u0002\u0002\u0002\u03ba\u03b2\u0003\u0002\u0002", "\u0002\u03ba\u03b3\u0003\u0002\u0002\u0002\u03ba\u03b4\u0003\u0002\u0002", "\u0002\u03ba\u03b5\u0003\u0002\u0002\u0002\u03ba\u03b6\u0003\u0002\u0002", "\u0002\u03ba\u03b7\u0003\u0002\u0002\u0002\u03ba\u03b8\u0003\u0002\u0002", "\u0002\u03ba\u03b9\u0003\u0002\u0002\u0002\u03bb\u0102\u0003\u0002\u0002", "\u0002\u03bc\u03bd\u00071\u0002\u0002\u03bd\u03be\u0007,\u0002\u0002", "\u03be\u03c4\u0003\u0002\u0002\u0002\u03bf\u03c3\u0005\u010d\u0087\u0002", "\u03c0\u03c1\u0007,\u0002\u0002\u03c1\u03c3\u0005\u0113\u008a\u0002", "\u03c2\u03bf\u0003\u0002\u0002\u0002\u03c2\u03c0\u0003\u0002\u0002\u0002", "\u03c3\u03c6\u0003\u0002\u0002\u0002\u03c4\u03c2\u0003\u0002\u0002\u0002", "\u03c4\u03c5\u0003\u0002\u0002\u0002\u03c5\u03c7\u0003\u0002\u0002\u0002", "\u03c6\u03c4\u0003\u0002\u0002\u0002\u03c7\u03c8\u0007,\u0002\u0002", "\u03c8\u03da\u00071\u0002\u0002\u03c9\u03ca\u00071\u0002\u0002\u03ca", "\u03cb\u00071\u0002\u0002\u03cb\u03cf\u0003\u0002\u0002\u0002\u03cc", "\u03ce\u0005\u0111\u0089\u0002\u03cd\u03cc\u0003\u0002\u0002\u0002\u03ce", "\u03d1\u0003\u0002\u0002\u0002\u03cf\u03cd\u0003\u0002\u0002\u0002\u03cf", "\u03d0\u0003\u0002\u0002\u0002\u03d0\u03d3\u0003\u0002\u0002\u0002\u03d1", "\u03cf\u0003\u0002\u0002\u0002\u03d2\u03d4\u0005\u0119\u008d\u0002\u03d3", "\u03d2\u0003\u0002\u0002\u0002\u03d3\u03d4\u0003\u0002\u0002\u0002\u03d4", "\u03d7\u0003\u0002\u0002\u0002\u03d5\u03d8\u0005\u0125\u0093\u0002\u03d6", "\u03d8\u0007\u0002\u0002\u0003\u03d7\u03d5\u0003\u0002\u0002\u0002\u03d7", "\u03d6\u0003\u0002\u0002\u0002\u03d8\u03da\u0003\u0002\u0002\u0002\u03d9", "\u03bc\u0003\u0002\u0002\u0002\u03d9\u03c9\u0003\u0002\u0002\u0002\u03da", "\u0104\u0003\u0002\u0002\u0002\u03db\u03dc\t\u001d\u0002\u0002\u03dc", "\u0106\u0003\u0002\u0002\u0002\u03dd\u03de\n\u001e\u0002\u0002\u03de", "\u0108\u0003\u0002\u0002\u0002\u03df\u03e0\t\u001f\u0002\u0002\u03e0", "\u010a\u0003\u0002\u0002\u0002\u03e1\u03e2\t/\u0002\u0002\u03e2\u010c", "\u0003\u0002\u0002\u0002\u03e3\u03e4\n \u0002\u0002\u03e4\u010e\u0003", "\u0002\u0002\u0002\u03e5\u03e6\n!\u0002\u0002\u03e6\u0110\u0003\u0002", "\u0002\u0002\u03e7\u03e8\n\"\u0002\u0002\u03e8\u0112\u0003\u0002\u0002", "\u0002\u03e9\u03ea\n#\u0002\u0002\u03ea\u0114\u0003\u0002\u0002\u0002", "\u03eb\u03ec\t$\u0002\u0002\u03ec\u0116\u0003\u0002\u0002\u0002\u03ed", "\u03ee\t%\u0002\u0002\u03ee\u0118\u0003\u0002\u0002\u0002\u03ef\u03f0", "\t&\u0002\u0002\u03f0\u011a\u0003\u0002\u0002\u0002\u03f1\u03f2\t\'", "\u0002\u0002\u03f2\u011c\u0003\u0002\u0002\u0002\u03f3\u03f4\t(\u0002", "\u0002\u03f4\u011e\u0003\u0002\u0002\u0002\u03f5\u03f6\t)\u0002\u0002", "\u03f6\u0120\u0003\u0002\u0002\u0002\u03f7\u03f8\t*\u0002\u0002\u03f8", "\u0122\u0003\u0002\u0002\u0002\u03f9\u03fa\n+\u0002\u0002\u03fa\u0124", "\u0003\u0002\u0002\u0002\u03fb\u03fc\t,\u0002\u0002\u03fc\u0126\u0003", "\u0002\u0002\u0002\u03fd\u03fe\t-\u0002\u0002\u03fe\u0128\u0003\u0002", "\u0002\u0002\u03ff\u0400\t.\u0002\u0002\u0400\u012a\u0003\u0002\u0002", "\u0002\u0401\u0402\t0\u0002\u0002\u0402\u012c\u0003\u0002\u0002\u0002", "(\u0002\u02c0\u02c2\u02c9\u02cb\u02cf\u02e3\u02eb\u02f2\u02f5\u02fb", "\u02fe\u0302\u0306\u030a\u0310\u0317\u031c\u0322\u0328\u032a\u032e\u0333", "\u0338\u033f\u0392\u0397\u039b\u03a1\u03a7\u03ac\u03ba\u03c2\u03c4\u03cf", "\u03d3\u03d7\u03d9\u0002"].join("");
const atn = new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.atn.ATNDeserializer().deserialize(serializedATN);
const decisionsToDFA = atn.decisionToState.map((ds, index) => new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.dfa.DFA(ds, index));
class CypherLexer extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.Lexer {
  constructor(input) {
    super(input);
    this._interp = new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.PredictionContextCache());
  }

  get atn() {
    return atn;
  }

}

_defineProperty(CypherLexer, "grammarFileName", "Cypher.g4");

_defineProperty(CypherLexer, "channelNames", ["DEFAULT_TOKEN_CHANNEL", "HIDDEN"]);

_defineProperty(CypherLexer, "modeNames", ["DEFAULT_MODE"]);

_defineProperty(CypherLexer, "literalNames", [null, "';'", "','", "'='", "'+='", "'*'", "'('", "')'", "'['", "']'", "':'", "'|'", "'..'", "'+'", "'-'", "'/'", "'%'", "'^'", "'<>'", "'<'", "'>'", "'<='", "'>='", "'.'", "'{'", "'}'", "'$'", "'\u27E8'", "'\u3008'", "'\uFE64'", "'\uFF1C'", "'\u27E9'", "'\u3009'", "'\uFE65'", "'\uFF1E'", "'\u00AD'", "'\u2010'", "'\u2011'", "'\u2012'", "'\u2013'", "'\u2014'", "'\u2015'", "'\u2212'", "'\uFE58'", "'\uFE63'", "'\uFF0D'", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "'0'"]);

_defineProperty(CypherLexer, "symbolicNames", [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNION", "ALL", "OPTIONAL", "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE", "SET", "DETACH", "DELETE", "REMOVE", "CALL", "YIELD", "WITH", "RETURN", "DISTINCT", "ORDER", "BY", "L_SKIP", "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", "WHERE", "OR", "XOR", "AND", "NOT", "IN", "STARTS", "ENDS", "CONTAINS", "IS", "NULL", "SHORTESTPATH", "ALLSHORTESTPATHS", "COUNT", "ANY", "NONE", "SINGLE", "TRUE", "FALSE", "EXISTS", "CASE", "ELSE", "END", "WHEN", "THEN", "StringLiteral", "EscapedChar", "HexInteger", "DecimalInteger", "OctalInteger", "HexLetter", "HexDigit", "Digit", "NonZeroDigit", "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", "RegularDecimalReal", "CONSTRAINT", "DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY", "SCALAR", "OF", "ADD", "DROP", "FILTER", "EXTRACT", "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", "EscapedSymbolicName", "SP", "WHITESPACE", "Comment"]);

_defineProperty(CypherLexer, "ruleNames", ["T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", "T__41", "T__42", "T__43", "T__44", "UNION", "ALL", "OPTIONAL", "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE", "SET", "DETACH", "DELETE", "REMOVE", "CALL", "YIELD", "WITH", "RETURN", "DISTINCT", "ORDER", "BY", "L_SKIP", "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", "WHERE", "OR", "XOR", "AND", "NOT", "IN", "STARTS", "ENDS", "CONTAINS", "IS", "NULL", "SHORTESTPATH", "ALLSHORTESTPATHS", "COUNT", "ANY", "NONE", "SINGLE", "TRUE", "FALSE", "EXISTS", "CASE", "ELSE", "END", "WHEN", "THEN", "StringLiteral", "EscapedChar", "HexInteger", "DecimalInteger", "OctalInteger", "HexLetter", "HexDigit", "Digit", "NonZeroDigit", "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", "RegularDecimalReal", "CONSTRAINT", "DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY", "SCALAR", "OF", "ADD", "DROP", "FILTER", "EXTRACT", "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", "EscapedSymbolicName", "SP", "WHITESPACE", "Comment", "FF", "EscapedSymbolicName_0", "RS", "ID_Continue", "Comment_1", "StringLiteral_1", "Comment_3", "Comment_2", "GS", "FS", "CR", "Sc", "SPACE", "Pc", "TAB", "StringLiteral_0", "LF", "VT", "US", "ID_Start"]);

CypherLexer.EOF = antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.Token.EOF;
CypherLexer.T__0 = 1;
CypherLexer.T__1 = 2;
CypherLexer.T__2 = 3;
CypherLexer.T__3 = 4;
CypherLexer.T__4 = 5;
CypherLexer.T__5 = 6;
CypherLexer.T__6 = 7;
CypherLexer.T__7 = 8;
CypherLexer.T__8 = 9;
CypherLexer.T__9 = 10;
CypherLexer.T__10 = 11;
CypherLexer.T__11 = 12;
CypherLexer.T__12 = 13;
CypherLexer.T__13 = 14;
CypherLexer.T__14 = 15;
CypherLexer.T__15 = 16;
CypherLexer.T__16 = 17;
CypherLexer.T__17 = 18;
CypherLexer.T__18 = 19;
CypherLexer.T__19 = 20;
CypherLexer.T__20 = 21;
CypherLexer.T__21 = 22;
CypherLexer.T__22 = 23;
CypherLexer.T__23 = 24;
CypherLexer.T__24 = 25;
CypherLexer.T__25 = 26;
CypherLexer.T__26 = 27;
CypherLexer.T__27 = 28;
CypherLexer.T__28 = 29;
CypherLexer.T__29 = 30;
CypherLexer.T__30 = 31;
CypherLexer.T__31 = 32;
CypherLexer.T__32 = 33;
CypherLexer.T__33 = 34;
CypherLexer.T__34 = 35;
CypherLexer.T__35 = 36;
CypherLexer.T__36 = 37;
CypherLexer.T__37 = 38;
CypherLexer.T__38 = 39;
CypherLexer.T__39 = 40;
CypherLexer.T__40 = 41;
CypherLexer.T__41 = 42;
CypherLexer.T__42 = 43;
CypherLexer.T__43 = 44;
CypherLexer.T__44 = 45;
CypherLexer.UNION = 46;
CypherLexer.ALL = 47;
CypherLexer.OPTIONAL = 48;
CypherLexer.MATCH = 49;
CypherLexer.UNWIND = 50;
CypherLexer.AS = 51;
CypherLexer.MERGE = 52;
CypherLexer.ON = 53;
CypherLexer.CREATE = 54;
CypherLexer.SET = 55;
CypherLexer.DETACH = 56;
CypherLexer.DELETE = 57;
CypherLexer.REMOVE = 58;
CypherLexer.CALL = 59;
CypherLexer.YIELD = 60;
CypherLexer.WITH = 61;
CypherLexer.RETURN = 62;
CypherLexer.DISTINCT = 63;
CypherLexer.ORDER = 64;
CypherLexer.BY = 65;
CypherLexer.L_SKIP = 66;
CypherLexer.LIMIT = 67;
CypherLexer.ASCENDING = 68;
CypherLexer.ASC = 69;
CypherLexer.DESCENDING = 70;
CypherLexer.DESC = 71;
CypherLexer.WHERE = 72;
CypherLexer.OR = 73;
CypherLexer.XOR = 74;
CypherLexer.AND = 75;
CypherLexer.NOT = 76;
CypherLexer.IN = 77;
CypherLexer.STARTS = 78;
CypherLexer.ENDS = 79;
CypherLexer.CONTAINS = 80;
CypherLexer.IS = 81;
CypherLexer.NULL = 82;
CypherLexer.SHORTESTPATH = 83;
CypherLexer.ALLSHORTESTPATHS = 84;
CypherLexer.COUNT = 85;
CypherLexer.ANY = 86;
CypherLexer.NONE = 87;
CypherLexer.SINGLE = 88;
CypherLexer.TRUE = 89;
CypherLexer.FALSE = 90;
CypherLexer.EXISTS = 91;
CypherLexer.CASE = 92;
CypherLexer.ELSE = 93;
CypherLexer.END = 94;
CypherLexer.WHEN = 95;
CypherLexer.THEN = 96;
CypherLexer.StringLiteral = 97;
CypherLexer.EscapedChar = 98;
CypherLexer.HexInteger = 99;
CypherLexer.DecimalInteger = 100;
CypherLexer.OctalInteger = 101;
CypherLexer.HexLetter = 102;
CypherLexer.HexDigit = 103;
CypherLexer.Digit = 104;
CypherLexer.NonZeroDigit = 105;
CypherLexer.NonZeroOctDigit = 106;
CypherLexer.OctDigit = 107;
CypherLexer.ZeroDigit = 108;
CypherLexer.ExponentDecimalReal = 109;
CypherLexer.RegularDecimalReal = 110;
CypherLexer.CONSTRAINT = 111;
CypherLexer.DO = 112;
CypherLexer.FOR = 113;
CypherLexer.REQUIRE = 114;
CypherLexer.UNIQUE = 115;
CypherLexer.MANDATORY = 116;
CypherLexer.SCALAR = 117;
CypherLexer.OF = 118;
CypherLexer.ADD = 119;
CypherLexer.DROP = 120;
CypherLexer.FILTER = 121;
CypherLexer.EXTRACT = 122;
CypherLexer.UnescapedSymbolicName = 123;
CypherLexer.IdentifierStart = 124;
CypherLexer.IdentifierPart = 125;
CypherLexer.EscapedSymbolicName = 126;
CypherLexer.SP = 127;
CypherLexer.WHITESPACE = 128;
CypherLexer.Comment = 129;

/***/ }),

/***/ "./lib/CypherListener.js":
/*!*******************************!*\
  !*** ./libs/CypherListener.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return CypherListener; });
/* harmony import */ var antlr4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antlr4 */ "./node_modules/antlr4/src/antlr4/index.js");
/* harmony import */ var antlr4__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(antlr4__WEBPACK_IMPORTED_MODULE_0__);
// Generated from Cypher.g4 by ANTLR 4.9
// jshint ignore: start
 // This class defines a complete listener for a parse tree produced by CypherParser.

class CypherListener extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.tree.ParseTreeListener {
  // Enter a parse tree produced by CypherParser#oC_Cypher.
  enterOC_Cypher(ctx) {} // Exit a parse tree produced by CypherParser#oC_Cypher.


  exitOC_Cypher(ctx) {} // Enter a parse tree produced by CypherParser#oC_Statement.


  enterOC_Statement(ctx) {} // Exit a parse tree produced by CypherParser#oC_Statement.


  exitOC_Statement(ctx) {} // Enter a parse tree produced by CypherParser#oC_Query.


  enterOC_Query(ctx) {} // Exit a parse tree produced by CypherParser#oC_Query.


  exitOC_Query(ctx) {} // Enter a parse tree produced by CypherParser#oC_RegularQuery.


  enterOC_RegularQuery(ctx) {} // Exit a parse tree produced by CypherParser#oC_RegularQuery.


  exitOC_RegularQuery(ctx) {} // Enter a parse tree produced by CypherParser#oC_Union.


  enterOC_Union(ctx) {} // Exit a parse tree produced by CypherParser#oC_Union.


  exitOC_Union(ctx) {} // Enter a parse tree produced by CypherParser#oC_SingleQuery.


  enterOC_SingleQuery(ctx) {} // Exit a parse tree produced by CypherParser#oC_SingleQuery.


  exitOC_SingleQuery(ctx) {} // Enter a parse tree produced by CypherParser#oC_SinglePartQuery.


  enterOC_SinglePartQuery(ctx) {} // Exit a parse tree produced by CypherParser#oC_SinglePartQuery.


  exitOC_SinglePartQuery(ctx) {} // Enter a parse tree produced by CypherParser#oC_MultiPartQuery.


  enterOC_MultiPartQuery(ctx) {} // Exit a parse tree produced by CypherParser#oC_MultiPartQuery.


  exitOC_MultiPartQuery(ctx) {} // Enter a parse tree produced by CypherParser#oC_UpdatingClause.


  enterOC_UpdatingClause(ctx) {} // Exit a parse tree produced by CypherParser#oC_UpdatingClause.


  exitOC_UpdatingClause(ctx) {} // Enter a parse tree produced by CypherParser#oC_ReadingClause.


  enterOC_ReadingClause(ctx) {} // Exit a parse tree produced by CypherParser#oC_ReadingClause.


  exitOC_ReadingClause(ctx) {} // Enter a parse tree produced by CypherParser#oC_Match.


  enterOC_Match(ctx) {} // Exit a parse tree produced by CypherParser#oC_Match.


  exitOC_Match(ctx) {} // Enter a parse tree produced by CypherParser#oC_Unwind.


  enterOC_Unwind(ctx) {} // Exit a parse tree produced by CypherParser#oC_Unwind.


  exitOC_Unwind(ctx) {} // Enter a parse tree produced by CypherParser#oC_Merge.


  enterOC_Merge(ctx) {} // Exit a parse tree produced by CypherParser#oC_Merge.


  exitOC_Merge(ctx) {} // Enter a parse tree produced by CypherParser#oC_MergeAction.


  enterOC_MergeAction(ctx) {} // Exit a parse tree produced by CypherParser#oC_MergeAction.


  exitOC_MergeAction(ctx) {} // Enter a parse tree produced by CypherParser#oC_Create.


  enterOC_Create(ctx) {} // Exit a parse tree produced by CypherParser#oC_Create.


  exitOC_Create(ctx) {} // Enter a parse tree produced by CypherParser#oC_Set.


  enterOC_Set(ctx) {} // Exit a parse tree produced by CypherParser#oC_Set.


  exitOC_Set(ctx) {} // Enter a parse tree produced by CypherParser#oC_SetItem.


  enterOC_SetItem(ctx) {} // Exit a parse tree produced by CypherParser#oC_SetItem.


  exitOC_SetItem(ctx) {} // Enter a parse tree produced by CypherParser#oC_Delete.


  enterOC_Delete(ctx) {} // Exit a parse tree produced by CypherParser#oC_Delete.


  exitOC_Delete(ctx) {} // Enter a parse tree produced by CypherParser#oC_Remove.


  enterOC_Remove(ctx) {} // Exit a parse tree produced by CypherParser#oC_Remove.


  exitOC_Remove(ctx) {} // Enter a parse tree produced by CypherParser#oC_RemoveItem.


  enterOC_RemoveItem(ctx) {} // Exit a parse tree produced by CypherParser#oC_RemoveItem.


  exitOC_RemoveItem(ctx) {} // Enter a parse tree produced by CypherParser#oC_InQueryCall.


  enterOC_InQueryCall(ctx) {} // Exit a parse tree produced by CypherParser#oC_InQueryCall.


  exitOC_InQueryCall(ctx) {} // Enter a parse tree produced by CypherParser#oC_StandaloneCall.


  enterOC_StandaloneCall(ctx) {} // Exit a parse tree produced by CypherParser#oC_StandaloneCall.


  exitOC_StandaloneCall(ctx) {} // Enter a parse tree produced by CypherParser#oC_YieldItems.


  enterOC_YieldItems(ctx) {} // Exit a parse tree produced by CypherParser#oC_YieldItems.


  exitOC_YieldItems(ctx) {} // Enter a parse tree produced by CypherParser#oC_YieldItem.


  enterOC_YieldItem(ctx) {} // Exit a parse tree produced by CypherParser#oC_YieldItem.


  exitOC_YieldItem(ctx) {} // Enter a parse tree produced by CypherParser#oC_With.


  enterOC_With(ctx) {} // Exit a parse tree produced by CypherParser#oC_With.


  exitOC_With(ctx) {} // Enter a parse tree produced by CypherParser#oC_Return.


  enterOC_Return(ctx) {} // Exit a parse tree produced by CypherParser#oC_Return.


  exitOC_Return(ctx) {} // Enter a parse tree produced by CypherParser#oC_ProjectionBody.


  enterOC_ProjectionBody(ctx) {} // Exit a parse tree produced by CypherParser#oC_ProjectionBody.


  exitOC_ProjectionBody(ctx) {} // Enter a parse tree produced by CypherParser#oC_ProjectionItems.


  enterOC_ProjectionItems(ctx) {} // Exit a parse tree produced by CypherParser#oC_ProjectionItems.


  exitOC_ProjectionItems(ctx) {} // Enter a parse tree produced by CypherParser#oC_ProjectionItem.


  enterOC_ProjectionItem(ctx) {} // Exit a parse tree produced by CypherParser#oC_ProjectionItem.


  exitOC_ProjectionItem(ctx) {} // Enter a parse tree produced by CypherParser#oC_Order.


  enterOC_Order(ctx) {} // Exit a parse tree produced by CypherParser#oC_Order.


  exitOC_Order(ctx) {} // Enter a parse tree produced by CypherParser#oC_Skip.


  enterOC_Skip(ctx) {} // Exit a parse tree produced by CypherParser#oC_Skip.


  exitOC_Skip(ctx) {} // Enter a parse tree produced by CypherParser#oC_Limit.


  enterOC_Limit(ctx) {} // Exit a parse tree produced by CypherParser#oC_Limit.


  exitOC_Limit(ctx) {} // Enter a parse tree produced by CypherParser#oC_SortItem.


  enterOC_SortItem(ctx) {} // Exit a parse tree produced by CypherParser#oC_SortItem.


  exitOC_SortItem(ctx) {} // Enter a parse tree produced by CypherParser#oC_Where.


  enterOC_Where(ctx) {} // Exit a parse tree produced by CypherParser#oC_Where.


  exitOC_Where(ctx) {} // Enter a parse tree produced by CypherParser#oC_Pattern.


  enterOC_Pattern(ctx) {} // Exit a parse tree produced by CypherParser#oC_Pattern.


  exitOC_Pattern(ctx) {} // Enter a parse tree produced by CypherParser#oC_PatternPart.


  enterOC_PatternPart(ctx) {} // Exit a parse tree produced by CypherParser#oC_PatternPart.


  exitOC_PatternPart(ctx) {} // Enter a parse tree produced by CypherParser#oC_AnonymousPatternPart.


  enterOC_AnonymousPatternPart(ctx) {} // Exit a parse tree produced by CypherParser#oC_AnonymousPatternPart.


  exitOC_AnonymousPatternPart(ctx) {} // Enter a parse tree produced by CypherParser#oC_PatternElement.


  enterOC_PatternElement(ctx) {} // Exit a parse tree produced by CypherParser#oC_PatternElement.


  exitOC_PatternElement(ctx) {} // Enter a parse tree produced by CypherParser#oC_NodePattern.


  enterOC_NodePattern(ctx) {} // Exit a parse tree produced by CypherParser#oC_NodePattern.


  exitOC_NodePattern(ctx) {} // Enter a parse tree produced by CypherParser#oC_PatternElementChain.


  enterOC_PatternElementChain(ctx) {} // Exit a parse tree produced by CypherParser#oC_PatternElementChain.


  exitOC_PatternElementChain(ctx) {} // Enter a parse tree produced by CypherParser#oC_RelationshipPattern.


  enterOC_RelationshipPattern(ctx) {} // Exit a parse tree produced by CypherParser#oC_RelationshipPattern.


  exitOC_RelationshipPattern(ctx) {} // Enter a parse tree produced by CypherParser#oC_RelationshipDetail.


  enterOC_RelationshipDetail(ctx) {} // Exit a parse tree produced by CypherParser#oC_RelationshipDetail.


  exitOC_RelationshipDetail(ctx) {} // Enter a parse tree produced by CypherParser#oC_Properties.


  enterOC_Properties(ctx) {} // Exit a parse tree produced by CypherParser#oC_Properties.


  exitOC_Properties(ctx) {} // Enter a parse tree produced by CypherParser#oC_RelationshipTypes.


  enterOC_RelationshipTypes(ctx) {} // Exit a parse tree produced by CypherParser#oC_RelationshipTypes.


  exitOC_RelationshipTypes(ctx) {} // Enter a parse tree produced by CypherParser#oC_NodeLabels.


  enterOC_NodeLabels(ctx) {} // Exit a parse tree produced by CypherParser#oC_NodeLabels.


  exitOC_NodeLabels(ctx) {} // Enter a parse tree produced by CypherParser#oC_NodeLabel.


  enterOC_NodeLabel(ctx) {} // Exit a parse tree produced by CypherParser#oC_NodeLabel.


  exitOC_NodeLabel(ctx) {} // Enter a parse tree produced by CypherParser#oC_RangeLiteral.


  enterOC_RangeLiteral(ctx) {} // Exit a parse tree produced by CypherParser#oC_RangeLiteral.


  exitOC_RangeLiteral(ctx) {} // Enter a parse tree produced by CypherParser#oC_LabelName.


  enterOC_LabelName(ctx) {} // Exit a parse tree produced by CypherParser#oC_LabelName.


  exitOC_LabelName(ctx) {} // Enter a parse tree produced by CypherParser#oC_RelTypeName.


  enterOC_RelTypeName(ctx) {} // Exit a parse tree produced by CypherParser#oC_RelTypeName.


  exitOC_RelTypeName(ctx) {} // Enter a parse tree produced by CypherParser#oC_Expression.


  enterOC_Expression(ctx) {} // Exit a parse tree produced by CypherParser#oC_Expression.


  exitOC_Expression(ctx) {} // Enter a parse tree produced by CypherParser#oC_OrExpression.


  enterOC_OrExpression(ctx) {} // Exit a parse tree produced by CypherParser#oC_OrExpression.


  exitOC_OrExpression(ctx) {} // Enter a parse tree produced by CypherParser#oC_XorExpression.


  enterOC_XorExpression(ctx) {} // Exit a parse tree produced by CypherParser#oC_XorExpression.


  exitOC_XorExpression(ctx) {} // Enter a parse tree produced by CypherParser#oC_AndExpression.


  enterOC_AndExpression(ctx) {} // Exit a parse tree produced by CypherParser#oC_AndExpression.


  exitOC_AndExpression(ctx) {} // Enter a parse tree produced by CypherParser#oC_NotExpression.


  enterOC_NotExpression(ctx) {} // Exit a parse tree produced by CypherParser#oC_NotExpression.


  exitOC_NotExpression(ctx) {} // Enter a parse tree produced by CypherParser#oC_ComparisonExpression.


  enterOC_ComparisonExpression(ctx) {} // Exit a parse tree produced by CypherParser#oC_ComparisonExpression.


  exitOC_ComparisonExpression(ctx) {} // Enter a parse tree produced by CypherParser#oC_AddOrSubtractExpression.


  enterOC_AddOrSubtractExpression(ctx) {} // Exit a parse tree produced by CypherParser#oC_AddOrSubtractExpression.


  exitOC_AddOrSubtractExpression(ctx) {} // Enter a parse tree produced by CypherParser#oC_MultiplyDivideModuloExpression.


  enterOC_MultiplyDivideModuloExpression(ctx) {} // Exit a parse tree produced by CypherParser#oC_MultiplyDivideModuloExpression.


  exitOC_MultiplyDivideModuloExpression(ctx) {} // Enter a parse tree produced by CypherParser#oC_PowerOfExpression.


  enterOC_PowerOfExpression(ctx) {} // Exit a parse tree produced by CypherParser#oC_PowerOfExpression.


  exitOC_PowerOfExpression(ctx) {} // Enter a parse tree produced by CypherParser#oC_UnaryAddOrSubtractExpression.


  enterOC_UnaryAddOrSubtractExpression(ctx) {} // Exit a parse tree produced by CypherParser#oC_UnaryAddOrSubtractExpression.


  exitOC_UnaryAddOrSubtractExpression(ctx) {} // Enter a parse tree produced by CypherParser#oC_StringListNullOperatorExpression.


  enterOC_StringListNullOperatorExpression(ctx) {} // Exit a parse tree produced by CypherParser#oC_StringListNullOperatorExpression.


  exitOC_StringListNullOperatorExpression(ctx) {} // Enter a parse tree produced by CypherParser#oC_ListOperatorExpression.


  enterOC_ListOperatorExpression(ctx) {} // Exit a parse tree produced by CypherParser#oC_ListOperatorExpression.


  exitOC_ListOperatorExpression(ctx) {} // Enter a parse tree produced by CypherParser#oC_StringOperatorExpression.


  enterOC_StringOperatorExpression(ctx) {} // Exit a parse tree produced by CypherParser#oC_StringOperatorExpression.


  exitOC_StringOperatorExpression(ctx) {} // Enter a parse tree produced by CypherParser#oC_NullOperatorExpression.


  enterOC_NullOperatorExpression(ctx) {} // Exit a parse tree produced by CypherParser#oC_NullOperatorExpression.


  exitOC_NullOperatorExpression(ctx) {} // Enter a parse tree produced by CypherParser#oC_PropertyOrLabelsExpression.


  enterOC_PropertyOrLabelsExpression(ctx) {} // Exit a parse tree produced by CypherParser#oC_PropertyOrLabelsExpression.


  exitOC_PropertyOrLabelsExpression(ctx) {} // Enter a parse tree produced by CypherParser#oC_ShortestPathPatternFunction.


  enterOC_ShortestPathPatternFunction(ctx) {} // Exit a parse tree produced by CypherParser#oC_ShortestPathPatternFunction.


  exitOC_ShortestPathPatternFunction(ctx) {} // Enter a parse tree produced by CypherParser#oC_ShortestPathFunctionName.


  enterOC_ShortestPathFunctionName(ctx) {} // Exit a parse tree produced by CypherParser#oC_ShortestPathFunctionName.


  exitOC_ShortestPathFunctionName(ctx) {} // Enter a parse tree produced by CypherParser#oC_AllShortestPathFunctionName.


  enterOC_AllShortestPathFunctionName(ctx) {} // Exit a parse tree produced by CypherParser#oC_AllShortestPathFunctionName.


  exitOC_AllShortestPathFunctionName(ctx) {} // Enter a parse tree produced by CypherParser#oC_Atom.


  enterOC_Atom(ctx) {} // Exit a parse tree produced by CypherParser#oC_Atom.


  exitOC_Atom(ctx) {} // Enter a parse tree produced by CypherParser#oC_Literal.


  enterOC_Literal(ctx) {} // Exit a parse tree produced by CypherParser#oC_Literal.


  exitOC_Literal(ctx) {} // Enter a parse tree produced by CypherParser#oC_BooleanLiteral.


  enterOC_BooleanLiteral(ctx) {} // Exit a parse tree produced by CypherParser#oC_BooleanLiteral.


  exitOC_BooleanLiteral(ctx) {} // Enter a parse tree produced by CypherParser#oC_ListLiteral.


  enterOC_ListLiteral(ctx) {} // Exit a parse tree produced by CypherParser#oC_ListLiteral.


  exitOC_ListLiteral(ctx) {} // Enter a parse tree produced by CypherParser#oC_PartialComparisonExpression.


  enterOC_PartialComparisonExpression(ctx) {} // Exit a parse tree produced by CypherParser#oC_PartialComparisonExpression.


  exitOC_PartialComparisonExpression(ctx) {} // Enter a parse tree produced by CypherParser#oC_ParenthesizedExpression.


  enterOC_ParenthesizedExpression(ctx) {} // Exit a parse tree produced by CypherParser#oC_ParenthesizedExpression.


  exitOC_ParenthesizedExpression(ctx) {} // Enter a parse tree produced by CypherParser#oC_RelationshipsPattern.


  enterOC_RelationshipsPattern(ctx) {} // Exit a parse tree produced by CypherParser#oC_RelationshipsPattern.


  exitOC_RelationshipsPattern(ctx) {} // Enter a parse tree produced by CypherParser#oC_FilterExpression.


  enterOC_FilterExpression(ctx) {} // Exit a parse tree produced by CypherParser#oC_FilterExpression.


  exitOC_FilterExpression(ctx) {} // Enter a parse tree produced by CypherParser#oC_IdInColl.


  enterOC_IdInColl(ctx) {} // Exit a parse tree produced by CypherParser#oC_IdInColl.


  exitOC_IdInColl(ctx) {} // Enter a parse tree produced by CypherParser#oC_FunctionInvocation.


  enterOC_FunctionInvocation(ctx) {} // Exit a parse tree produced by CypherParser#oC_FunctionInvocation.


  exitOC_FunctionInvocation(ctx) {} // Enter a parse tree produced by CypherParser#oC_FunctionName.


  enterOC_FunctionName(ctx) {} // Exit a parse tree produced by CypherParser#oC_FunctionName.


  exitOC_FunctionName(ctx) {} // Enter a parse tree produced by CypherParser#oC_ExplicitProcedureInvocation.


  enterOC_ExplicitProcedureInvocation(ctx) {} // Exit a parse tree produced by CypherParser#oC_ExplicitProcedureInvocation.


  exitOC_ExplicitProcedureInvocation(ctx) {} // Enter a parse tree produced by CypherParser#oC_ImplicitProcedureInvocation.


  enterOC_ImplicitProcedureInvocation(ctx) {} // Exit a parse tree produced by CypherParser#oC_ImplicitProcedureInvocation.


  exitOC_ImplicitProcedureInvocation(ctx) {} // Enter a parse tree produced by CypherParser#oC_ProcedureResultField.


  enterOC_ProcedureResultField(ctx) {} // Exit a parse tree produced by CypherParser#oC_ProcedureResultField.


  exitOC_ProcedureResultField(ctx) {} // Enter a parse tree produced by CypherParser#oC_ProcedureName.


  enterOC_ProcedureName(ctx) {} // Exit a parse tree produced by CypherParser#oC_ProcedureName.


  exitOC_ProcedureName(ctx) {} // Enter a parse tree produced by CypherParser#oC_Namespace.


  enterOC_Namespace(ctx) {} // Exit a parse tree produced by CypherParser#oC_Namespace.


  exitOC_Namespace(ctx) {} // Enter a parse tree produced by CypherParser#oC_ListComprehension.


  enterOC_ListComprehension(ctx) {} // Exit a parse tree produced by CypherParser#oC_ListComprehension.


  exitOC_ListComprehension(ctx) {} // Enter a parse tree produced by CypherParser#oC_PatternComprehension.


  enterOC_PatternComprehension(ctx) {} // Exit a parse tree produced by CypherParser#oC_PatternComprehension.


  exitOC_PatternComprehension(ctx) {} // Enter a parse tree produced by CypherParser#oC_PropertyLookup.


  enterOC_PropertyLookup(ctx) {} // Exit a parse tree produced by CypherParser#oC_PropertyLookup.


  exitOC_PropertyLookup(ctx) {} // Enter a parse tree produced by CypherParser#oC_CaseExpression.


  enterOC_CaseExpression(ctx) {} // Exit a parse tree produced by CypherParser#oC_CaseExpression.


  exitOC_CaseExpression(ctx) {} // Enter a parse tree produced by CypherParser#oC_CaseAlternatives.


  enterOC_CaseAlternatives(ctx) {} // Exit a parse tree produced by CypherParser#oC_CaseAlternatives.


  exitOC_CaseAlternatives(ctx) {} // Enter a parse tree produced by CypherParser#oC_Variable.


  enterOC_Variable(ctx) {} // Exit a parse tree produced by CypherParser#oC_Variable.


  exitOC_Variable(ctx) {} // Enter a parse tree produced by CypherParser#oC_NumberLiteral.


  enterOC_NumberLiteral(ctx) {} // Exit a parse tree produced by CypherParser#oC_NumberLiteral.


  exitOC_NumberLiteral(ctx) {} // Enter a parse tree produced by CypherParser#oC_MapLiteral.


  enterOC_MapLiteral(ctx) {} // Exit a parse tree produced by CypherParser#oC_MapLiteral.


  exitOC_MapLiteral(ctx) {} // Enter a parse tree produced by CypherParser#oC_Parameter.


  enterOC_Parameter(ctx) {} // Exit a parse tree produced by CypherParser#oC_Parameter.


  exitOC_Parameter(ctx) {} // Enter a parse tree produced by CypherParser#oC_PropertyExpression.


  enterOC_PropertyExpression(ctx) {} // Exit a parse tree produced by CypherParser#oC_PropertyExpression.


  exitOC_PropertyExpression(ctx) {} // Enter a parse tree produced by CypherParser#oC_PropertyKeyName.


  enterOC_PropertyKeyName(ctx) {} // Exit a parse tree produced by CypherParser#oC_PropertyKeyName.


  exitOC_PropertyKeyName(ctx) {} // Enter a parse tree produced by CypherParser#oC_IntegerLiteral.


  enterOC_IntegerLiteral(ctx) {} // Exit a parse tree produced by CypherParser#oC_IntegerLiteral.


  exitOC_IntegerLiteral(ctx) {} // Enter a parse tree produced by CypherParser#oC_DoubleLiteral.


  enterOC_DoubleLiteral(ctx) {} // Exit a parse tree produced by CypherParser#oC_DoubleLiteral.


  exitOC_DoubleLiteral(ctx) {} // Enter a parse tree produced by CypherParser#oC_SchemaName.


  enterOC_SchemaName(ctx) {} // Exit a parse tree produced by CypherParser#oC_SchemaName.


  exitOC_SchemaName(ctx) {} // Enter a parse tree produced by CypherParser#oC_ReservedWord.


  enterOC_ReservedWord(ctx) {} // Exit a parse tree produced by CypherParser#oC_ReservedWord.


  exitOC_ReservedWord(ctx) {} // Enter a parse tree produced by CypherParser#oC_SymbolicName.


  enterOC_SymbolicName(ctx) {} // Exit a parse tree produced by CypherParser#oC_SymbolicName.


  exitOC_SymbolicName(ctx) {} // Enter a parse tree produced by CypherParser#oC_LeftArrowHead.


  enterOC_LeftArrowHead(ctx) {} // Exit a parse tree produced by CypherParser#oC_LeftArrowHead.


  exitOC_LeftArrowHead(ctx) {} // Enter a parse tree produced by CypherParser#oC_RightArrowHead.


  enterOC_RightArrowHead(ctx) {} // Exit a parse tree produced by CypherParser#oC_RightArrowHead.


  exitOC_RightArrowHead(ctx) {} // Enter a parse tree produced by CypherParser#oC_Dash.


  enterOC_Dash(ctx) {} // Exit a parse tree produced by CypherParser#oC_Dash.


  exitOC_Dash(ctx) {}

}

/***/ }),

/***/ "./lib/CypherParser.js":
/*!*****************************!*\
  !*** ./libs/CypherParser.js ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return CypherParser; });
/* harmony import */ var antlr4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antlr4 */ "./node_modules/antlr4/src/antlr4/index.js");
/* harmony import */ var antlr4__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(antlr4__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CypherListener.js */ "./lib/CypherListener.js");
/* harmony import */ var _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CypherVisitor.js */ "./lib/CypherVisitor.js");
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// Generated from Cypher.g4 by ANTLR 4.9
// jshint ignore: start



const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786", "\u5964\u0003\u0083\u0640\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004", "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t", "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004", "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010", "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013", "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017", "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a", "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e", "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#", "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004", "*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004", "1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004", "8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004", "?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004", "F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004", "M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004", "T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004", "[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004", "b\tb\u0004c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0003\u0002\u0005", "\u0002\u00d0\n\u0002\u0003\u0002\u0003\u0002\u0005\u0002\u00d4\n\u0002", "\u0003\u0002\u0005\u0002\u00d7\n\u0002\u0003\u0002\u0005\u0002\u00da", "\n\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0004", "\u0003\u0004\u0005\u0004\u00e2\n\u0004\u0003\u0005\u0003\u0005\u0005", "\u0005\u00e6\n\u0005\u0003\u0005\u0007\u0005\u00e9\n\u0005\f\u0005\u000e", "\u0005\u00ec\u000b\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006", "\u0005\u0006\u00f2\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005", "\u0006\u00f7\n\u0006\u0003\u0006\u0005\u0006\u00fa\n\u0006\u0003\u0007", "\u0003\u0007\u0005\u0007\u00fe\n\u0007\u0003\b\u0003\b\u0005\b\u0102", "\n\b\u0007\b\u0104\n\b\f\b\u000e\b\u0107\u000b\b\u0003\b\u0003\b\u0003", "\b\u0005\b\u010c\n\b\u0007\b\u010e\n\b\f\b\u000e\b\u0111\u000b\b\u0003", "\b\u0003\b\u0005\b\u0115\n\b\u0003\b\u0007\b\u0118\n\b\f\b\u000e\b\u011b", "\u000b\b\u0003\b\u0005\b\u011e\n\b\u0003\b\u0005\b\u0121\n\b\u0005\b", "\u0123\n\b\u0003\t\u0003\t\u0005\t\u0127\n\t\u0007\t\u0129\n\t\f\t\u000e", "\t\u012c\u000b\t\u0003\t\u0003\t\u0005\t\u0130\n\t\u0007\t\u0132\n\t", "\f\t\u000e\t\u0135\u000b\t\u0003\t\u0003\t\u0005\t\u0139\n\t\u0006\t", "\u013b\n\t\r\t\u000e\t\u013c\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n", "\u0003\n\u0003\n\u0005\n\u0146\n\n\u0003\u000b\u0003\u000b\u0003\u000b", "\u0005\u000b\u014b\n\u000b\u0003\f\u0003\f\u0005\f\u014f\n\f\u0003\f", "\u0003\f\u0005\f\u0153\n\f\u0003\f\u0003\f\u0005\f\u0157\n\f\u0003\f", "\u0005\f\u015a\n\f\u0003\r\u0003\r\u0005\r\u015e\n\r\u0003\r\u0003\r", "\u0003\r\u0003\r\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0005\u000e", "\u0168\n\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0007\u000e\u016d", "\n\u000e\f\u000e\u000e\u000e\u0170\u000b\u000e\u0003\u000f\u0003\u000f", "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f", "\u0003\u000f\u0003\u000f\u0005\u000f\u017c\n\u000f\u0003\u0010\u0003", "\u0010\u0005\u0010\u0180\n\u0010\u0003\u0010\u0003\u0010\u0003\u0011", "\u0003\u0011\u0005\u0011\u0186\n\u0011\u0003\u0011\u0003\u0011\u0003", "\u0011\u0007\u0011\u018b\n\u0011\f\u0011\u000e\u0011\u018e\u000b\u0011", "\u0003\u0012\u0003\u0012\u0005\u0012\u0192\n\u0012\u0003\u0012\u0003", "\u0012\u0005\u0012\u0196\n\u0012\u0003\u0012\u0003\u0012\u0003\u0012", "\u0003\u0012\u0005\u0012\u019c\n\u0012\u0003\u0012\u0003\u0012\u0005", "\u0012\u01a0\n\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012", "\u0005\u0012\u01a6\n\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u01aa", "\n\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0005\u0012", "\u01b0\n\u0012\u0003\u0012\u0003\u0012\u0005\u0012\u01b4\n\u0012\u0003", "\u0013\u0003\u0013\u0005\u0013\u01b8\n\u0013\u0003\u0013\u0003\u0013", "\u0005\u0013\u01bc\n\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u01c0", "\n\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u01c4\n\u0013\u0003\u0013", "\u0007\u0013\u01c7\n\u0013\f\u0013\u000e\u0013\u01ca\u000b\u0013\u0003", "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u01d0\n\u0014", "\u0003\u0014\u0003\u0014\u0005\u0014\u01d4\n\u0014\u0003\u0014\u0007", "\u0014\u01d7\n\u0014\f\u0014\u000e\u0014\u01da\u000b\u0014\u0003\u0015", "\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u01e0\n\u0015\u0003", "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u01e6\n\u0016", "\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u01eb\n\u0016\u0003", "\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u01f1\n\u0017", "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u01f7\n", "\u0017\u0003\u0018\u0003\u0018\u0003\u0018\u0005\u0018\u01fc\n\u0018", "\u0003\u0018\u0003\u0018\u0005\u0018\u0200\n\u0018\u0003\u0018\u0007", "\u0018\u0203\n\u0018\f\u0018\u000e\u0018\u0206\u000b\u0018\u0005\u0018", "\u0208\n\u0018\u0003\u0018\u0005\u0018\u020b\n\u0018\u0003\u0018\u0005", "\u0018\u020e\n\u0018\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019", "\u0003\u0019\u0005\u0019\u0215\n\u0019\u0003\u0019\u0003\u0019\u0003", "\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u021c\n\u001a\u0003\u001a", "\u0005\u001a\u021f\n\u001a\u0003\u001b\u0003\u001b\u0003\u001b\u0003", "\u001c\u0005\u001c\u0225\n\u001c\u0003\u001c\u0005\u001c\u0228\n\u001c", "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u022e\n", "\u001c\u0003\u001c\u0003\u001c\u0005\u001c\u0232\n\u001c\u0003\u001c", "\u0003\u001c\u0005\u001c\u0236\n\u001c\u0003\u001d\u0003\u001d\u0005", "\u001d\u023a\n\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u023e\n\u001d", "\u0003\u001d\u0007\u001d\u0241\n\u001d\f\u001d\u000e\u001d\u0244\u000b", "\u001d\u0003\u001d\u0003\u001d\u0005\u001d\u0248\n\u001d\u0003\u001d", "\u0003\u001d\u0005\u001d\u024c\n\u001d\u0003\u001d\u0007\u001d\u024f", "\n\u001d\f\u001d\u000e\u001d\u0252\u000b\u001d\u0005\u001d\u0254\n\u001d", "\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e", "\u0003\u001e\u0005\u001e\u025d\n\u001e\u0003\u001f\u0003\u001f\u0003", "\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u0266", "\n\u001f\u0003\u001f\u0007\u001f\u0269\n\u001f\f\u001f\u000e\u001f\u026c", "\u000b\u001f\u0003 \u0003 \u0003 \u0003 \u0003!\u0003!\u0003!\u0003", "!\u0003\"\u0003\"\u0005\"\u0278\n\"\u0003\"\u0005\"\u027b\n\"\u0003", "#\u0003#\u0003#\u0003#\u0003$\u0003$\u0005$\u0283\n$\u0003$\u0003$\u0005", "$\u0287\n$\u0003$\u0007$\u028a\n$\f$\u000e$\u028d\u000b$\u0003%\u0003", "%\u0005%\u0291\n%\u0003%\u0003%\u0005%\u0295\n%\u0003%\u0003%\u0003", "%\u0005%\u029a\n%\u0003&\u0003&\u0005&\u029e\n&\u0003\'\u0003\'\u0005", "\'\u02a2\n\'\u0003\'\u0007\'\u02a5\n\'\f\'\u000e\'\u02a8\u000b\'\u0003", "\'\u0003\'\u0003\'\u0003\'\u0005\'\u02ae\n\'\u0003(\u0003(\u0005(\u02b2", "\n(\u0003(\u0003(\u0005(\u02b6\n(\u0005(\u02b8\n(\u0003(\u0003(\u0005", "(\u02bc\n(\u0005(\u02be\n(\u0003(\u0003(\u0005(\u02c2\n(\u0005(\u02c4", "\n(\u0003(\u0003(\u0003)\u0003)\u0005)\u02ca\n)\u0003)\u0003)\u0003", "*\u0003*\u0005*\u02d0\n*\u0003*\u0003*\u0005*\u02d4\n*\u0003*\u0005", "*\u02d7\n*\u0003*\u0005*\u02da\n*\u0003*\u0003*\u0005*\u02de\n*\u0003", "*\u0003*\u0003*\u0003*\u0005*\u02e4\n*\u0003*\u0003*\u0005*\u02e8\n", "*\u0003*\u0005*\u02eb\n*\u0003*\u0005*\u02ee\n*\u0003*\u0003*\u0003", "*\u0003*\u0005*\u02f4\n*\u0003*\u0005*\u02f7\n*\u0003*\u0005*\u02fa", "\n*\u0003*\u0003*\u0005*\u02fe\n*\u0003*\u0003*\u0003*\u0003*\u0005", "*\u0304\n*\u0003*\u0005*\u0307\n*\u0003*\u0005*\u030a\n*\u0003*\u0003", "*\u0005*\u030e\n*\u0003+\u0003+\u0005+\u0312\n+\u0003+\u0003+\u0005", "+\u0316\n+\u0005+\u0318\n+\u0003+\u0003+\u0005+\u031c\n+\u0005+\u031e", "\n+\u0003+\u0005+\u0321\n+\u0003+\u0003+\u0005+\u0325\n+\u0005+\u0327", "\n+\u0003+\u0003+\u0003,\u0003,\u0005,\u032d\n,\u0003-\u0003-\u0005", "-\u0331\n-\u0003-\u0003-\u0005-\u0335\n-\u0003-\u0003-\u0005-\u0339", "\n-\u0003-\u0005-\u033c\n-\u0003-\u0007-\u033f\n-\f-\u000e-\u0342\u000b", "-\u0003.\u0003.\u0005.\u0346\n.\u0003.\u0007.\u0349\n.\f.\u000e.\u034c", "\u000b.\u0003/\u0003/\u0005/\u0350\n/\u0003/\u0003/\u00030\u00030\u0005", "0\u0356\n0\u00030\u00030\u00050\u035a\n0\u00050\u035c\n0\u00030\u0003", "0\u00050\u0360\n0\u00030\u00030\u00050\u0364\n0\u00050\u0366\n0\u0005", "0\u0368\n0\u00031\u00031\u00032\u00032\u00033\u00033\u00034\u00034\u0003", "4\u00034\u00034\u00074\u0375\n4\f4\u000e4\u0378\u000b4\u00035\u0003", "5\u00035\u00035\u00035\u00075\u037f\n5\f5\u000e5\u0382\u000b5\u0003", "6\u00036\u00036\u00036\u00036\u00076\u0389\n6\f6\u000e6\u038c\u000b", "6\u00037\u00037\u00057\u0390\n7\u00077\u0392\n7\f7\u000e7\u0395\u000b", "7\u00037\u00037\u00038\u00038\u00058\u039b\n8\u00038\u00078\u039e\n", "8\f8\u000e8\u03a1\u000b8\u00039\u00039\u00059\u03a5\n9\u00039\u0003", "9\u00059\u03a9\n9\u00039\u00039\u00059\u03ad\n9\u00039\u00039\u0005", "9\u03b1\n9\u00039\u00079\u03b4\n9\f9\u000e9\u03b7\u000b9\u0003:\u0003", ":\u0005:\u03bb\n:\u0003:\u0003:\u0005:\u03bf\n:\u0003:\u0003:\u0005", ":\u03c3\n:\u0003:\u0003:\u0005:\u03c7\n:\u0003:\u0003:\u0005:\u03cb", "\n:\u0003:\u0003:\u0005:\u03cf\n:\u0003:\u0007:\u03d2\n:\f:\u000e:\u03d5", "\u000b:\u0003;\u0003;\u0005;\u03d9\n;\u0003;\u0003;\u0005;\u03dd\n;", "\u0003;\u0007;\u03e0\n;\f;\u000e;\u03e3\u000b;\u0003<\u0003<\u0005<", "\u03e7\n<\u0007<\u03e9\n<\f<\u000e<\u03ec\u000b<\u0003<\u0003<\u0003", "=\u0003=\u0003=\u0003=\u0007=\u03f4\n=\f=\u000e=\u03f7\u000b=\u0003", ">\u0003>\u0003>\u0005>\u03fc\n>\u0003>\u0003>\u0005>\u0400\n>\u0003", ">\u0003>\u0003>\u0003>\u0003>\u0005>\u0407\n>\u0003>\u0003>\u0005>\u040b", "\n>\u0003>\u0003>\u0005>\u040f\n>\u0003>\u0005>\u0412\n>\u0003?\u0003", "?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0003?\u0005?\u041e", "\n?\u0003?\u0005?\u0421\n?\u0003?\u0003?\u0003@\u0003@\u0003@\u0003", "@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005@\u042f\n@\u0003A\u0003", "A\u0005A\u0433\nA\u0003A\u0007A\u0436\nA\fA\u000eA\u0439\u000bA\u0003", "A\u0005A\u043c\nA\u0003A\u0005A\u043f\nA\u0003B\u0003B\u0005B\u0443", "\nB\u0003B\u0003B\u0005B\u0447\nB\u0003B\u0003B\u0005B\u044b\nB\u0003", "B\u0003B\u0003B\u0003B\u0005B\u0451\nB\u0003B\u0003B\u0005B\u0455\n", "B\u0003B\u0003B\u0005B\u0459\nB\u0003B\u0003B\u0005B\u045d\nB\u0003", "C\u0003C\u0003D\u0003D\u0003E\u0003E\u0003E\u0003E\u0003E\u0005E\u0468", "\nE\u0003E\u0003E\u0005E\u046c\nE\u0003E\u0003E\u0005E\u0470\nE\u0003", "E\u0003E\u0003E\u0003E\u0003E\u0005E\u0477\nE\u0003E\u0003E\u0005E\u047b", "\nE\u0003E\u0003E\u0005E\u047f\nE\u0003E\u0003E\u0003E\u0003E\u0005", "E\u0485\nE\u0003E\u0003E\u0005E\u0489\nE\u0003E\u0003E\u0005E\u048d", "\nE\u0003E\u0003E\u0003E\u0003E\u0005E\u0493\nE\u0003E\u0003E\u0005", "E\u0497\nE\u0003E\u0003E\u0005E\u049b\nE\u0003E\u0003E\u0003E\u0003", "E\u0005E\u04a1\nE\u0003E\u0003E\u0005E\u04a5\nE\u0003E\u0003E\u0005", "E\u04a9\nE\u0003E\u0003E\u0003E\u0003E\u0005E\u04af\nE\u0003E\u0003", "E\u0005E\u04b3\nE\u0003E\u0003E\u0005E\u04b7\nE\u0003E\u0003E\u0003", "E\u0003E\u0003E\u0003E\u0003E\u0005E\u04c0\nE\u0003F\u0003F\u0003F\u0003", "F\u0003F\u0003F\u0005F\u04c8\nF\u0003G\u0003G\u0003H\u0003H\u0005H\u04ce", "\nH\u0003H\u0003H\u0005H\u04d2\nH\u0003H\u0003H\u0005H\u04d6\nH\u0003", "H\u0003H\u0005H\u04da\nH\u0007H\u04dc\nH\fH\u000eH\u04df\u000bH\u0005", "H\u04e1\nH\u0003H\u0003H\u0003I\u0003I\u0005I\u04e7\nI\u0003I\u0003", "I\u0003I\u0005I\u04ec\nI\u0003I\u0003I\u0003I\u0005I\u04f1\nI\u0003", "I\u0003I\u0003I\u0005I\u04f6\nI\u0003I\u0003I\u0003I\u0005I\u04fb\n", "I\u0003I\u0003I\u0003I\u0005I\u0500\nI\u0003I\u0005I\u0503\nI\u0003", "J\u0003J\u0005J\u0507\nJ\u0003J\u0003J\u0005J\u050b\nJ\u0003J\u0003", "J\u0003K\u0003K\u0005K\u0511\nK\u0003K\u0006K\u0514\nK\rK\u000eK\u0515", "\u0003L\u0003L\u0005L\u051a\nL\u0003L\u0005L\u051d\nL\u0003M\u0003M", "\u0003M\u0003M\u0003M\u0003M\u0003N\u0003N\u0005N\u0527\nN\u0003N\u0003", "N\u0005N\u052b\nN\u0003N\u0003N\u0005N\u052f\nN\u0005N\u0531\nN\u0003", "N\u0003N\u0005N\u0535\nN\u0003N\u0003N\u0005N\u0539\nN\u0003N\u0003", "N\u0005N\u053d\nN\u0007N\u053f\nN\fN\u000eN\u0542\u000bN\u0005N\u0544", "\nN\u0003N\u0003N\u0003O\u0003O\u0003O\u0003O\u0005O\u054c\nO\u0003", "P\u0003P\u0005P\u0550\nP\u0003P\u0003P\u0005P\u0554\nP\u0003P\u0003", "P\u0005P\u0558\nP\u0003P\u0003P\u0005P\u055c\nP\u0003P\u0003P\u0005", "P\u0560\nP\u0007P\u0562\nP\fP\u000eP\u0565\u000bP\u0005P\u0567\nP\u0003", "P\u0003P\u0003Q\u0003Q\u0003R\u0003R\u0003S\u0003S\u0003S\u0003T\u0003", "T\u0003T\u0007T\u0575\nT\fT\u000eT\u0578\u000bT\u0003U\u0003U\u0005", "U\u057c\nU\u0003U\u0003U\u0005U\u0580\nU\u0003U\u0003U\u0005U\u0584", "\nU\u0003U\u0005U\u0587\nU\u0003U\u0005U\u058a\nU\u0003U\u0003U\u0003", "V\u0003V\u0005V\u0590\nV\u0003V\u0003V\u0005V\u0594\nV\u0003V\u0003", "V\u0005V\u0598\nV\u0005V\u059a\nV\u0003V\u0003V\u0005V\u059e\nV\u0003", "V\u0003V\u0005V\u05a2\nV\u0003V\u0003V\u0005V\u05a6\nV\u0005V\u05a8", "\nV\u0003V\u0003V\u0005V\u05ac\nV\u0003V\u0003V\u0005V\u05b0\nV\u0003", "V\u0003V\u0003W\u0003W\u0005W\u05b6\nW\u0003W\u0003W\u0003X\u0003X\u0005", "X\u05bc\nX\u0003X\u0006X\u05bf\nX\rX\u000eX\u05c0\u0003X\u0003X\u0005", "X\u05c5\nX\u0003X\u0003X\u0005X\u05c9\nX\u0003X\u0006X\u05cc\nX\rX\u000e", "X\u05cd\u0005X\u05d0\nX\u0003X\u0005X\u05d3\nX\u0003X\u0003X\u0005X", "\u05d7\nX\u0003X\u0005X\u05da\nX\u0003X\u0005X\u05dd\nX\u0003X\u0003", "X\u0003Y\u0003Y\u0005Y\u05e3\nY\u0003Y\u0003Y\u0005Y\u05e7\nY\u0003", "Y\u0003Y\u0005Y\u05eb\nY\u0003Y\u0003Y\u0003Z\u0003Z\u0003[\u0003[\u0005", "[\u05f3\n[\u0003\\\u0003\\\u0005\\\u05f7\n\\\u0003\\\u0003\\\u0005\\", "\u05fb\n\\\u0003\\\u0003\\\u0005\\\u05ff\n\\\u0003\\\u0003\\\u0005\\", "\u0603\n\\\u0003\\\u0003\\\u0005\\\u0607\n\\\u0003\\\u0003\\\u0005\\", "\u060b\n\\\u0003\\\u0003\\\u0005\\\u060f\n\\\u0003\\\u0003\\\u0005\\", "\u0613\n\\\u0007\\\u0615\n\\\f\\\u000e\\\u0618\u000b\\\u0005\\\u061a", "\n\\\u0003\\\u0003\\\u0003]\u0003]\u0003]\u0005]\u0621\n]\u0003^\u0003", "^\u0005^\u0625\n^\u0003^\u0006^\u0628\n^\r^\u000e^\u0629\u0003_\u0003", "_\u0003`\u0003`\u0003a\u0003a\u0003b\u0003b\u0005b\u0634\nb\u0003c\u0003", "c\u0003d\u0003d\u0003e\u0003e\u0003f\u0003f\u0003g\u0003g\u0003g\u0002", "\u0002h\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018", "\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|", "~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094", "\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac", "\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4", "\u00c6\u00c8\u00ca\u00cc\u0002\f\u0003\u0002FI\u0003\u0002\u000f\u0010", "\u0003\u0002[\\\u0003\u0002eg\u0003\u0002op\u0006\u00020<?T[bqz\u0006", "\u0002WZhh{}\u0080\u0080\u0004\u0002\u0015\u0015\u001d \u0004\u0002", "\u0016\u0016!$\u0004\u0002\u0010\u0010%/\u0002\u0721\u0002\u00cf\u0003", "\u0002\u0002\u0002\u0004\u00dd\u0003\u0002\u0002\u0002\u0006\u00e1\u0003", "\u0002\u0002\u0002\b\u00e3\u0003\u0002\u0002\u0002\n\u00f9\u0003\u0002", "\u0002\u0002\f\u00fd\u0003\u0002\u0002\u0002\u000e\u0122\u0003\u0002", "\u0002\u0002\u0010\u013a\u0003\u0002\u0002\u0002\u0012\u0145\u0003\u0002", "\u0002\u0002\u0014\u014a\u0003\u0002\u0002\u0002\u0016\u014e\u0003\u0002", "\u0002\u0002\u0018\u015b\u0003\u0002\u0002\u0002\u001a\u0165\u0003\u0002", "\u0002\u0002\u001c\u017b\u0003\u0002\u0002\u0002\u001e\u017d\u0003\u0002", "\u0002\u0002 \u0183\u0003\u0002\u0002\u0002\"\u01b3\u0003\u0002\u0002", "\u0002$\u01b7\u0003\u0002\u0002\u0002&\u01cb\u0003\u0002\u0002\u0002", "(\u01df\u0003\u0002\u0002\u0002*\u01e1\u0003\u0002\u0002\u0002,\u01ec", "\u0003\u0002\u0002\u0002.\u0207\u0003\u0002\u0002\u00020\u0214\u0003", "\u0002\u0002\u00022\u0218\u0003\u0002\u0002\u00024\u0220\u0003\u0002", "\u0002\u00026\u0227\u0003\u0002\u0002\u00028\u0253\u0003\u0002\u0002", "\u0002:\u025c\u0003\u0002\u0002\u0002<\u025e\u0003\u0002\u0002\u0002", ">\u026d\u0003\u0002\u0002\u0002@\u0271\u0003\u0002\u0002\u0002B\u0275", "\u0003\u0002\u0002\u0002D\u027c\u0003\u0002\u0002\u0002F\u0280\u0003", "\u0002\u0002\u0002H\u0299\u0003\u0002\u0002\u0002J\u029d\u0003\u0002", "\u0002\u0002L\u02ad\u0003\u0002\u0002\u0002N\u02af\u0003\u0002\u0002", "\u0002P\u02c7\u0003\u0002\u0002\u0002R\u030d\u0003\u0002\u0002\u0002", "T\u030f\u0003\u0002\u0002\u0002V\u032c\u0003\u0002\u0002\u0002X\u032e", "\u0003\u0002\u0002\u0002Z\u0343\u0003\u0002\u0002\u0002\\\u034d\u0003", "\u0002\u0002\u0002^\u0353\u0003\u0002\u0002\u0002`\u0369\u0003\u0002", "\u0002\u0002b\u036b\u0003\u0002\u0002\u0002d\u036d\u0003\u0002\u0002", "\u0002f\u036f\u0003\u0002\u0002\u0002h\u0379\u0003\u0002\u0002\u0002", "j\u0383\u0003\u0002\u0002\u0002l\u0393\u0003\u0002\u0002\u0002n\u0398", "\u0003\u0002\u0002\u0002p\u03a2\u0003\u0002\u0002\u0002r\u03b8\u0003", "\u0002\u0002\u0002t\u03d6\u0003\u0002\u0002\u0002v\u03ea\u0003\u0002", "\u0002\u0002x\u03ef\u0003\u0002\u0002\u0002z\u0411\u0003\u0002\u0002", "\u0002|\u041d\u0003\u0002\u0002\u0002~\u042e\u0003\u0002\u0002\u0002", "\u0080\u0430\u0003\u0002\u0002\u0002\u0082\u045c\u0003\u0002\u0002\u0002", "\u0084\u045e\u0003\u0002\u0002\u0002\u0086\u0460\u0003\u0002\u0002\u0002", "\u0088\u04bf\u0003\u0002\u0002\u0002\u008a\u04c7\u0003\u0002\u0002\u0002", "\u008c\u04c9\u0003\u0002\u0002\u0002\u008e\u04cb\u0003\u0002\u0002\u0002", "\u0090\u0502\u0003\u0002\u0002\u0002\u0092\u0504\u0003\u0002\u0002\u0002", "\u0094\u050e\u0003\u0002\u0002\u0002\u0096\u0517\u0003\u0002\u0002\u0002", "\u0098\u051e\u0003\u0002\u0002\u0002\u009a\u0524\u0003\u0002\u0002\u0002", "\u009c\u054b\u0003\u0002\u0002\u0002\u009e\u054d\u0003\u0002\u0002\u0002", "\u00a0\u056a\u0003\u0002\u0002\u0002\u00a2\u056c\u0003\u0002\u0002\u0002", "\u00a4\u056e\u0003\u0002\u0002\u0002\u00a6\u0576\u0003\u0002\u0002\u0002", "\u00a8\u0579\u0003\u0002\u0002\u0002\u00aa\u058d\u0003\u0002\u0002\u0002", "\u00ac\u05b3\u0003\u0002\u0002\u0002\u00ae\u05cf\u0003\u0002\u0002\u0002", "\u00b0\u05e0\u0003\u0002\u0002\u0002\u00b2\u05ee\u0003\u0002\u0002\u0002", "\u00b4\u05f2\u0003\u0002\u0002\u0002\u00b6\u05f4\u0003\u0002\u0002\u0002", "\u00b8\u061d\u0003\u0002\u0002\u0002\u00ba\u0622\u0003\u0002\u0002\u0002", "\u00bc\u062b\u0003\u0002\u0002\u0002\u00be\u062d\u0003\u0002\u0002\u0002", "\u00c0\u062f\u0003\u0002\u0002\u0002\u00c2\u0633\u0003\u0002\u0002\u0002", "\u00c4\u0635\u0003\u0002\u0002\u0002\u00c6\u0637\u0003\u0002\u0002\u0002", "\u00c8\u0639\u0003\u0002\u0002\u0002\u00ca\u063b\u0003\u0002\u0002\u0002", "\u00cc\u063d\u0003\u0002\u0002\u0002\u00ce\u00d0\u0007\u0081\u0002\u0002", "\u00cf\u00ce\u0003\u0002\u0002\u0002\u00cf\u00d0\u0003\u0002\u0002\u0002", "\u00d0\u00d1\u0003\u0002\u0002\u0002\u00d1\u00d6\u0005\u0004\u0003\u0002", "\u00d2\u00d4\u0007\u0081\u0002\u0002\u00d3\u00d2\u0003\u0002\u0002\u0002", "\u00d3\u00d4\u0003\u0002\u0002\u0002\u00d4\u00d5\u0003\u0002\u0002\u0002", "\u00d5\u00d7\u0007\u0003\u0002\u0002\u00d6\u00d3\u0003\u0002\u0002\u0002", "\u00d6\u00d7\u0003\u0002\u0002\u0002\u00d7\u00d9\u0003\u0002\u0002\u0002", "\u00d8\u00da\u0007\u0081\u0002\u0002\u00d9\u00d8\u0003\u0002\u0002\u0002", "\u00d9\u00da\u0003\u0002\u0002\u0002\u00da\u00db\u0003\u0002\u0002\u0002", "\u00db\u00dc\u0007\u0002\u0002\u0003\u00dc\u0003\u0003\u0002\u0002\u0002", "\u00dd\u00de\u0005\u0006\u0004\u0002\u00de\u0005\u0003\u0002\u0002\u0002", "\u00df\u00e2\u0005\b\u0005\u0002\u00e0\u00e2\u0005,\u0017\u0002\u00e1", "\u00df\u0003\u0002\u0002\u0002\u00e1\u00e0\u0003\u0002\u0002\u0002\u00e2", "\u0007\u0003\u0002\u0002\u0002\u00e3\u00ea\u0005\f\u0007\u0002\u00e4", "\u00e6\u0007\u0081\u0002\u0002\u00e5\u00e4\u0003\u0002\u0002\u0002\u00e5", "\u00e6\u0003\u0002\u0002\u0002\u00e6\u00e7\u0003\u0002\u0002\u0002\u00e7", "\u00e9\u0005\n\u0006\u0002\u00e8\u00e5\u0003\u0002\u0002\u0002\u00e9", "\u00ec\u0003\u0002\u0002\u0002\u00ea\u00e8\u0003\u0002\u0002\u0002\u00ea", "\u00eb\u0003\u0002\u0002\u0002\u00eb\t\u0003\u0002\u0002\u0002\u00ec", "\u00ea\u0003\u0002\u0002\u0002\u00ed\u00ee\u00070\u0002\u0002\u00ee", "\u00ef\u0007\u0081\u0002\u0002\u00ef\u00f1\u00071\u0002\u0002\u00f0", "\u00f2\u0007\u0081\u0002\u0002\u00f1\u00f0\u0003\u0002\u0002\u0002\u00f1", "\u00f2\u0003\u0002\u0002\u0002\u00f2\u00f3\u0003\u0002\u0002\u0002\u00f3", "\u00fa\u0005\f\u0007\u0002\u00f4\u00f6\u00070\u0002\u0002\u00f5\u00f7", "\u0007\u0081\u0002\u0002\u00f6\u00f5\u0003\u0002\u0002\u0002\u00f6\u00f7", "\u0003\u0002\u0002\u0002\u00f7\u00f8\u0003\u0002\u0002\u0002\u00f8\u00fa", "\u0005\f\u0007\u0002\u00f9\u00ed\u0003\u0002\u0002\u0002\u00f9\u00f4", "\u0003\u0002\u0002\u0002\u00fa\u000b\u0003\u0002\u0002\u0002\u00fb\u00fe", "\u0005\u000e\b\u0002\u00fc\u00fe\u0005\u0010\t\u0002\u00fd\u00fb\u0003", "\u0002\u0002\u0002\u00fd\u00fc\u0003\u0002\u0002\u0002\u00fe\r\u0003", "\u0002\u0002\u0002\u00ff\u0101\u0005\u0014\u000b\u0002\u0100\u0102\u0007", "\u0081\u0002\u0002\u0101\u0100\u0003\u0002\u0002\u0002\u0101\u0102\u0003", "\u0002\u0002\u0002\u0102\u0104\u0003\u0002\u0002\u0002\u0103\u00ff\u0003", "\u0002\u0002\u0002\u0104\u0107\u0003\u0002\u0002\u0002\u0105\u0103\u0003", "\u0002\u0002\u0002\u0105\u0106\u0003\u0002\u0002\u0002\u0106\u0108\u0003", "\u0002\u0002\u0002\u0107\u0105\u0003\u0002\u0002\u0002\u0108\u0123\u0005", "4\u001b\u0002\u0109\u010b\u0005\u0014\u000b\u0002\u010a\u010c\u0007", "\u0081\u0002\u0002\u010b\u010a\u0003\u0002\u0002\u0002\u010b\u010c\u0003", "\u0002\u0002\u0002\u010c\u010e\u0003\u0002\u0002\u0002\u010d\u0109\u0003", "\u0002\u0002\u0002\u010e\u0111\u0003\u0002\u0002\u0002\u010f\u010d\u0003", "\u0002\u0002\u0002\u010f\u0110\u0003\u0002\u0002\u0002\u0110\u0112\u0003", "\u0002\u0002\u0002\u0111\u010f\u0003\u0002\u0002\u0002\u0112\u0119\u0005", "\u0012\n\u0002\u0113\u0115\u0007\u0081\u0002\u0002\u0114\u0113\u0003", "\u0002\u0002\u0002\u0114\u0115\u0003\u0002\u0002\u0002\u0115\u0116\u0003", "\u0002\u0002\u0002\u0116\u0118\u0005\u0012\n\u0002\u0117\u0114\u0003", "\u0002\u0002\u0002\u0118\u011b\u0003\u0002\u0002\u0002\u0119\u0117\u0003", "\u0002\u0002\u0002\u0119\u011a\u0003\u0002\u0002\u0002\u011a\u0120\u0003", "\u0002\u0002\u0002\u011b\u0119\u0003\u0002\u0002\u0002\u011c\u011e\u0007", "\u0081\u0002\u0002\u011d\u011c\u0003\u0002\u0002\u0002\u011d\u011e\u0003", "\u0002\u0002\u0002\u011e\u011f\u0003\u0002\u0002\u0002\u011f\u0121\u0005", "4\u001b\u0002\u0120\u011d\u0003\u0002\u0002\u0002\u0120\u0121\u0003", "\u0002\u0002\u0002\u0121\u0123\u0003\u0002\u0002\u0002\u0122\u0105\u0003", "\u0002\u0002\u0002\u0122\u010f\u0003\u0002\u0002\u0002\u0123\u000f\u0003", "\u0002\u0002\u0002\u0124\u0126\u0005\u0014\u000b\u0002\u0125\u0127\u0007", "\u0081\u0002\u0002\u0126\u0125\u0003\u0002\u0002\u0002\u0126\u0127\u0003", "\u0002\u0002\u0002\u0127\u0129\u0003\u0002\u0002\u0002\u0128\u0124\u0003", "\u0002\u0002\u0002\u0129\u012c\u0003\u0002\u0002\u0002\u012a\u0128\u0003", "\u0002\u0002\u0002\u012a\u012b\u0003\u0002\u0002\u0002\u012b\u0133\u0003", "\u0002\u0002\u0002\u012c\u012a\u0003\u0002\u0002\u0002\u012d\u012f\u0005", "\u0012\n\u0002\u012e\u0130\u0007\u0081\u0002\u0002\u012f\u012e\u0003", "\u0002\u0002\u0002\u012f\u0130\u0003\u0002\u0002\u0002\u0130\u0132\u0003", "\u0002\u0002\u0002\u0131\u012d\u0003\u0002\u0002\u0002\u0132\u0135\u0003", "\u0002\u0002\u0002\u0133\u0131\u0003\u0002\u0002\u0002\u0133\u0134\u0003", "\u0002\u0002\u0002\u0134\u0136\u0003\u0002\u0002\u0002\u0135\u0133\u0003", "\u0002\u0002\u0002\u0136\u0138\u00052\u001a\u0002\u0137\u0139\u0007", "\u0081\u0002\u0002\u0138\u0137\u0003\u0002\u0002\u0002\u0138\u0139\u0003", "\u0002\u0002\u0002\u0139\u013b\u0003\u0002\u0002\u0002\u013a\u012a\u0003", "\u0002\u0002\u0002\u013b\u013c\u0003\u0002\u0002\u0002\u013c\u013a\u0003", "\u0002\u0002\u0002\u013c\u013d\u0003\u0002\u0002\u0002\u013d\u013e\u0003", "\u0002\u0002\u0002\u013e\u013f\u0005\u000e\b\u0002\u013f\u0011\u0003", "\u0002\u0002\u0002\u0140\u0146\u0005\u001e\u0010\u0002\u0141\u0146\u0005", "\u001a\u000e\u0002\u0142\u0146\u0005$\u0013\u0002\u0143\u0146\u0005", " \u0011\u0002\u0144\u0146\u0005&\u0014\u0002\u0145\u0140\u0003\u0002", "\u0002\u0002\u0145\u0141\u0003\u0002\u0002\u0002\u0145\u0142\u0003\u0002", "\u0002\u0002\u0145\u0143\u0003\u0002\u0002\u0002\u0145\u0144\u0003\u0002", "\u0002\u0002\u0146\u0013\u0003\u0002\u0002\u0002\u0147\u014b\u0005\u0016", "\f\u0002\u0148\u014b\u0005\u0018\r\u0002\u0149\u014b\u0005*\u0016\u0002", "\u014a\u0147\u0003\u0002\u0002\u0002\u014a\u0148\u0003\u0002\u0002\u0002", "\u014a\u0149\u0003\u0002\u0002\u0002\u014b\u0015\u0003\u0002\u0002\u0002", "\u014c\u014d\u00072\u0002\u0002\u014d\u014f\u0007\u0081\u0002\u0002", "\u014e\u014c\u0003\u0002\u0002\u0002\u014e\u014f\u0003\u0002\u0002\u0002", "\u014f\u0150\u0003\u0002\u0002\u0002\u0150\u0152\u00073\u0002\u0002", "\u0151\u0153\u0007\u0081\u0002\u0002\u0152\u0151\u0003\u0002\u0002\u0002", "\u0152\u0153\u0003\u0002\u0002\u0002\u0153\u0154\u0003\u0002\u0002\u0002", "\u0154\u0159\u0005F$\u0002\u0155\u0157\u0007\u0081\u0002\u0002\u0156", "\u0155\u0003\u0002\u0002\u0002\u0156\u0157\u0003\u0002\u0002\u0002\u0157", "\u0158\u0003\u0002\u0002\u0002\u0158\u015a\u0005D#\u0002\u0159\u0156", "\u0003\u0002\u0002\u0002\u0159\u015a\u0003\u0002\u0002\u0002\u015a\u0017", "\u0003\u0002\u0002\u0002\u015b\u015d\u00074\u0002\u0002\u015c\u015e", "\u0007\u0081\u0002\u0002\u015d\u015c\u0003\u0002\u0002\u0002\u015d\u015e", "\u0003\u0002\u0002\u0002\u015e\u015f\u0003\u0002\u0002\u0002\u015f\u0160", "\u0005d3\u0002\u0160\u0161\u0007\u0081\u0002\u0002\u0161\u0162\u0007", "5\u0002\u0002\u0162\u0163\u0007\u0081\u0002\u0002\u0163\u0164\u0005", "\u00b2Z\u0002\u0164\u0019\u0003\u0002\u0002\u0002\u0165\u0167\u0007", "6\u0002\u0002\u0166\u0168\u0007\u0081\u0002\u0002\u0167\u0166\u0003", "\u0002\u0002\u0002\u0167\u0168\u0003\u0002\u0002\u0002\u0168\u0169\u0003", "\u0002\u0002\u0002\u0169\u016e\u0005H%\u0002\u016a\u016b\u0007\u0081", "\u0002\u0002\u016b\u016d\u0005\u001c\u000f\u0002\u016c\u016a\u0003\u0002", "\u0002\u0002\u016d\u0170\u0003\u0002\u0002\u0002\u016e\u016c\u0003\u0002", "\u0002\u0002\u016e\u016f\u0003\u0002\u0002\u0002\u016f\u001b\u0003\u0002", "\u0002\u0002\u0170\u016e\u0003\u0002\u0002\u0002\u0171\u0172\u00077", "\u0002\u0002\u0172\u0173\u0007\u0081\u0002\u0002\u0173\u0174\u00073", "\u0002\u0002\u0174\u0175\u0007\u0081\u0002\u0002\u0175\u017c\u0005 ", "\u0011\u0002\u0176\u0177\u00077\u0002\u0002\u0177\u0178\u0007\u0081", "\u0002\u0002\u0178\u0179\u00078\u0002\u0002\u0179\u017a\u0007\u0081", "\u0002\u0002\u017a\u017c\u0005 \u0011\u0002\u017b\u0171\u0003\u0002", "\u0002\u0002\u017b\u0176\u0003\u0002\u0002\u0002\u017c\u001d\u0003\u0002", "\u0002\u0002\u017d\u017f\u00078\u0002\u0002\u017e\u0180\u0007\u0081", "\u0002\u0002\u017f\u017e\u0003\u0002\u0002\u0002\u017f\u0180\u0003\u0002", "\u0002\u0002\u0180\u0181\u0003\u0002\u0002\u0002\u0181\u0182\u0005F", "$\u0002\u0182\u001f\u0003\u0002\u0002\u0002\u0183\u0185\u00079\u0002", "\u0002\u0184\u0186\u0007\u0081\u0002\u0002\u0185\u0184\u0003\u0002\u0002", "\u0002\u0185\u0186\u0003\u0002\u0002\u0002\u0186\u0187\u0003\u0002\u0002", "\u0002\u0187\u018c\u0005\"\u0012\u0002\u0188\u0189\u0007\u0004\u0002", "\u0002\u0189\u018b\u0005\"\u0012\u0002\u018a\u0188\u0003\u0002\u0002", "\u0002\u018b\u018e\u0003\u0002\u0002\u0002\u018c\u018a\u0003\u0002\u0002", "\u0002\u018c\u018d\u0003\u0002\u0002\u0002\u018d!\u0003\u0002\u0002", "\u0002\u018e\u018c\u0003\u0002\u0002\u0002\u018f\u0191\u0005\u00ba^", "\u0002\u0190\u0192\u0007\u0081\u0002\u0002\u0191\u0190\u0003\u0002\u0002", "\u0002\u0191\u0192\u0003\u0002\u0002\u0002\u0192\u0193\u0003\u0002\u0002", "\u0002\u0193\u0195\u0007\u0005\u0002\u0002\u0194\u0196\u0007\u0081\u0002", "\u0002\u0195\u0194\u0003\u0002\u0002\u0002\u0195\u0196\u0003\u0002\u0002", "\u0002\u0196\u0197\u0003\u0002\u0002\u0002\u0197\u0198\u0005d3\u0002", "\u0198\u01b4\u0003\u0002\u0002\u0002\u0199\u019b\u0005\u00b2Z\u0002", "\u019a\u019c\u0007\u0081\u0002\u0002\u019b\u019a\u0003\u0002\u0002\u0002", "\u019b\u019c\u0003\u0002\u0002\u0002\u019c\u019d\u0003\u0002\u0002\u0002", "\u019d\u019f\u0007\u0005\u0002\u0002\u019e\u01a0\u0007\u0081\u0002\u0002", "\u019f\u019e\u0003\u0002\u0002\u0002\u019f\u01a0\u0003\u0002\u0002\u0002", "\u01a0\u01a1\u0003\u0002\u0002\u0002\u01a1\u01a2\u0005d3\u0002\u01a2", "\u01b4\u0003\u0002\u0002\u0002\u01a3\u01a5\u0005\u00b2Z\u0002\u01a4", "\u01a6\u0007\u0081\u0002\u0002\u01a5\u01a4\u0003\u0002\u0002\u0002\u01a5", "\u01a6\u0003\u0002\u0002\u0002\u01a6\u01a7\u0003\u0002\u0002\u0002\u01a7", "\u01a9\u0007\u0006\u0002\u0002\u01a8\u01aa\u0007\u0081\u0002\u0002\u01a9", "\u01a8\u0003\u0002\u0002\u0002\u01a9\u01aa\u0003\u0002\u0002\u0002\u01aa", "\u01ab\u0003\u0002\u0002\u0002\u01ab\u01ac\u0005d3\u0002\u01ac\u01b4", "\u0003\u0002\u0002\u0002\u01ad\u01af\u0005\u00b2Z\u0002\u01ae\u01b0", "\u0007\u0081\u0002\u0002\u01af\u01ae\u0003\u0002\u0002\u0002\u01af\u01b0", "\u0003\u0002\u0002\u0002\u01b0\u01b1\u0003\u0002\u0002\u0002\u01b1\u01b2", "\u0005Z.\u0002\u01b2\u01b4\u0003\u0002\u0002\u0002\u01b3\u018f\u0003", "\u0002\u0002\u0002\u01b3\u0199\u0003\u0002\u0002\u0002\u01b3\u01a3\u0003", "\u0002\u0002\u0002\u01b3\u01ad\u0003\u0002\u0002\u0002\u01b4#\u0003", "\u0002\u0002\u0002\u01b5\u01b6\u0007:\u0002\u0002\u01b6\u01b8\u0007", "\u0081\u0002\u0002\u01b7\u01b5\u0003\u0002\u0002\u0002\u01b7\u01b8\u0003", "\u0002\u0002\u0002\u01b8\u01b9\u0003\u0002\u0002\u0002\u01b9\u01bb\u0007", ";\u0002\u0002\u01ba\u01bc\u0007\u0081\u0002\u0002\u01bb\u01ba\u0003", "\u0002\u0002\u0002\u01bb\u01bc\u0003\u0002\u0002\u0002\u01bc\u01bd\u0003", "\u0002\u0002\u0002\u01bd\u01c8\u0005d3\u0002\u01be\u01c0\u0007\u0081", "\u0002\u0002\u01bf\u01be\u0003\u0002\u0002\u0002\u01bf\u01c0\u0003\u0002", "\u0002\u0002\u01c0\u01c1\u0003\u0002\u0002\u0002\u01c1\u01c3\u0007\u0004", "\u0002\u0002\u01c2\u01c4\u0007\u0081\u0002\u0002\u01c3\u01c2\u0003\u0002", "\u0002\u0002\u01c3\u01c4\u0003\u0002\u0002\u0002\u01c4\u01c5\u0003\u0002", "\u0002\u0002\u01c5\u01c7\u0005d3\u0002\u01c6\u01bf\u0003\u0002\u0002", "\u0002\u01c7\u01ca\u0003\u0002\u0002\u0002\u01c8\u01c6\u0003\u0002\u0002", "\u0002\u01c8\u01c9\u0003\u0002\u0002\u0002\u01c9%\u0003\u0002\u0002", "\u0002\u01ca\u01c8\u0003\u0002\u0002\u0002\u01cb\u01cc\u0007<\u0002", "\u0002\u01cc\u01cd\u0007\u0081\u0002\u0002\u01cd\u01d8\u0005(\u0015", "\u0002\u01ce\u01d0\u0007\u0081\u0002\u0002\u01cf\u01ce\u0003\u0002\u0002", "\u0002\u01cf\u01d0\u0003\u0002\u0002\u0002\u01d0\u01d1\u0003\u0002\u0002", "\u0002\u01d1\u01d3\u0007\u0004\u0002\u0002\u01d2\u01d4\u0007\u0081\u0002", "\u0002\u01d3\u01d2\u0003\u0002\u0002\u0002\u01d3\u01d4\u0003\u0002\u0002", "\u0002\u01d4\u01d5\u0003\u0002\u0002\u0002\u01d5\u01d7\u0005(\u0015", "\u0002\u01d6\u01cf\u0003\u0002\u0002\u0002\u01d7\u01da\u0003\u0002\u0002", "\u0002\u01d8\u01d6\u0003\u0002\u0002\u0002\u01d8\u01d9\u0003\u0002\u0002", "\u0002\u01d9\'\u0003\u0002\u0002\u0002\u01da\u01d8\u0003\u0002\u0002", "\u0002\u01db\u01dc\u0005\u00b2Z\u0002\u01dc\u01dd\u0005Z.\u0002\u01dd", "\u01e0\u0003\u0002\u0002\u0002\u01de\u01e0\u0005\u00ba^\u0002\u01df", "\u01db\u0003\u0002\u0002\u0002\u01df\u01de\u0003\u0002\u0002\u0002\u01e0", ")\u0003\u0002\u0002\u0002\u01e1\u01e2\u0007=\u0002\u0002\u01e2\u01e3", "\u0007\u0081\u0002\u0002\u01e3\u01ea\u0005\u009eP\u0002\u01e4\u01e6", "\u0007\u0081\u0002\u0002\u01e5\u01e4\u0003\u0002\u0002\u0002\u01e5\u01e6", "\u0003\u0002\u0002\u0002\u01e6\u01e7\u0003\u0002\u0002\u0002\u01e7\u01e8", "\u0007>\u0002\u0002\u01e8\u01e9\u0007\u0081\u0002\u0002\u01e9\u01eb", "\u0005.\u0018\u0002\u01ea\u01e5\u0003\u0002\u0002\u0002\u01ea\u01eb", "\u0003\u0002\u0002\u0002\u01eb+\u0003\u0002\u0002\u0002\u01ec\u01ed", "\u0007=\u0002\u0002\u01ed\u01f0\u0007\u0081\u0002\u0002\u01ee\u01f1", "\u0005\u009eP\u0002\u01ef\u01f1\u0005\u00a0Q\u0002\u01f0\u01ee\u0003", "\u0002\u0002\u0002\u01f0\u01ef\u0003\u0002\u0002\u0002\u01f1\u01f6\u0003", "\u0002\u0002\u0002\u01f2\u01f3\u0007\u0081\u0002\u0002\u01f3\u01f4\u0007", ">\u0002\u0002\u01f4\u01f5\u0007\u0081\u0002\u0002\u01f5\u01f7\u0005", ".\u0018\u0002\u01f6\u01f2\u0003\u0002\u0002\u0002\u01f6\u01f7\u0003", "\u0002\u0002\u0002\u01f7-\u0003\u0002\u0002\u0002\u01f8\u0208\u0007", "\u0007\u0002\u0002\u01f9\u0204\u00050\u0019\u0002\u01fa\u01fc\u0007", "\u0081\u0002\u0002\u01fb\u01fa\u0003\u0002\u0002\u0002\u01fb\u01fc\u0003", "\u0002\u0002\u0002\u01fc\u01fd\u0003\u0002\u0002\u0002\u01fd\u01ff\u0007", "\u0004\u0002\u0002\u01fe\u0200\u0007\u0081\u0002\u0002\u01ff\u01fe\u0003", "\u0002\u0002\u0002\u01ff\u0200\u0003\u0002\u0002\u0002\u0200\u0201\u0003", "\u0002\u0002\u0002\u0201\u0203\u00050\u0019\u0002\u0202\u01fb\u0003", "\u0002\u0002\u0002\u0203\u0206\u0003\u0002\u0002\u0002\u0204\u0202\u0003", "\u0002\u0002\u0002\u0204\u0205\u0003\u0002\u0002\u0002\u0205\u0208\u0003", "\u0002\u0002\u0002\u0206\u0204\u0003\u0002\u0002\u0002\u0207\u01f8\u0003", "\u0002\u0002\u0002\u0207\u01f9\u0003\u0002\u0002\u0002\u0208\u020d\u0003", "\u0002\u0002\u0002\u0209\u020b\u0007\u0081\u0002\u0002\u020a\u0209\u0003", "\u0002\u0002\u0002\u020a\u020b\u0003\u0002\u0002\u0002\u020b\u020c\u0003", "\u0002\u0002\u0002\u020c\u020e\u0005D#\u0002\u020d\u020a\u0003\u0002", "\u0002\u0002\u020d\u020e\u0003\u0002\u0002\u0002\u020e/\u0003\u0002", "\u0002\u0002\u020f\u0210\u0005\u00a2R\u0002\u0210\u0211\u0007\u0081", "\u0002\u0002\u0211\u0212\u00075\u0002\u0002\u0212\u0213\u0007\u0081", "\u0002\u0002\u0213\u0215\u0003\u0002\u0002\u0002\u0214\u020f\u0003\u0002", "\u0002\u0002\u0214\u0215\u0003\u0002\u0002\u0002\u0215\u0216\u0003\u0002", "\u0002\u0002\u0216\u0217\u0005\u00b2Z\u0002\u02171\u0003\u0002\u0002", "\u0002\u0218\u0219\u0007?\u0002\u0002\u0219\u021e\u00056\u001c\u0002", "\u021a\u021c\u0007\u0081\u0002\u0002\u021b\u021a\u0003\u0002\u0002\u0002", "\u021b\u021c\u0003\u0002\u0002\u0002\u021c\u021d\u0003\u0002\u0002\u0002", "\u021d\u021f\u0005D#\u0002\u021e\u021b\u0003\u0002\u0002\u0002\u021e", "\u021f\u0003\u0002\u0002\u0002\u021f3\u0003\u0002\u0002\u0002\u0220", "\u0221\u0007@\u0002\u0002\u0221\u0222\u00056\u001c\u0002\u02225\u0003", "\u0002\u0002\u0002\u0223\u0225\u0007\u0081\u0002\u0002\u0224\u0223\u0003", "\u0002\u0002\u0002\u0224\u0225\u0003\u0002\u0002\u0002\u0225\u0226\u0003", "\u0002\u0002\u0002\u0226\u0228\u0007A\u0002\u0002\u0227\u0224\u0003", "\u0002\u0002\u0002\u0227\u0228\u0003\u0002\u0002\u0002\u0228\u0229\u0003", "\u0002\u0002\u0002\u0229\u022a\u0007\u0081\u0002\u0002\u022a\u022d\u0005", "8\u001d\u0002\u022b\u022c\u0007\u0081\u0002\u0002\u022c\u022e\u0005", "<\u001f\u0002\u022d\u022b\u0003\u0002\u0002\u0002\u022d\u022e\u0003", "\u0002\u0002\u0002\u022e\u0231\u0003\u0002\u0002\u0002\u022f\u0230\u0007", "\u0081\u0002\u0002\u0230\u0232\u0005> \u0002\u0231\u022f\u0003\u0002", "\u0002\u0002\u0231\u0232\u0003\u0002\u0002\u0002\u0232\u0235\u0003\u0002", "\u0002\u0002\u0233\u0234\u0007\u0081\u0002\u0002\u0234\u0236\u0005@", "!\u0002\u0235\u0233\u0003\u0002\u0002\u0002\u0235\u0236\u0003\u0002", "\u0002\u0002\u02367\u0003\u0002\u0002\u0002\u0237\u0242\u0007\u0007", "\u0002\u0002\u0238\u023a\u0007\u0081\u0002\u0002\u0239\u0238\u0003\u0002", "\u0002\u0002\u0239\u023a\u0003\u0002\u0002\u0002\u023a\u023b\u0003\u0002", "\u0002\u0002\u023b\u023d\u0007\u0004\u0002\u0002\u023c\u023e\u0007\u0081", "\u0002\u0002\u023d\u023c\u0003\u0002\u0002\u0002\u023d\u023e\u0003\u0002", "\u0002\u0002\u023e\u023f\u0003\u0002\u0002\u0002\u023f\u0241\u0005:", "\u001e\u0002\u0240\u0239\u0003\u0002\u0002\u0002\u0241\u0244\u0003\u0002", "\u0002\u0002\u0242\u0240\u0003\u0002\u0002\u0002\u0242\u0243\u0003\u0002", "\u0002\u0002\u0243\u0254\u0003\u0002\u0002\u0002\u0244\u0242\u0003\u0002", "\u0002\u0002\u0245\u0250\u0005:\u001e\u0002\u0246\u0248\u0007\u0081", "\u0002\u0002\u0247\u0246\u0003\u0002\u0002\u0002\u0247\u0248\u0003\u0002", "\u0002\u0002\u0248\u0249\u0003\u0002\u0002\u0002\u0249\u024b\u0007\u0004", "\u0002\u0002\u024a\u024c\u0007\u0081\u0002\u0002\u024b\u024a\u0003\u0002", "\u0002\u0002\u024b\u024c\u0003\u0002\u0002\u0002\u024c\u024d\u0003\u0002", "\u0002\u0002\u024d\u024f\u0005:\u001e\u0002\u024e\u0247\u0003\u0002", "\u0002\u0002\u024f\u0252\u0003\u0002\u0002\u0002\u0250\u024e\u0003\u0002", "\u0002\u0002\u0250\u0251\u0003\u0002\u0002\u0002\u0251\u0254\u0003\u0002", "\u0002\u0002\u0252\u0250\u0003\u0002\u0002\u0002\u0253\u0237\u0003\u0002", "\u0002\u0002\u0253\u0245\u0003\u0002\u0002\u0002\u02549\u0003\u0002", "\u0002\u0002\u0255\u0256\u0005d3\u0002\u0256\u0257\u0007\u0081\u0002", "\u0002\u0257\u0258\u00075\u0002\u0002\u0258\u0259\u0007\u0081\u0002", "\u0002\u0259\u025a\u0005\u00b2Z\u0002\u025a\u025d\u0003\u0002\u0002", "\u0002\u025b\u025d\u0005d3\u0002\u025c\u0255\u0003\u0002\u0002\u0002", "\u025c\u025b\u0003\u0002\u0002\u0002\u025d;\u0003\u0002\u0002\u0002", "\u025e\u025f\u0007B\u0002\u0002\u025f\u0260\u0007\u0081\u0002\u0002", "\u0260\u0261\u0007C\u0002\u0002\u0261\u0262\u0007\u0081\u0002\u0002", "\u0262\u026a\u0005B\"\u0002\u0263\u0265\u0007\u0004\u0002\u0002\u0264", "\u0266\u0007\u0081\u0002\u0002\u0265\u0264\u0003\u0002\u0002\u0002\u0265", "\u0266\u0003\u0002\u0002\u0002\u0266\u0267\u0003\u0002\u0002\u0002\u0267", "\u0269\u0005B\"\u0002\u0268\u0263\u0003\u0002\u0002\u0002\u0269\u026c", "\u0003\u0002\u0002\u0002\u026a\u0268\u0003\u0002\u0002\u0002\u026a\u026b", "\u0003\u0002\u0002\u0002\u026b=\u0003\u0002\u0002\u0002\u026c\u026a", "\u0003\u0002\u0002\u0002\u026d\u026e\u0007D\u0002\u0002\u026e\u026f", "\u0007\u0081\u0002\u0002\u026f\u0270\u0005d3\u0002\u0270?\u0003\u0002", "\u0002\u0002\u0271\u0272\u0007E\u0002\u0002\u0272\u0273\u0007\u0081", "\u0002\u0002\u0273\u0274\u0005d3\u0002\u0274A\u0003\u0002\u0002\u0002", "\u0275\u027a\u0005d3\u0002\u0276\u0278\u0007\u0081\u0002\u0002\u0277", "\u0276\u0003\u0002\u0002\u0002\u0277\u0278\u0003\u0002\u0002\u0002\u0278", "\u0279\u0003\u0002\u0002\u0002\u0279\u027b\t\u0002\u0002\u0002\u027a", "\u0277\u0003\u0002\u0002\u0002\u027a\u027b\u0003\u0002\u0002\u0002\u027b", "C\u0003\u0002\u0002\u0002\u027c\u027d\u0007J\u0002\u0002\u027d\u027e", "\u0007\u0081\u0002\u0002\u027e\u027f\u0005d3\u0002\u027fE\u0003\u0002", "\u0002\u0002\u0280\u028b\u0005H%\u0002\u0281\u0283\u0007\u0081\u0002", "\u0002\u0282\u0281\u0003\u0002\u0002\u0002\u0282\u0283\u0003\u0002\u0002", "\u0002\u0283\u0284\u0003\u0002\u0002\u0002\u0284\u0286\u0007\u0004\u0002", "\u0002\u0285\u0287\u0007\u0081\u0002\u0002\u0286\u0285\u0003\u0002\u0002", "\u0002\u0286\u0287\u0003\u0002\u0002\u0002\u0287\u0288\u0003\u0002\u0002", "\u0002\u0288\u028a\u0005H%\u0002\u0289\u0282\u0003\u0002\u0002\u0002", "\u028a\u028d\u0003\u0002\u0002\u0002\u028b\u0289\u0003\u0002\u0002\u0002", "\u028b\u028c\u0003\u0002\u0002\u0002\u028cG\u0003\u0002\u0002\u0002", "\u028d\u028b\u0003\u0002\u0002\u0002\u028e\u0290\u0005\u00b2Z\u0002", "\u028f\u0291\u0007\u0081\u0002\u0002\u0290\u028f\u0003\u0002\u0002\u0002", "\u0290\u0291\u0003\u0002\u0002\u0002\u0291\u0292\u0003\u0002\u0002\u0002", "\u0292\u0294\u0007\u0005\u0002\u0002\u0293\u0295\u0007\u0081\u0002\u0002", "\u0294\u0293\u0003\u0002\u0002\u0002\u0294\u0295\u0003\u0002\u0002\u0002", "\u0295\u0296\u0003\u0002\u0002\u0002\u0296\u0297\u0005J&\u0002\u0297", "\u029a\u0003\u0002\u0002\u0002\u0298\u029a\u0005J&\u0002\u0299\u028e", "\u0003\u0002\u0002\u0002\u0299\u0298\u0003\u0002\u0002\u0002\u029aI", "\u0003\u0002\u0002\u0002\u029b\u029e\u0005\u0082B\u0002\u029c\u029e", "\u0005L\'\u0002\u029d\u029b\u0003\u0002\u0002\u0002\u029d\u029c\u0003", "\u0002\u0002\u0002\u029eK\u0003\u0002\u0002\u0002\u029f\u02a6\u0005", "N(\u0002\u02a0\u02a2\u0007\u0081\u0002\u0002\u02a1\u02a0\u0003\u0002", "\u0002\u0002\u02a1\u02a2\u0003\u0002\u0002\u0002\u02a2\u02a3\u0003\u0002", "\u0002\u0002\u02a3\u02a5\u0005P)\u0002\u02a4\u02a1\u0003\u0002\u0002", "\u0002\u02a5\u02a8\u0003\u0002\u0002\u0002\u02a6\u02a4\u0003\u0002\u0002", "\u0002\u02a6\u02a7\u0003\u0002\u0002\u0002\u02a7\u02ae\u0003\u0002\u0002", "\u0002\u02a8\u02a6\u0003\u0002\u0002\u0002\u02a9\u02aa\u0007\b\u0002", "\u0002\u02aa\u02ab\u0005L\'\u0002\u02ab\u02ac\u0007\t\u0002\u0002\u02ac", "\u02ae\u0003\u0002\u0002\u0002\u02ad\u029f\u0003\u0002\u0002\u0002\u02ad", "\u02a9\u0003\u0002\u0002\u0002\u02aeM\u0003\u0002\u0002\u0002\u02af", "\u02b1\u0007\b\u0002\u0002\u02b0\u02b2\u0007\u0081\u0002\u0002\u02b1", "\u02b0\u0003\u0002\u0002\u0002\u02b1\u02b2\u0003\u0002\u0002\u0002\u02b2", "\u02b7\u0003\u0002\u0002\u0002\u02b3\u02b5\u0005\u00b2Z\u0002\u02b4", "\u02b6\u0007\u0081\u0002\u0002\u02b5\u02b4\u0003\u0002\u0002\u0002\u02b5", "\u02b6\u0003\u0002\u0002\u0002\u02b6\u02b8\u0003\u0002\u0002\u0002\u02b7", "\u02b3\u0003\u0002\u0002\u0002\u02b7\u02b8\u0003\u0002\u0002\u0002\u02b8", "\u02bd\u0003\u0002\u0002\u0002\u02b9\u02bb\u0005Z.\u0002\u02ba\u02bc", "\u0007\u0081\u0002\u0002\u02bb\u02ba\u0003\u0002\u0002\u0002\u02bb\u02bc", "\u0003\u0002\u0002\u0002\u02bc\u02be\u0003\u0002\u0002\u0002\u02bd\u02b9", "\u0003\u0002\u0002\u0002\u02bd\u02be\u0003\u0002\u0002\u0002\u02be\u02c3", "\u0003\u0002\u0002\u0002\u02bf\u02c1\u0005V,\u0002\u02c0\u02c2\u0007", "\u0081\u0002\u0002\u02c1\u02c0\u0003\u0002\u0002\u0002\u02c1\u02c2\u0003", "\u0002\u0002\u0002\u02c2\u02c4\u0003\u0002\u0002\u0002\u02c3\u02bf\u0003", "\u0002\u0002\u0002\u02c3\u02c4\u0003\u0002\u0002\u0002\u02c4\u02c5\u0003", "\u0002\u0002\u0002\u02c5\u02c6\u0007\t\u0002\u0002\u02c6O\u0003\u0002", "\u0002\u0002\u02c7\u02c9\u0005R*\u0002\u02c8\u02ca\u0007\u0081\u0002", "\u0002\u02c9\u02c8\u0003\u0002\u0002\u0002\u02c9\u02ca\u0003\u0002\u0002", "\u0002\u02ca\u02cb\u0003\u0002\u0002\u0002\u02cb\u02cc\u0005N(\u0002", "\u02ccQ\u0003\u0002\u0002\u0002\u02cd\u02cf\u0005\u00c8e\u0002\u02ce", "\u02d0\u0007\u0081\u0002\u0002\u02cf\u02ce\u0003\u0002\u0002\u0002\u02cf", "\u02d0\u0003\u0002\u0002\u0002\u02d0\u02d1\u0003\u0002\u0002\u0002\u02d1", "\u02d3\u0005\u00ccg\u0002\u02d2\u02d4\u0007\u0081\u0002\u0002\u02d3", "\u02d2\u0003\u0002\u0002\u0002\u02d3\u02d4\u0003\u0002\u0002\u0002\u02d4", "\u02d6\u0003\u0002\u0002\u0002\u02d5\u02d7\u0005T+\u0002\u02d6\u02d5", "\u0003\u0002\u0002\u0002\u02d6\u02d7\u0003\u0002\u0002\u0002\u02d7\u02d9", "\u0003\u0002\u0002\u0002\u02d8\u02da\u0007\u0081\u0002\u0002\u02d9\u02d8", "\u0003\u0002\u0002\u0002\u02d9\u02da\u0003\u0002\u0002\u0002\u02da\u02db", "\u0003\u0002\u0002\u0002\u02db\u02dd\u0005\u00ccg\u0002\u02dc\u02de", "\u0007\u0081\u0002\u0002\u02dd\u02dc\u0003\u0002\u0002\u0002\u02dd\u02de", "\u0003\u0002\u0002\u0002\u02de\u02df\u0003\u0002\u0002\u0002\u02df\u02e0", "\u0005\u00caf\u0002\u02e0\u030e\u0003\u0002\u0002\u0002\u02e1\u02e3", "\u0005\u00c8e\u0002\u02e2\u02e4\u0007\u0081\u0002\u0002\u02e3\u02e2", "\u0003\u0002\u0002\u0002\u02e3\u02e4\u0003\u0002\u0002\u0002\u02e4\u02e5", "\u0003\u0002\u0002\u0002\u02e5\u02e7\u0005\u00ccg\u0002\u02e6\u02e8", "\u0007\u0081\u0002\u0002\u02e7\u02e6\u0003\u0002\u0002\u0002\u02e7\u02e8", "\u0003\u0002\u0002\u0002\u02e8\u02ea\u0003\u0002\u0002\u0002\u02e9\u02eb", "\u0005T+\u0002\u02ea\u02e9\u0003\u0002\u0002\u0002\u02ea\u02eb\u0003", "\u0002\u0002\u0002\u02eb\u02ed\u0003\u0002\u0002\u0002\u02ec\u02ee\u0007", "\u0081\u0002\u0002\u02ed\u02ec\u0003\u0002\u0002\u0002\u02ed\u02ee\u0003", "\u0002\u0002\u0002\u02ee\u02ef\u0003\u0002\u0002\u0002\u02ef\u02f0\u0005", "\u00ccg\u0002\u02f0\u030e\u0003\u0002\u0002\u0002\u02f1\u02f3\u0005", "\u00ccg\u0002\u02f2\u02f4\u0007\u0081\u0002\u0002\u02f3\u02f2\u0003", "\u0002\u0002\u0002\u02f3\u02f4\u0003\u0002\u0002\u0002\u02f4\u02f6\u0003", "\u0002\u0002\u0002\u02f5\u02f7\u0005T+\u0002\u02f6\u02f5\u0003\u0002", "\u0002\u0002\u02f6\u02f7\u0003\u0002\u0002\u0002\u02f7\u02f9\u0003\u0002", "\u0002\u0002\u02f8\u02fa\u0007\u0081\u0002\u0002\u02f9\u02f8\u0003\u0002", "\u0002\u0002\u02f9\u02fa\u0003\u0002\u0002\u0002\u02fa\u02fb\u0003\u0002", "\u0002\u0002\u02fb\u02fd\u0005\u00ccg\u0002\u02fc\u02fe\u0007\u0081", "\u0002\u0002\u02fd\u02fc\u0003\u0002\u0002\u0002\u02fd\u02fe\u0003\u0002", "\u0002\u0002\u02fe\u02ff\u0003\u0002\u0002\u0002\u02ff\u0300\u0005\u00ca", "f\u0002\u0300\u030e\u0003\u0002\u0002\u0002\u0301\u0303\u0005\u00cc", "g\u0002\u0302\u0304\u0007\u0081\u0002\u0002\u0303\u0302\u0003\u0002", "\u0002\u0002\u0303\u0304\u0003\u0002\u0002\u0002\u0304\u0306\u0003\u0002", "\u0002\u0002\u0305\u0307\u0005T+\u0002\u0306\u0305\u0003\u0002\u0002", "\u0002\u0306\u0307\u0003\u0002\u0002\u0002\u0307\u0309\u0003\u0002\u0002", "\u0002\u0308\u030a\u0007\u0081\u0002\u0002\u0309\u0308\u0003\u0002\u0002", "\u0002\u0309\u030a\u0003\u0002\u0002\u0002\u030a\u030b\u0003\u0002\u0002", "\u0002\u030b\u030c\u0005\u00ccg\u0002\u030c\u030e\u0003\u0002\u0002", "\u0002\u030d\u02cd\u0003\u0002\u0002\u0002\u030d\u02e1\u0003\u0002\u0002", "\u0002\u030d\u02f1\u0003\u0002\u0002\u0002\u030d\u0301\u0003\u0002\u0002", "\u0002\u030eS\u0003\u0002\u0002\u0002\u030f\u0311\u0007\n\u0002\u0002", "\u0310\u0312\u0007\u0081\u0002\u0002\u0311\u0310\u0003\u0002\u0002\u0002", "\u0311\u0312\u0003\u0002\u0002\u0002\u0312\u0317\u0003\u0002\u0002\u0002", "\u0313\u0315\u0005\u00b2Z\u0002\u0314\u0316\u0007\u0081\u0002\u0002", "\u0315\u0314\u0003\u0002\u0002\u0002\u0315\u0316\u0003\u0002\u0002\u0002", "\u0316\u0318\u0003\u0002\u0002\u0002\u0317\u0313\u0003\u0002\u0002\u0002", "\u0317\u0318\u0003\u0002\u0002\u0002\u0318\u031d\u0003\u0002\u0002\u0002", "\u0319\u031b\u0005X-\u0002\u031a\u031c\u0007\u0081\u0002\u0002\u031b", "\u031a\u0003\u0002\u0002\u0002\u031b\u031c\u0003\u0002\u0002\u0002\u031c", "\u031e\u0003\u0002\u0002\u0002\u031d\u0319\u0003\u0002\u0002\u0002\u031d", "\u031e\u0003\u0002\u0002\u0002\u031e\u0320\u0003\u0002\u0002\u0002\u031f", "\u0321\u0005^0\u0002\u0320\u031f\u0003\u0002\u0002\u0002\u0320\u0321", "\u0003\u0002\u0002\u0002\u0321\u0326\u0003\u0002\u0002\u0002\u0322\u0324", "\u0005V,\u0002\u0323\u0325\u0007\u0081\u0002\u0002\u0324\u0323\u0003", "\u0002\u0002\u0002\u0324\u0325\u0003\u0002\u0002\u0002\u0325\u0327\u0003", "\u0002\u0002\u0002\u0326\u0322\u0003\u0002\u0002\u0002\u0326\u0327\u0003", "\u0002\u0002\u0002\u0327\u0328\u0003\u0002\u0002\u0002\u0328\u0329\u0007", "\u000b\u0002\u0002\u0329U\u0003\u0002\u0002\u0002\u032a\u032d\u0005", "\u00b6\\\u0002\u032b\u032d\u0005\u00b8]\u0002\u032c\u032a\u0003\u0002", "\u0002\u0002\u032c\u032b\u0003\u0002\u0002\u0002\u032dW\u0003\u0002", "\u0002\u0002\u032e\u0330\u0007\f\u0002\u0002\u032f\u0331\u0007\u0081", "\u0002\u0002\u0330\u032f\u0003\u0002\u0002\u0002\u0330\u0331\u0003\u0002", "\u0002\u0002\u0331\u0332\u0003\u0002\u0002\u0002\u0332\u0340\u0005b", "2\u0002\u0333\u0335\u0007\u0081\u0002\u0002\u0334\u0333\u0003\u0002", "\u0002\u0002\u0334\u0335\u0003\u0002\u0002\u0002\u0335\u0336\u0003\u0002", "\u0002\u0002\u0336\u0338\u0007\r\u0002\u0002\u0337\u0339\u0007\f\u0002", "\u0002\u0338\u0337\u0003\u0002\u0002\u0002\u0338\u0339\u0003\u0002\u0002", "\u0002\u0339\u033b\u0003\u0002\u0002\u0002\u033a\u033c\u0007\u0081\u0002", "\u0002\u033b\u033a\u0003\u0002\u0002\u0002\u033b\u033c\u0003\u0002\u0002", "\u0002\u033c\u033d\u0003\u0002\u0002\u0002\u033d\u033f\u0005b2\u0002", "\u033e\u0334\u0003\u0002\u0002\u0002\u033f\u0342\u0003\u0002\u0002\u0002", "\u0340\u033e\u0003\u0002\u0002\u0002\u0340\u0341\u0003\u0002\u0002\u0002", "\u0341Y\u0003\u0002\u0002\u0002\u0342\u0340\u0003\u0002\u0002\u0002", "\u0343\u034a\u0005\\/\u0002\u0344\u0346\u0007\u0081\u0002\u0002\u0345", "\u0344\u0003\u0002\u0002\u0002\u0345\u0346\u0003\u0002\u0002\u0002\u0346", "\u0347\u0003\u0002\u0002\u0002\u0347\u0349\u0005\\/\u0002\u0348\u0345", "\u0003\u0002\u0002\u0002\u0349\u034c\u0003\u0002\u0002\u0002\u034a\u0348", "\u0003\u0002\u0002\u0002\u034a\u034b\u0003\u0002\u0002\u0002\u034b[", "\u0003\u0002\u0002\u0002\u034c\u034a\u0003\u0002\u0002\u0002\u034d\u034f", "\u0007\f\u0002\u0002\u034e\u0350\u0007\u0081\u0002\u0002\u034f\u034e", "\u0003\u0002\u0002\u0002\u034f\u0350\u0003\u0002\u0002\u0002\u0350\u0351", "\u0003\u0002\u0002\u0002\u0351\u0352\u0005`1\u0002\u0352]\u0003\u0002", "\u0002\u0002\u0353\u0355\u0007\u0007\u0002\u0002\u0354\u0356\u0007\u0081", "\u0002\u0002\u0355\u0354\u0003\u0002\u0002\u0002\u0355\u0356\u0003\u0002", "\u0002\u0002\u0356\u035b\u0003\u0002\u0002\u0002\u0357\u0359\u0005\u00be", "`\u0002\u0358\u035a\u0007\u0081\u0002\u0002\u0359\u0358\u0003\u0002", "\u0002\u0002\u0359\u035a\u0003\u0002\u0002\u0002\u035a\u035c\u0003\u0002", "\u0002\u0002\u035b\u0357\u0003\u0002\u0002\u0002\u035b\u035c\u0003\u0002", "\u0002\u0002\u035c\u0367\u0003\u0002\u0002\u0002\u035d\u035f\u0007\u000e", "\u0002\u0002\u035e\u0360\u0007\u0081\u0002\u0002\u035f\u035e\u0003\u0002", "\u0002\u0002\u035f\u0360\u0003\u0002\u0002\u0002\u0360\u0365\u0003\u0002", "\u0002\u0002\u0361\u0363\u0005\u00be`\u0002\u0362\u0364\u0007\u0081", "\u0002\u0002\u0363\u0362\u0003\u0002\u0002\u0002\u0363\u0364\u0003\u0002", "\u0002\u0002\u0364\u0366\u0003\u0002\u0002\u0002\u0365\u0361\u0003\u0002", "\u0002\u0002\u0365\u0366\u0003\u0002\u0002\u0002\u0366\u0368\u0003\u0002", "\u0002\u0002\u0367\u035d\u0003\u0002\u0002\u0002\u0367\u0368\u0003\u0002", "\u0002\u0002\u0368_\u0003\u0002\u0002\u0002\u0369\u036a\u0005\u00c2", "b\u0002\u036aa\u0003\u0002\u0002\u0002\u036b\u036c\u0005\u00c2b\u0002", "\u036cc\u0003\u0002\u0002\u0002\u036d\u036e\u0005f4\u0002\u036ee\u0003", "\u0002\u0002\u0002\u036f\u0376\u0005h5\u0002\u0370\u0371\u0007\u0081", "\u0002\u0002\u0371\u0372\u0007K\u0002\u0002\u0372\u0373\u0007\u0081", "\u0002\u0002\u0373\u0375\u0005h5\u0002\u0374\u0370\u0003\u0002\u0002", "\u0002\u0375\u0378\u0003\u0002\u0002\u0002\u0376\u0374\u0003\u0002\u0002", "\u0002\u0376\u0377\u0003\u0002\u0002\u0002\u0377g\u0003\u0002\u0002", "\u0002\u0378\u0376\u0003\u0002\u0002\u0002\u0379\u0380\u0005j6\u0002", "\u037a\u037b\u0007\u0081\u0002\u0002\u037b\u037c\u0007L\u0002\u0002", "\u037c\u037d\u0007\u0081\u0002\u0002\u037d\u037f\u0005j6\u0002\u037e", "\u037a\u0003\u0002\u0002\u0002\u037f\u0382\u0003\u0002\u0002\u0002\u0380", "\u037e\u0003\u0002\u0002\u0002\u0380\u0381\u0003\u0002\u0002\u0002\u0381", "i\u0003\u0002\u0002\u0002\u0382\u0380\u0003\u0002\u0002\u0002\u0383", "\u038a\u0005l7\u0002\u0384\u0385\u0007\u0081\u0002\u0002\u0385\u0386", "\u0007M\u0002\u0002\u0386\u0387\u0007\u0081\u0002\u0002\u0387\u0389", "\u0005l7\u0002\u0388\u0384\u0003\u0002\u0002\u0002\u0389\u038c\u0003", "\u0002\u0002\u0002\u038a\u0388\u0003\u0002\u0002\u0002\u038a\u038b\u0003", "\u0002\u0002\u0002\u038bk\u0003\u0002\u0002\u0002\u038c\u038a\u0003", "\u0002\u0002\u0002\u038d\u038f\u0007N\u0002\u0002\u038e\u0390\u0007", "\u0081\u0002\u0002\u038f\u038e\u0003\u0002\u0002\u0002\u038f\u0390\u0003", "\u0002\u0002\u0002\u0390\u0392\u0003\u0002\u0002\u0002\u0391\u038d\u0003", "\u0002\u0002\u0002\u0392\u0395\u0003\u0002\u0002\u0002\u0393\u0391\u0003", "\u0002\u0002\u0002\u0393\u0394\u0003\u0002\u0002\u0002\u0394\u0396\u0003", "\u0002\u0002\u0002\u0395\u0393\u0003\u0002\u0002\u0002\u0396\u0397\u0005", "n8\u0002\u0397m\u0003\u0002\u0002\u0002\u0398\u039f\u0005p9\u0002\u0399", "\u039b\u0007\u0081\u0002\u0002\u039a\u0399\u0003\u0002\u0002\u0002\u039a", "\u039b\u0003\u0002\u0002\u0002\u039b\u039c\u0003\u0002\u0002\u0002\u039c", "\u039e\u0005\u0090I\u0002\u039d\u039a\u0003\u0002\u0002\u0002\u039e", "\u03a1\u0003\u0002\u0002\u0002\u039f\u039d\u0003\u0002\u0002\u0002\u039f", "\u03a0\u0003\u0002\u0002\u0002\u03a0o\u0003\u0002\u0002\u0002\u03a1", "\u039f\u0003\u0002\u0002\u0002\u03a2\u03b5\u0005r:\u0002\u03a3\u03a5", "\u0007\u0081\u0002\u0002\u03a4\u03a3\u0003\u0002\u0002\u0002\u03a4\u03a5", "\u0003\u0002\u0002\u0002\u03a5\u03a6\u0003\u0002\u0002\u0002\u03a6\u03a8", "\u0007\u000f\u0002\u0002\u03a7\u03a9\u0007\u0081\u0002\u0002\u03a8\u03a7", "\u0003\u0002\u0002\u0002\u03a8\u03a9\u0003\u0002\u0002\u0002\u03a9\u03aa", "\u0003\u0002\u0002\u0002\u03aa\u03b4\u0005r:\u0002\u03ab\u03ad\u0007", "\u0081\u0002\u0002\u03ac\u03ab\u0003\u0002\u0002\u0002\u03ac\u03ad\u0003", "\u0002\u0002\u0002\u03ad\u03ae\u0003\u0002\u0002\u0002\u03ae\u03b0\u0007", "\u0010\u0002\u0002\u03af\u03b1\u0007\u0081\u0002\u0002\u03b0\u03af\u0003", "\u0002\u0002\u0002\u03b0\u03b1\u0003\u0002\u0002\u0002\u03b1\u03b2\u0003", "\u0002\u0002\u0002\u03b2\u03b4\u0005r:\u0002\u03b3\u03a4\u0003\u0002", "\u0002\u0002\u03b3\u03ac\u0003\u0002\u0002\u0002\u03b4\u03b7\u0003\u0002", "\u0002\u0002\u03b5\u03b3\u0003\u0002\u0002\u0002\u03b5\u03b6\u0003\u0002", "\u0002\u0002\u03b6q\u0003\u0002\u0002\u0002\u03b7\u03b5\u0003\u0002", "\u0002\u0002\u03b8\u03d3\u0005t;\u0002\u03b9\u03bb\u0007\u0081\u0002", "\u0002\u03ba\u03b9\u0003\u0002\u0002\u0002\u03ba\u03bb\u0003\u0002\u0002", "\u0002\u03bb\u03bc\u0003\u0002\u0002\u0002\u03bc\u03be\u0007\u0007\u0002", "\u0002\u03bd\u03bf\u0007\u0081\u0002\u0002\u03be\u03bd\u0003\u0002\u0002", "\u0002\u03be\u03bf\u0003\u0002\u0002\u0002\u03bf\u03c0\u0003\u0002\u0002", "\u0002\u03c0\u03d2\u0005t;\u0002\u03c1\u03c3\u0007\u0081\u0002\u0002", "\u03c2\u03c1\u0003\u0002\u0002\u0002\u03c2\u03c3\u0003\u0002\u0002\u0002", "\u03c3\u03c4\u0003\u0002\u0002\u0002\u03c4\u03c6\u0007\u0011\u0002\u0002", "\u03c5\u03c7\u0007\u0081\u0002\u0002\u03c6\u03c5\u0003\u0002\u0002\u0002", "\u03c6\u03c7\u0003\u0002\u0002\u0002\u03c7\u03c8\u0003\u0002\u0002\u0002", "\u03c8\u03d2\u0005t;\u0002\u03c9\u03cb\u0007\u0081\u0002\u0002\u03ca", "\u03c9\u0003\u0002\u0002\u0002\u03ca\u03cb\u0003\u0002\u0002\u0002\u03cb", "\u03cc\u0003\u0002\u0002\u0002\u03cc\u03ce\u0007\u0012\u0002\u0002\u03cd", "\u03cf\u0007\u0081\u0002\u0002\u03ce\u03cd\u0003\u0002\u0002\u0002\u03ce", "\u03cf\u0003\u0002\u0002\u0002\u03cf\u03d0\u0003\u0002\u0002\u0002\u03d0", "\u03d2\u0005t;\u0002\u03d1\u03ba\u0003\u0002\u0002\u0002\u03d1\u03c2", "\u0003\u0002\u0002\u0002\u03d1\u03ca\u0003\u0002\u0002\u0002\u03d2\u03d5", "\u0003\u0002\u0002\u0002\u03d3\u03d1\u0003\u0002\u0002\u0002\u03d3\u03d4", "\u0003\u0002\u0002\u0002\u03d4s\u0003\u0002\u0002\u0002\u03d5\u03d3", "\u0003\u0002\u0002\u0002\u03d6\u03e1\u0005v<\u0002\u03d7\u03d9\u0007", "\u0081\u0002\u0002\u03d8\u03d7\u0003\u0002\u0002\u0002\u03d8\u03d9\u0003", "\u0002\u0002\u0002\u03d9\u03da\u0003\u0002\u0002\u0002\u03da\u03dc\u0007", "\u0013\u0002\u0002\u03db\u03dd\u0007\u0081\u0002\u0002\u03dc\u03db\u0003", "\u0002\u0002\u0002\u03dc\u03dd\u0003\u0002\u0002\u0002\u03dd\u03de\u0003", "\u0002\u0002\u0002\u03de\u03e0\u0005v<\u0002\u03df\u03d8\u0003\u0002", "\u0002\u0002\u03e0\u03e3\u0003\u0002\u0002\u0002\u03e1\u03df\u0003\u0002", "\u0002\u0002\u03e1\u03e2\u0003\u0002\u0002\u0002\u03e2u\u0003\u0002", "\u0002\u0002\u03e3\u03e1\u0003\u0002\u0002\u0002\u03e4\u03e6\t\u0003", "\u0002\u0002\u03e5\u03e7\u0007\u0081\u0002\u0002\u03e6\u03e5\u0003\u0002", "\u0002\u0002\u03e6\u03e7\u0003\u0002\u0002\u0002\u03e7\u03e9\u0003\u0002", "\u0002\u0002\u03e8\u03e4\u0003\u0002\u0002\u0002\u03e9\u03ec\u0003\u0002", "\u0002\u0002\u03ea\u03e8\u0003\u0002\u0002\u0002\u03ea\u03eb\u0003\u0002", "\u0002\u0002\u03eb\u03ed\u0003\u0002\u0002\u0002\u03ec\u03ea\u0003\u0002", "\u0002\u0002\u03ed\u03ee\u0005x=\u0002\u03eew\u0003\u0002\u0002\u0002", "\u03ef\u03f5\u0005\u0080A\u0002\u03f0\u03f4\u0005|?\u0002\u03f1\u03f4", "\u0005z>\u0002\u03f2\u03f4\u0005~@\u0002\u03f3\u03f0\u0003\u0002\u0002", "\u0002\u03f3\u03f1\u0003\u0002\u0002\u0002\u03f3\u03f2\u0003\u0002\u0002", "\u0002\u03f4\u03f7\u0003\u0002\u0002\u0002\u03f5\u03f3\u0003\u0002\u0002", "\u0002\u03f5\u03f6\u0003\u0002\u0002\u0002\u03f6y\u0003\u0002\u0002", "\u0002\u03f7\u03f5\u0003\u0002\u0002\u0002\u03f8\u03f9\u0007\u0081\u0002", "\u0002\u03f9\u03fb\u0007O\u0002\u0002\u03fa\u03fc\u0007\u0081\u0002", "\u0002\u03fb\u03fa\u0003\u0002\u0002\u0002\u03fb\u03fc\u0003\u0002\u0002", "\u0002\u03fc\u03fd\u0003\u0002\u0002\u0002\u03fd\u0412\u0005\u0080A", "\u0002\u03fe\u0400\u0007\u0081\u0002\u0002\u03ff\u03fe\u0003\u0002\u0002", "\u0002\u03ff\u0400\u0003\u0002\u0002\u0002\u0400\u0401\u0003\u0002\u0002", "\u0002\u0401\u0402\u0007\n\u0002\u0002\u0402\u0403\u0005d3\u0002\u0403", "\u0404\u0007\u000b\u0002\u0002\u0404\u0412\u0003\u0002\u0002\u0002\u0405", "\u0407\u0007\u0081\u0002\u0002\u0406\u0405\u0003\u0002\u0002\u0002\u0406", "\u0407\u0003\u0002\u0002\u0002\u0407\u0408\u0003\u0002\u0002\u0002\u0408", "\u040a\u0007\n\u0002\u0002\u0409\u040b\u0005d3\u0002\u040a\u0409\u0003", "\u0002\u0002\u0002\u040a\u040b\u0003\u0002\u0002\u0002\u040b\u040c\u0003", "\u0002\u0002\u0002\u040c\u040e\u0007\u000e\u0002\u0002\u040d\u040f\u0005", "d3\u0002\u040e\u040d\u0003\u0002\u0002\u0002\u040e\u040f\u0003\u0002", "\u0002\u0002\u040f\u0410\u0003\u0002\u0002\u0002\u0410\u0412\u0007\u000b", "\u0002\u0002\u0411\u03f8\u0003\u0002\u0002\u0002\u0411\u03ff\u0003\u0002", "\u0002\u0002\u0411\u0406\u0003\u0002\u0002\u0002\u0412{\u0003\u0002", "\u0002\u0002\u0413\u0414\u0007\u0081\u0002\u0002\u0414\u0415\u0007P", "\u0002\u0002\u0415\u0416\u0007\u0081\u0002\u0002\u0416\u041e\u0007?", "\u0002\u0002\u0417\u0418\u0007\u0081\u0002\u0002\u0418\u0419\u0007Q", "\u0002\u0002\u0419\u041a\u0007\u0081\u0002\u0002\u041a\u041e\u0007?", "\u0002\u0002\u041b\u041c\u0007\u0081\u0002\u0002\u041c\u041e\u0007R", "\u0002\u0002\u041d\u0413\u0003\u0002\u0002\u0002\u041d\u0417\u0003\u0002", "\u0002\u0002\u041d\u041b\u0003\u0002\u0002\u0002\u041e\u0420\u0003\u0002", "\u0002\u0002\u041f\u0421\u0007\u0081\u0002\u0002\u0420\u041f\u0003\u0002", "\u0002\u0002\u0420\u0421\u0003\u0002\u0002\u0002\u0421\u0422\u0003\u0002", "\u0002\u0002\u0422\u0423\u0005\u0080A\u0002\u0423}\u0003\u0002\u0002", "\u0002\u0424\u0425\u0007\u0081\u0002\u0002\u0425\u0426\u0007S\u0002", "\u0002\u0426\u0427\u0007\u0081\u0002\u0002\u0427\u042f\u0007T\u0002", "\u0002\u0428\u0429\u0007\u0081\u0002\u0002\u0429\u042a\u0007S\u0002", "\u0002\u042a\u042b\u0007\u0081\u0002\u0002\u042b\u042c\u0007N\u0002", "\u0002\u042c\u042d\u0007\u0081\u0002\u0002\u042d\u042f\u0007T\u0002", "\u0002\u042e\u0424\u0003\u0002\u0002\u0002\u042e\u0428\u0003\u0002\u0002", "\u0002\u042f\u007f\u0003\u0002\u0002\u0002\u0430\u0437\u0005\u0088E", "\u0002\u0431\u0433\u0007\u0081\u0002\u0002\u0432\u0431\u0003\u0002\u0002", "\u0002\u0432\u0433\u0003\u0002\u0002\u0002\u0433\u0434\u0003\u0002\u0002", "\u0002\u0434\u0436\u0005\u00acW\u0002\u0435\u0432\u0003\u0002\u0002", "\u0002\u0436\u0439\u0003\u0002\u0002\u0002\u0437\u0435\u0003\u0002\u0002", "\u0002\u0437\u0438\u0003\u0002\u0002\u0002\u0438\u043e\u0003\u0002\u0002", "\u0002\u0439\u0437\u0003\u0002\u0002\u0002\u043a\u043c\u0007\u0081\u0002", "\u0002\u043b\u043a\u0003\u0002\u0002\u0002\u043b\u043c\u0003\u0002\u0002", "\u0002\u043c\u043d\u0003\u0002\u0002\u0002\u043d\u043f\u0005Z.\u0002", "\u043e\u043b\u0003\u0002\u0002\u0002\u043e\u043f\u0003\u0002\u0002\u0002", "\u043f\u0081\u0003\u0002\u0002\u0002\u0440\u0442\u0005\u0084C\u0002", "\u0441\u0443\u0007\u0081\u0002\u0002\u0442\u0441\u0003\u0002\u0002\u0002", "\u0442\u0443\u0003\u0002\u0002\u0002\u0443\u0444\u0003\u0002\u0002\u0002", "\u0444\u0446\u0007\b\u0002\u0002\u0445\u0447\u0007\u0081\u0002\u0002", "\u0446\u0445\u0003\u0002\u0002\u0002\u0446\u0447\u0003\u0002\u0002\u0002", "\u0447\u0448\u0003\u0002\u0002\u0002\u0448\u044a\u0005L\'\u0002\u0449", "\u044b\u0007\u0081\u0002\u0002\u044a\u0449\u0003\u0002\u0002\u0002\u044a", "\u044b\u0003\u0002\u0002\u0002\u044b\u044c\u0003\u0002\u0002\u0002\u044c", "\u044d\u0007\t\u0002\u0002\u044d\u045d\u0003\u0002\u0002\u0002\u044e", "\u0450\u0005\u0086D\u0002\u044f\u0451\u0007\u0081\u0002\u0002\u0450", "\u044f\u0003\u0002\u0002\u0002\u0450\u0451\u0003\u0002\u0002\u0002\u0451", "\u0452\u0003\u0002\u0002\u0002\u0452\u0454\u0007\b\u0002\u0002\u0453", "\u0455\u0007\u0081\u0002\u0002\u0454\u0453\u0003\u0002\u0002\u0002\u0454", "\u0455\u0003\u0002\u0002\u0002\u0455\u0456\u0003\u0002\u0002\u0002\u0456", "\u0458\u0005L\'\u0002\u0457\u0459\u0007\u0081\u0002\u0002\u0458\u0457", "\u0003\u0002\u0002\u0002\u0458\u0459\u0003\u0002\u0002\u0002\u0459\u045a", "\u0003\u0002\u0002\u0002\u045a\u045b\u0007\t\u0002\u0002\u045b\u045d", "\u0003\u0002\u0002\u0002\u045c\u0440\u0003\u0002\u0002\u0002\u045c\u044e", "\u0003\u0002\u0002\u0002\u045d\u0083\u0003\u0002\u0002\u0002\u045e\u045f", "\u0007U\u0002\u0002\u045f\u0085\u0003\u0002\u0002\u0002\u0460\u0461", "\u0007V\u0002\u0002\u0461\u0087\u0003\u0002\u0002\u0002\u0462\u04c0", "\u0005\u008aF\u0002\u0463\u04c0\u0005\u00b8]\u0002\u0464\u04c0\u0005", "\u00aeX\u0002\u0465\u0467\u0007W\u0002\u0002\u0466\u0468\u0007\u0081", "\u0002\u0002\u0467\u0466\u0003\u0002\u0002\u0002\u0467\u0468\u0003\u0002", "\u0002\u0002\u0468\u0469\u0003\u0002\u0002\u0002\u0469\u046b\u0007\b", "\u0002\u0002\u046a\u046c\u0007\u0081\u0002\u0002\u046b\u046a\u0003\u0002", "\u0002\u0002\u046b\u046c\u0003\u0002\u0002\u0002\u046c\u046d\u0003\u0002", "\u0002\u0002\u046d\u046f\u0007\u0007\u0002\u0002\u046e\u0470\u0007\u0081", "\u0002\u0002\u046f\u046e\u0003\u0002\u0002\u0002\u046f\u0470\u0003\u0002", "\u0002\u0002\u0470\u0471\u0003\u0002\u0002\u0002\u0471\u04c0\u0007\t", "\u0002\u0002\u0472\u04c0\u0005\u00a8U\u0002\u0473\u04c0\u0005\u00aa", "V\u0002\u0474\u0476\u00071\u0002\u0002\u0475\u0477\u0007\u0081\u0002", "\u0002\u0476\u0475\u0003\u0002\u0002\u0002\u0476\u0477\u0003\u0002\u0002", "\u0002\u0477\u0478\u0003\u0002\u0002\u0002\u0478\u047a\u0007\b\u0002", "\u0002\u0479\u047b\u0007\u0081\u0002\u0002\u047a\u0479\u0003\u0002\u0002", "\u0002\u047a\u047b\u0003\u0002\u0002\u0002\u047b\u047c\u0003\u0002\u0002", "\u0002\u047c\u047e\u0005\u0096L\u0002\u047d\u047f\u0007\u0081\u0002", "\u0002\u047e\u047d\u0003\u0002\u0002\u0002\u047e\u047f\u0003\u0002\u0002", "\u0002\u047f\u0480\u0003\u0002\u0002\u0002\u0480\u0481\u0007\t\u0002", "\u0002\u0481\u04c0\u0003\u0002\u0002\u0002\u0482\u0484\u0007X\u0002", "\u0002\u0483\u0485\u0007\u0081\u0002\u0002\u0484\u0483\u0003\u0002\u0002", "\u0002\u0484\u0485\u0003\u0002\u0002\u0002\u0485\u0486\u0003\u0002\u0002", "\u0002\u0486\u0488\u0007\b\u0002\u0002\u0487\u0489\u0007\u0081\u0002", "\u0002\u0488\u0487\u0003\u0002\u0002\u0002\u0488\u0489\u0003\u0002\u0002", "\u0002\u0489\u048a\u0003\u0002\u0002\u0002\u048a\u048c\u0005\u0096L", "\u0002\u048b\u048d\u0007\u0081\u0002\u0002\u048c\u048b\u0003\u0002\u0002", "\u0002\u048c\u048d\u0003\u0002\u0002\u0002\u048d\u048e\u0003\u0002\u0002", "\u0002\u048e\u048f\u0007\t\u0002\u0002\u048f\u04c0\u0003\u0002\u0002", "\u0002\u0490\u0492\u0007Y\u0002\u0002\u0491\u0493\u0007\u0081\u0002", "\u0002\u0492\u0491\u0003\u0002\u0002\u0002\u0492\u0493\u0003\u0002\u0002", "\u0002\u0493\u0494\u0003\u0002\u0002\u0002\u0494\u0496\u0007\b\u0002", "\u0002\u0495\u0497\u0007\u0081\u0002\u0002\u0496\u0495\u0003\u0002\u0002", "\u0002\u0496\u0497\u0003\u0002\u0002\u0002\u0497\u0498\u0003\u0002\u0002", "\u0002\u0498\u049a\u0005\u0096L\u0002\u0499\u049b\u0007\u0081\u0002", "\u0002\u049a\u0499\u0003\u0002\u0002\u0002\u049a\u049b\u0003\u0002\u0002", "\u0002\u049b\u049c\u0003\u0002\u0002\u0002\u049c\u049d\u0007\t\u0002", "\u0002\u049d\u04c0\u0003\u0002\u0002\u0002\u049e\u04a0\u0007Z\u0002", "\u0002\u049f\u04a1\u0007\u0081\u0002\u0002\u04a0\u049f\u0003\u0002\u0002", "\u0002\u04a0\u04a1\u0003\u0002\u0002\u0002\u04a1\u04a2\u0003\u0002\u0002", "\u0002\u04a2\u04a4\u0007\b\u0002\u0002\u04a3\u04a5\u0007\u0081\u0002", "\u0002\u04a4\u04a3\u0003\u0002\u0002\u0002\u04a4\u04a5\u0003\u0002\u0002", "\u0002\u04a5\u04a6\u0003\u0002\u0002\u0002\u04a6\u04a8\u0005\u0096L", "\u0002\u04a7\u04a9\u0007\u0081\u0002\u0002\u04a8\u04a7\u0003\u0002\u0002", "\u0002\u04a8\u04a9\u0003\u0002\u0002\u0002\u04a9\u04aa\u0003\u0002\u0002", "\u0002\u04aa\u04ab\u0007\t\u0002\u0002\u04ab\u04c0\u0003\u0002\u0002", "\u0002\u04ac\u04ae\u0007]\u0002\u0002\u04ad\u04af\u0007\u0081\u0002", "\u0002\u04ae\u04ad\u0003\u0002\u0002\u0002\u04ae\u04af\u0003\u0002\u0002", "\u0002\u04af\u04b0\u0003\u0002\u0002\u0002\u04b0\u04b2\u0007\b\u0002", "\u0002\u04b1\u04b3\u0007\u0081\u0002\u0002\u04b2\u04b1\u0003\u0002\u0002", "\u0002\u04b2\u04b3\u0003\u0002\u0002\u0002\u04b3\u04b4\u0003\u0002\u0002", "\u0002\u04b4\u04b6\u0005d3\u0002\u04b5\u04b7\u0007\u0081\u0002\u0002", "\u04b6\u04b5\u0003\u0002\u0002\u0002\u04b6\u04b7\u0003\u0002\u0002\u0002", "\u04b7\u04b8\u0003\u0002\u0002\u0002\u04b8\u04b9\u0007\t\u0002\u0002", "\u04b9\u04c0\u0003\u0002\u0002\u0002\u04ba\u04c0\u0005\u0082B\u0002", "\u04bb\u04c0\u0005\u0094K\u0002\u04bc\u04c0\u0005\u0092J\u0002\u04bd", "\u04c0\u0005\u009aN\u0002\u04be\u04c0\u0005\u00b2Z\u0002\u04bf\u0462", "\u0003\u0002\u0002\u0002\u04bf\u0463\u0003\u0002\u0002\u0002\u04bf\u0464", "\u0003\u0002\u0002\u0002\u04bf\u0465\u0003\u0002\u0002\u0002\u04bf\u0472", "\u0003\u0002\u0002\u0002\u04bf\u0473\u0003\u0002\u0002\u0002\u04bf\u0474", "\u0003\u0002\u0002\u0002\u04bf\u0482\u0003\u0002\u0002\u0002\u04bf\u0490", "\u0003\u0002\u0002\u0002\u04bf\u049e\u0003\u0002\u0002\u0002\u04bf\u04ac", "\u0003\u0002\u0002\u0002\u04bf\u04ba\u0003\u0002\u0002\u0002\u04bf\u04bb", "\u0003\u0002\u0002\u0002\u04bf\u04bc\u0003\u0002\u0002\u0002\u04bf\u04bd", "\u0003\u0002\u0002\u0002\u04bf\u04be\u0003\u0002\u0002\u0002\u04c0\u0089", "\u0003\u0002\u0002\u0002\u04c1\u04c8\u0005\u00b4[\u0002\u04c2\u04c8", "\u0007c\u0002\u0002\u04c3\u04c8\u0005\u008cG\u0002\u04c4\u04c8\u0007", "T\u0002\u0002\u04c5\u04c8\u0005\u00b6\\\u0002\u04c6\u04c8\u0005\u008e", "H\u0002\u04c7\u04c1\u0003\u0002\u0002\u0002\u04c7\u04c2\u0003\u0002", "\u0002\u0002\u04c7\u04c3\u0003\u0002\u0002\u0002\u04c7\u04c4\u0003\u0002", "\u0002\u0002\u04c7\u04c5\u0003\u0002\u0002\u0002\u04c7\u04c6\u0003\u0002", "\u0002\u0002\u04c8\u008b\u0003\u0002\u0002\u0002\u04c9\u04ca\t\u0004", "\u0002\u0002\u04ca\u008d\u0003\u0002\u0002\u0002\u04cb\u04cd\u0007\n", "\u0002\u0002\u04cc\u04ce\u0007\u0081\u0002\u0002\u04cd\u04cc\u0003\u0002", "\u0002\u0002\u04cd\u04ce\u0003\u0002\u0002\u0002\u04ce\u04e0\u0003\u0002", "\u0002\u0002\u04cf\u04d1\u0005d3\u0002\u04d0\u04d2\u0007\u0081\u0002", "\u0002\u04d1\u04d0\u0003\u0002\u0002\u0002\u04d1\u04d2\u0003\u0002\u0002", "\u0002\u04d2\u04dd\u0003\u0002\u0002\u0002\u04d3\u04d5\u0007\u0004\u0002", "\u0002\u04d4\u04d6\u0007\u0081\u0002\u0002\u04d5\u04d4\u0003\u0002\u0002", "\u0002\u04d5\u04d6\u0003\u0002\u0002\u0002\u04d6\u04d7\u0003\u0002\u0002", "\u0002\u04d7\u04d9\u0005d3\u0002\u04d8\u04da\u0007\u0081\u0002\u0002", "\u04d9\u04d8\u0003\u0002\u0002\u0002\u04d9\u04da\u0003\u0002\u0002\u0002", "\u04da\u04dc\u0003\u0002\u0002\u0002\u04db\u04d3\u0003\u0002\u0002\u0002", "\u04dc\u04df\u0003\u0002\u0002\u0002\u04dd\u04db\u0003\u0002\u0002\u0002", "\u04dd\u04de\u0003\u0002\u0002\u0002\u04de\u04e1\u0003\u0002\u0002\u0002", "\u04df\u04dd\u0003\u0002\u0002\u0002\u04e0\u04cf\u0003\u0002\u0002\u0002", "\u04e0\u04e1\u0003\u0002\u0002\u0002\u04e1\u04e2\u0003\u0002\u0002\u0002", "\u04e2\u04e3\u0007\u000b\u0002\u0002\u04e3\u008f\u0003\u0002\u0002\u0002", "\u04e4\u04e6\u0007\u0005\u0002\u0002\u04e5\u04e7\u0007\u0081\u0002\u0002", "\u04e6\u04e5\u0003\u0002\u0002\u0002\u04e6\u04e7\u0003\u0002\u0002\u0002", "\u04e7\u04e8\u0003\u0002\u0002\u0002\u04e8\u0503\u0005p9\u0002\u04e9", "\u04eb\u0007\u0014\u0002\u0002\u04ea\u04ec\u0007\u0081\u0002\u0002\u04eb", "\u04ea\u0003\u0002\u0002\u0002\u04eb\u04ec\u0003\u0002\u0002\u0002\u04ec", "\u04ed\u0003\u0002\u0002\u0002\u04ed\u0503\u0005p9\u0002\u04ee\u04f0", "\u0007\u0015\u0002\u0002\u04ef\u04f1\u0007\u0081\u0002\u0002\u04f0\u04ef", "\u0003\u0002\u0002\u0002\u04f0\u04f1\u0003\u0002\u0002\u0002\u04f1\u04f2", "\u0003\u0002\u0002\u0002\u04f2\u0503\u0005p9\u0002\u04f3\u04f5\u0007", "\u0016\u0002\u0002\u04f4\u04f6\u0007\u0081\u0002\u0002\u04f5\u04f4\u0003", "\u0002\u0002\u0002\u04f5\u04f6\u0003\u0002\u0002\u0002\u04f6\u04f7\u0003", "\u0002\u0002\u0002\u04f7\u0503\u0005p9\u0002\u04f8\u04fa\u0007\u0017", "\u0002\u0002\u04f9\u04fb\u0007\u0081\u0002\u0002\u04fa\u04f9\u0003\u0002", "\u0002\u0002\u04fa\u04fb\u0003\u0002\u0002\u0002\u04fb\u04fc\u0003\u0002", "\u0002\u0002\u04fc\u0503\u0005p9\u0002\u04fd\u04ff\u0007\u0018\u0002", "\u0002\u04fe\u0500\u0007\u0081\u0002\u0002\u04ff\u04fe\u0003\u0002\u0002", "\u0002\u04ff\u0500\u0003\u0002\u0002\u0002\u0500\u0501\u0003\u0002\u0002", "\u0002\u0501\u0503\u0005p9\u0002\u0502\u04e4\u0003\u0002\u0002\u0002", "\u0502\u04e9\u0003\u0002\u0002\u0002\u0502\u04ee\u0003\u0002\u0002\u0002", "\u0502\u04f3\u0003\u0002\u0002\u0002\u0502\u04f8\u0003\u0002\u0002\u0002", "\u0502\u04fd\u0003\u0002\u0002\u0002\u0503\u0091\u0003\u0002\u0002\u0002", "\u0504\u0506\u0007\b\u0002\u0002\u0505\u0507\u0007\u0081\u0002\u0002", "\u0506\u0505\u0003\u0002\u0002\u0002\u0506\u0507\u0003\u0002\u0002\u0002", "\u0507\u0508\u0003\u0002\u0002\u0002\u0508\u050a\u0005d3\u0002\u0509", "\u050b\u0007\u0081\u0002\u0002\u050a\u0509\u0003\u0002\u0002\u0002\u050a", "\u050b\u0003\u0002\u0002\u0002\u050b\u050c\u0003\u0002\u0002\u0002\u050c", "\u050d\u0007\t\u0002\u0002\u050d\u0093\u0003\u0002\u0002\u0002\u050e", "\u0513\u0005N(\u0002\u050f\u0511\u0007\u0081\u0002\u0002\u0510\u050f", "\u0003\u0002\u0002\u0002\u0510\u0511\u0003\u0002\u0002\u0002\u0511\u0512", "\u0003\u0002\u0002\u0002\u0512\u0514\u0005P)\u0002\u0513\u0510\u0003", "\u0002\u0002\u0002\u0514\u0515\u0003\u0002\u0002\u0002\u0515\u0513\u0003", "\u0002\u0002\u0002\u0515\u0516\u0003\u0002\u0002\u0002\u0516\u0095\u0003", "\u0002\u0002\u0002\u0517\u051c\u0005\u0098M\u0002\u0518\u051a\u0007", "\u0081\u0002\u0002\u0519\u0518\u0003\u0002\u0002\u0002\u0519\u051a\u0003", "\u0002\u0002\u0002\u051a\u051b\u0003\u0002\u0002\u0002\u051b\u051d\u0005", "D#\u0002\u051c\u0519\u0003\u0002\u0002\u0002\u051c\u051d\u0003\u0002", "\u0002\u0002\u051d\u0097\u0003\u0002\u0002\u0002\u051e\u051f\u0005\u00b2", "Z\u0002\u051f\u0520\u0007\u0081\u0002\u0002\u0520\u0521\u0007O\u0002", "\u0002\u0521\u0522\u0007\u0081\u0002\u0002\u0522\u0523\u0005d3\u0002", "\u0523\u0099\u0003\u0002\u0002\u0002\u0524\u0526\u0005\u009cO\u0002", "\u0525\u0527\u0007\u0081\u0002\u0002\u0526\u0525\u0003\u0002\u0002\u0002", "\u0526\u0527\u0003\u0002\u0002\u0002\u0527\u0528\u0003\u0002\u0002\u0002", "\u0528\u052a\u0007\b\u0002\u0002\u0529\u052b\u0007\u0081\u0002\u0002", "\u052a\u0529\u0003\u0002\u0002\u0002\u052a\u052b\u0003\u0002\u0002\u0002", "\u052b\u0530\u0003\u0002\u0002\u0002\u052c\u052e\u0007A\u0002\u0002", "\u052d\u052f\u0007\u0081\u0002\u0002\u052e\u052d\u0003\u0002\u0002\u0002", "\u052e\u052f\u0003\u0002\u0002\u0002\u052f\u0531\u0003\u0002\u0002\u0002", "\u0530\u052c\u0003\u0002\u0002\u0002\u0530\u0531\u0003\u0002\u0002\u0002", "\u0531\u0543\u0003\u0002\u0002\u0002\u0532\u0534\u0005d3\u0002\u0533", "\u0535\u0007\u0081\u0002\u0002\u0534\u0533\u0003\u0002\u0002\u0002\u0534", "\u0535\u0003\u0002\u0002\u0002\u0535\u0540\u0003\u0002\u0002\u0002\u0536", "\u0538\u0007\u0004\u0002\u0002\u0537\u0539\u0007\u0081\u0002\u0002\u0538", "\u0537\u0003\u0002\u0002\u0002\u0538\u0539\u0003\u0002\u0002\u0002\u0539", "\u053a\u0003\u0002\u0002\u0002\u053a\u053c\u0005d3\u0002\u053b\u053d", "\u0007\u0081\u0002\u0002\u053c\u053b\u0003\u0002\u0002\u0002\u053c\u053d", "\u0003\u0002\u0002\u0002\u053d\u053f\u0003\u0002\u0002\u0002\u053e\u0536", "\u0003\u0002\u0002\u0002\u053f\u0542\u0003\u0002\u0002\u0002\u0540\u053e", "\u0003\u0002\u0002\u0002\u0540\u0541\u0003\u0002\u0002\u0002\u0541\u0544", "\u0003\u0002\u0002\u0002\u0542\u0540\u0003\u0002\u0002\u0002\u0543\u0532", "\u0003\u0002\u0002\u0002\u0543\u0544\u0003\u0002\u0002\u0002\u0544\u0545", "\u0003\u0002\u0002\u0002\u0545\u0546\u0007\t\u0002\u0002\u0546\u009b", "\u0003\u0002\u0002\u0002\u0547\u0548\u0005\u00a6T\u0002\u0548\u0549", "\u0005\u00c6d\u0002\u0549\u054c\u0003\u0002\u0002\u0002\u054a\u054c", "\u0007]\u0002\u0002\u054b\u0547\u0003\u0002\u0002\u0002\u054b\u054a", "\u0003\u0002\u0002\u0002\u054c\u009d\u0003\u0002\u0002\u0002\u054d\u054f", "\u0005\u00a4S\u0002\u054e\u0550\u0007\u0081\u0002\u0002\u054f\u054e", "\u0003\u0002\u0002\u0002\u054f\u0550\u0003\u0002\u0002\u0002\u0550\u0551", "\u0003\u0002\u0002\u0002\u0551\u0553\u0007\b\u0002\u0002\u0552\u0554", "\u0007\u0081\u0002\u0002\u0553\u0552\u0003\u0002\u0002\u0002\u0553\u0554", "\u0003\u0002\u0002\u0002\u0554\u0566\u0003\u0002\u0002\u0002\u0555\u0557", "\u0005d3\u0002\u0556\u0558\u0007\u0081\u0002\u0002\u0557\u0556\u0003", "\u0002\u0002\u0002\u0557\u0558\u0003\u0002\u0002\u0002\u0558\u0563\u0003", "\u0002\u0002\u0002\u0559\u055b\u0007\u0004\u0002\u0002\u055a\u055c\u0007", "\u0081\u0002\u0002\u055b\u055a\u0003\u0002\u0002\u0002\u055b\u055c\u0003", "\u0002\u0002\u0002\u055c\u055d\u0003\u0002\u0002\u0002\u055d\u055f\u0005", "d3\u0002\u055e\u0560\u0007\u0081\u0002\u0002\u055f\u055e\u0003\u0002", "\u0002\u0002\u055f\u0560\u0003\u0002\u0002\u0002\u0560\u0562\u0003\u0002", "\u0002\u0002\u0561\u0559\u0003\u0002\u0002\u0002\u0562\u0565\u0003\u0002", "\u0002\u0002\u0563\u0561\u0003\u0002\u0002\u0002\u0563\u0564\u0003\u0002", "\u0002\u0002\u0564\u0567\u0003\u0002\u0002\u0002\u0565\u0563\u0003\u0002", "\u0002\u0002\u0566\u0555\u0003\u0002\u0002\u0002\u0566\u0567\u0003\u0002", "\u0002\u0002\u0567\u0568\u0003\u0002\u0002\u0002\u0568\u0569\u0007\t", "\u0002\u0002\u0569\u009f\u0003\u0002\u0002\u0002\u056a\u056b\u0005\u00a4", "S\u0002\u056b\u00a1\u0003\u0002\u0002\u0002\u056c\u056d\u0005\u00c6", "d\u0002\u056d\u00a3\u0003\u0002\u0002\u0002\u056e\u056f\u0005\u00a6", "T\u0002\u056f\u0570\u0005\u00c6d\u0002\u0570\u00a5\u0003\u0002\u0002", "\u0002\u0571\u0572\u0005\u00c6d\u0002\u0572\u0573\u0007\u0019\u0002", "\u0002\u0573\u0575\u0003\u0002\u0002\u0002\u0574\u0571\u0003\u0002\u0002", "\u0002\u0575\u0578\u0003\u0002\u0002\u0002\u0576\u0574\u0003\u0002\u0002", "\u0002\u0576\u0577\u0003\u0002\u0002\u0002\u0577\u00a7\u0003\u0002\u0002", "\u0002\u0578\u0576\u0003\u0002\u0002\u0002\u0579\u057b\u0007\n\u0002", "\u0002\u057a\u057c\u0007\u0081\u0002\u0002\u057b\u057a\u0003\u0002\u0002", "\u0002\u057b\u057c\u0003\u0002\u0002\u0002\u057c\u057d\u0003\u0002\u0002", "\u0002\u057d\u0586\u0005\u0096L\u0002\u057e\u0580\u0007\u0081\u0002", "\u0002\u057f\u057e\u0003\u0002\u0002\u0002\u057f\u0580\u0003\u0002\u0002", "\u0002\u0580\u0581\u0003\u0002\u0002\u0002\u0581\u0583\u0007\r\u0002", "\u0002\u0582\u0584\u0007\u0081\u0002\u0002\u0583\u0582\u0003\u0002\u0002", "\u0002\u0583\u0584\u0003\u0002\u0002\u0002\u0584\u0585\u0003\u0002\u0002", "\u0002\u0585\u0587\u0005d3\u0002\u0586\u057f\u0003\u0002\u0002\u0002", "\u0586\u0587\u0003\u0002\u0002\u0002\u0587\u0589\u0003\u0002\u0002\u0002", "\u0588\u058a\u0007\u0081\u0002\u0002\u0589\u0588\u0003\u0002\u0002\u0002", "\u0589\u058a\u0003\u0002\u0002\u0002\u058a\u058b\u0003\u0002\u0002\u0002", "\u058b\u058c\u0007\u000b\u0002\u0002\u058c\u00a9\u0003\u0002\u0002\u0002", "\u058d\u058f\u0007\n\u0002\u0002\u058e\u0590\u0007\u0081\u0002\u0002", "\u058f\u058e\u0003\u0002\u0002\u0002\u058f\u0590\u0003\u0002\u0002\u0002", "\u0590\u0599\u0003\u0002\u0002\u0002\u0591\u0593\u0005\u00b2Z\u0002", "\u0592\u0594\u0007\u0081\u0002\u0002\u0593\u0592\u0003\u0002\u0002\u0002", "\u0593\u0594\u0003\u0002\u0002\u0002\u0594\u0595\u0003\u0002\u0002\u0002", "\u0595\u0597\u0007\u0005\u0002\u0002\u0596\u0598\u0007\u0081\u0002\u0002", "\u0597\u0596\u0003\u0002\u0002\u0002\u0597\u0598\u0003\u0002\u0002\u0002", "\u0598\u059a\u0003\u0002\u0002\u0002\u0599\u0591\u0003\u0002\u0002\u0002", "\u0599\u059a\u0003\u0002\u0002\u0002\u059a\u059b\u0003\u0002\u0002\u0002", "\u059b\u059d\u0005\u0094K\u0002\u059c\u059e\u0007\u0081\u0002\u0002", "\u059d\u059c\u0003\u0002\u0002\u0002\u059d\u059e\u0003\u0002\u0002\u0002", "\u059e\u05a7\u0003\u0002\u0002\u0002\u059f\u05a1\u0007J\u0002\u0002", "\u05a0\u05a2\u0007\u0081\u0002\u0002\u05a1\u05a0\u0003\u0002\u0002\u0002", "\u05a1\u05a2\u0003\u0002\u0002\u0002\u05a2\u05a3\u0003\u0002\u0002\u0002", "\u05a3\u05a5\u0005d3\u0002\u05a4\u05a6\u0007\u0081\u0002\u0002\u05a5", "\u05a4\u0003\u0002\u0002\u0002\u05a5\u05a6\u0003\u0002\u0002\u0002\u05a6", "\u05a8\u0003\u0002\u0002\u0002\u05a7\u059f\u0003\u0002\u0002\u0002\u05a7", "\u05a8\u0003\u0002\u0002\u0002\u05a8\u05a9\u0003\u0002\u0002\u0002\u05a9", "\u05ab\u0007\r\u0002\u0002\u05aa\u05ac\u0007\u0081\u0002\u0002\u05ab", "\u05aa\u0003\u0002\u0002\u0002\u05ab\u05ac\u0003\u0002\u0002\u0002\u05ac", "\u05ad\u0003\u0002\u0002\u0002\u05ad\u05af\u0005d3\u0002\u05ae\u05b0", "\u0007\u0081\u0002\u0002\u05af\u05ae\u0003\u0002\u0002\u0002\u05af\u05b0", "\u0003\u0002\u0002\u0002\u05b0\u05b1\u0003\u0002\u0002\u0002\u05b1\u05b2", "\u0007\u000b\u0002\u0002\u05b2\u00ab\u0003\u0002\u0002\u0002\u05b3\u05b5", "\u0007\u0019\u0002\u0002\u05b4\u05b6\u0007\u0081\u0002\u0002\u05b5\u05b4", "\u0003\u0002\u0002\u0002\u05b5\u05b6\u0003\u0002\u0002\u0002\u05b6\u05b7", "\u0003\u0002\u0002\u0002\u05b7\u05b8\u0005\u00bc_\u0002\u05b8\u00ad", "\u0003\u0002\u0002\u0002\u05b9\u05be\u0007^\u0002\u0002\u05ba\u05bc", "\u0007\u0081\u0002\u0002\u05bb\u05ba\u0003\u0002\u0002\u0002\u05bb\u05bc", "\u0003\u0002\u0002\u0002\u05bc\u05bd\u0003\u0002\u0002\u0002\u05bd\u05bf", "\u0005\u00b0Y\u0002\u05be\u05bb\u0003\u0002\u0002\u0002\u05bf\u05c0", "\u0003\u0002\u0002\u0002\u05c0\u05be\u0003\u0002\u0002\u0002\u05c0\u05c1", "\u0003\u0002\u0002\u0002\u05c1\u05d0\u0003\u0002\u0002\u0002\u05c2\u05c4", "\u0007^\u0002\u0002\u05c3\u05c5\u0007\u0081\u0002\u0002\u05c4\u05c3", "\u0003\u0002\u0002\u0002\u05c4\u05c5\u0003\u0002\u0002\u0002\u05c5\u05c6", "\u0003\u0002\u0002\u0002\u05c6\u05cb\u0005d3\u0002\u05c7\u05c9\u0007", "\u0081\u0002\u0002\u05c8\u05c7\u0003\u0002\u0002\u0002\u05c8\u05c9\u0003", "\u0002\u0002\u0002\u05c9\u05ca\u0003\u0002\u0002\u0002\u05ca\u05cc\u0005", "\u00b0Y\u0002\u05cb\u05c8\u0003\u0002\u0002\u0002\u05cc\u05cd\u0003", "\u0002\u0002\u0002\u05cd\u05cb\u0003\u0002\u0002\u0002\u05cd\u05ce\u0003", "\u0002\u0002\u0002\u05ce\u05d0\u0003\u0002\u0002\u0002\u05cf\u05b9\u0003", "\u0002\u0002\u0002\u05cf\u05c2\u0003\u0002\u0002\u0002\u05d0\u05d9\u0003", "\u0002\u0002\u0002\u05d1\u05d3\u0007\u0081\u0002\u0002\u05d2\u05d1\u0003", "\u0002\u0002\u0002\u05d2\u05d3\u0003\u0002\u0002\u0002\u05d3\u05d4\u0003", "\u0002\u0002\u0002\u05d4\u05d6\u0007_\u0002\u0002\u05d5\u05d7\u0007", "\u0081\u0002\u0002\u05d6\u05d5\u0003\u0002\u0002\u0002\u05d6\u05d7\u0003", "\u0002\u0002\u0002\u05d7\u05d8\u0003\u0002\u0002\u0002\u05d8\u05da\u0005", "d3\u0002\u05d9\u05d2\u0003\u0002\u0002\u0002\u05d9\u05da\u0003\u0002", "\u0002\u0002\u05da\u05dc\u0003\u0002\u0002\u0002\u05db\u05dd\u0007\u0081", "\u0002\u0002\u05dc\u05db\u0003\u0002\u0002\u0002\u05dc\u05dd\u0003\u0002", "\u0002\u0002\u05dd\u05de\u0003\u0002\u0002\u0002\u05de\u05df\u0007`", "\u0002\u0002\u05df\u00af\u0003\u0002\u0002\u0002\u05e0\u05e2\u0007a", "\u0002\u0002\u05e1\u05e3\u0007\u0081\u0002\u0002\u05e2\u05e1\u0003\u0002", "\u0002\u0002\u05e2\u05e3\u0003\u0002\u0002\u0002\u05e3\u05e4\u0003\u0002", "\u0002\u0002\u05e4\u05e6\u0005d3\u0002\u05e5\u05e7\u0007\u0081\u0002", "\u0002\u05e6\u05e5\u0003\u0002\u0002\u0002\u05e6\u05e7\u0003\u0002\u0002", "\u0002\u05e7\u05e8\u0003\u0002\u0002\u0002\u05e8\u05ea\u0007b\u0002", "\u0002\u05e9\u05eb\u0007\u0081\u0002\u0002\u05ea\u05e9\u0003\u0002\u0002", "\u0002\u05ea\u05eb\u0003\u0002\u0002\u0002\u05eb\u05ec\u0003\u0002\u0002", "\u0002\u05ec\u05ed\u0005d3\u0002\u05ed\u00b1\u0003\u0002\u0002\u0002", "\u05ee\u05ef\u0005\u00c6d\u0002\u05ef\u00b3\u0003\u0002\u0002\u0002", "\u05f0\u05f3\u0005\u00c0a\u0002\u05f1\u05f3\u0005\u00be`\u0002\u05f2", "\u05f0\u0003\u0002\u0002\u0002\u05f2\u05f1\u0003\u0002\u0002\u0002\u05f3", "\u00b5\u0003\u0002\u0002\u0002\u05f4\u05f6\u0007\u001a\u0002\u0002\u05f5", "\u05f7\u0007\u0081\u0002\u0002\u05f6\u05f5\u0003\u0002\u0002\u0002\u05f6", "\u05f7\u0003\u0002\u0002\u0002\u05f7\u0619\u0003\u0002\u0002\u0002\u05f8", "\u05fa\u0005\u00bc_\u0002\u05f9\u05fb\u0007\u0081\u0002\u0002\u05fa", "\u05f9\u0003\u0002\u0002\u0002\u05fa\u05fb\u0003\u0002\u0002\u0002\u05fb", "\u05fc\u0003\u0002\u0002\u0002\u05fc\u05fe\u0007\f\u0002\u0002\u05fd", "\u05ff\u0007\u0081\u0002\u0002\u05fe\u05fd\u0003\u0002\u0002\u0002\u05fe", "\u05ff\u0003\u0002\u0002\u0002\u05ff\u0600\u0003\u0002\u0002\u0002\u0600", "\u0602\u0005d3\u0002\u0601\u0603\u0007\u0081\u0002\u0002\u0602\u0601", "\u0003\u0002\u0002\u0002\u0602\u0603\u0003\u0002\u0002\u0002\u0603\u0616", "\u0003\u0002\u0002\u0002\u0604\u0606\u0007\u0004\u0002\u0002\u0605\u0607", "\u0007\u0081\u0002\u0002\u0606\u0605\u0003\u0002\u0002\u0002\u0606\u0607", "\u0003\u0002\u0002\u0002\u0607\u0608\u0003\u0002\u0002\u0002\u0608\u060a", "\u0005\u00bc_\u0002\u0609\u060b\u0007\u0081\u0002\u0002\u060a\u0609", "\u0003\u0002\u0002\u0002\u060a\u060b\u0003\u0002\u0002\u0002\u060b\u060c", "\u0003\u0002\u0002\u0002\u060c\u060e\u0007\f\u0002\u0002\u060d\u060f", "\u0007\u0081\u0002\u0002\u060e\u060d\u0003\u0002\u0002\u0002\u060e\u060f", "\u0003\u0002\u0002\u0002\u060f\u0610\u0003\u0002\u0002\u0002\u0610\u0612", "\u0005d3\u0002\u0611\u0613\u0007\u0081\u0002\u0002\u0612\u0611\u0003", "\u0002\u0002\u0002\u0612\u0613\u0003\u0002\u0002\u0002\u0613\u0615\u0003", "\u0002\u0002\u0002\u0614\u0604\u0003\u0002\u0002\u0002\u0615\u0618\u0003", "\u0002\u0002\u0002\u0616\u0614\u0003\u0002\u0002\u0002\u0616\u0617\u0003", "\u0002\u0002\u0002\u0617\u061a\u0003\u0002\u0002\u0002\u0618\u0616\u0003", "\u0002\u0002\u0002\u0619\u05f8\u0003\u0002\u0002\u0002\u0619\u061a\u0003", "\u0002\u0002\u0002\u061a\u061b\u0003\u0002\u0002\u0002\u061b\u061c\u0007", "\u001b\u0002\u0002\u061c\u00b7\u0003\u0002\u0002\u0002\u061d\u0620\u0007", "\u001c\u0002\u0002\u061e\u0621\u0005\u00c6d\u0002\u061f\u0621\u0007", "f\u0002\u0002\u0620\u061e\u0003\u0002\u0002\u0002\u0620\u061f\u0003", "\u0002\u0002\u0002\u0621\u00b9\u0003\u0002\u0002\u0002\u0622\u0627\u0005", "\u0088E\u0002\u0623\u0625\u0007\u0081\u0002\u0002\u0624\u0623\u0003", "\u0002\u0002\u0002\u0624\u0625\u0003\u0002\u0002\u0002\u0625\u0626\u0003", "\u0002\u0002\u0002\u0626\u0628\u0005\u00acW\u0002\u0627\u0624\u0003", "\u0002\u0002\u0002\u0628\u0629\u0003\u0002\u0002\u0002\u0629\u0627\u0003", "\u0002\u0002\u0002\u0629\u062a\u0003\u0002\u0002\u0002\u062a\u00bb\u0003", "\u0002\u0002\u0002\u062b\u062c\u0005\u00c2b\u0002\u062c\u00bd\u0003", "\u0002\u0002\u0002\u062d\u062e\t\u0005\u0002\u0002\u062e\u00bf\u0003", "\u0002\u0002\u0002\u062f\u0630\t\u0006\u0002\u0002\u0630\u00c1\u0003", "\u0002\u0002\u0002\u0631\u0634\u0005\u00c6d\u0002\u0632\u0634\u0005", "\u00c4c\u0002\u0633\u0631\u0003\u0002\u0002\u0002\u0633\u0632\u0003", "\u0002\u0002\u0002\u0634\u00c3\u0003\u0002\u0002\u0002\u0635\u0636\t", "\u0007\u0002\u0002\u0636\u00c5\u0003\u0002\u0002\u0002\u0637\u0638\t", "\b\u0002\u0002\u0638\u00c7\u0003\u0002\u0002\u0002\u0639\u063a\t\t\u0002", "\u0002\u063a\u00c9\u0003\u0002\u0002\u0002\u063b\u063c\t\n\u0002\u0002", "\u063c\u00cb\u0003\u0002\u0002\u0002\u063d\u063e\t\u000b\u0002\u0002", "\u063e\u00cd\u0003\u0002\u0002\u0002\u0128\u00cf\u00d3\u00d6\u00d9\u00e1", "\u00e5\u00ea\u00f1\u00f6\u00f9\u00fd\u0101\u0105\u010b\u010f\u0114\u0119", "\u011d\u0120\u0122\u0126\u012a\u012f\u0133\u0138\u013c\u0145\u014a\u014e", "\u0152\u0156\u0159\u015d\u0167\u016e\u017b\u017f\u0185\u018c\u0191\u0195", "\u019b\u019f\u01a5\u01a9\u01af\u01b3\u01b7\u01bb\u01bf\u01c3\u01c8\u01cf", "\u01d3\u01d8\u01df\u01e5\u01ea\u01f0\u01f6\u01fb\u01ff\u0204\u0207\u020a", "\u020d\u0214\u021b\u021e\u0224\u0227\u022d\u0231\u0235\u0239\u023d\u0242", "\u0247\u024b\u0250\u0253\u025c\u0265\u026a\u0277\u027a\u0282\u0286\u028b", "\u0290\u0294\u0299\u029d\u02a1\u02a6\u02ad\u02b1\u02b5\u02b7\u02bb\u02bd", "\u02c1\u02c3\u02c9\u02cf\u02d3\u02d6\u02d9\u02dd\u02e3\u02e7\u02ea\u02ed", "\u02f3\u02f6\u02f9\u02fd\u0303\u0306\u0309\u030d\u0311\u0315\u0317\u031b", "\u031d\u0320\u0324\u0326\u032c\u0330\u0334\u0338\u033b\u0340\u0345\u034a", "\u034f\u0355\u0359\u035b\u035f\u0363\u0365\u0367\u0376\u0380\u038a\u038f", "\u0393\u039a\u039f\u03a4\u03a8\u03ac\u03b0\u03b3\u03b5\u03ba\u03be\u03c2", "\u03c6\u03ca\u03ce\u03d1\u03d3\u03d8\u03dc\u03e1\u03e6\u03ea\u03f3\u03f5", "\u03fb\u03ff\u0406\u040a\u040e\u0411\u041d\u0420\u042e\u0432\u0437\u043b", "\u043e\u0442\u0446\u044a\u0450\u0454\u0458\u045c\u0467\u046b\u046f\u0476", "\u047a\u047e\u0484\u0488\u048c\u0492\u0496\u049a\u04a0\u04a4\u04a8\u04ae", "\u04b2\u04b6\u04bf\u04c7\u04cd\u04d1\u04d5\u04d9\u04dd\u04e0\u04e6\u04eb", "\u04f0\u04f5\u04fa\u04ff\u0502\u0506\u050a\u0510\u0515\u0519\u051c\u0526", "\u052a\u052e\u0530\u0534\u0538\u053c\u0540\u0543\u054b\u054f\u0553\u0557", "\u055b\u055f\u0563\u0566\u0576\u057b\u057f\u0583\u0586\u0589\u058f\u0593", "\u0597\u0599\u059d\u05a1\u05a5\u05a7\u05ab\u05af\u05b5\u05bb\u05c0\u05c4", "\u05c8\u05cd\u05cf\u05d2\u05d6\u05d9\u05dc\u05e2\u05e6\u05ea\u05f2\u05f6", "\u05fa\u05fe\u0602\u0606\u060a\u060e\u0612\u0616\u0619\u0620\u0624\u0629", "\u0633"].join("");
const atn = new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.atn.ATNDeserializer().deserialize(serializedATN);
const decisionsToDFA = atn.decisionToState.map((ds, index) => new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.dfa.DFA(ds, index));
const sharedContextCache = new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.PredictionContextCache();
class CypherParser extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.Parser {
  constructor(input) {
    super(input);
    this._interp = new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = CypherParser.ruleNames;
    this.literalNames = CypherParser.literalNames;
    this.symbolicNames = CypherParser.symbolicNames;
  }

  get atn() {
    return atn;
  }

  oC_Cypher() {
    let localctx = new OC_CypherContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, CypherParser.RULE_oC_Cypher);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 205;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 204;
        this.match(CypherParser.SP);
      }

      this.state = 207;
      this.oC_Statement();
      this.state = 212;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 2, this._ctx);

      if (la_ === 1) {
        this.state = 209;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 208;
          this.match(CypherParser.SP);
        }

        this.state = 211;
        this.match(CypherParser.T__0);
      }

      this.state = 215;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 214;
        this.match(CypherParser.SP);
      }

      this.state = 217;
      this.match(CypherParser.EOF);
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_Statement() {
    let localctx = new OC_StatementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, CypherParser.RULE_oC_Statement);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 219;
      this.oC_Query();
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_Query() {
    let localctx = new OC_QueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, CypherParser.RULE_oC_Query);

    try {
      this.state = 223;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 4, this._ctx);

      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 221;
          this.oC_RegularQuery();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 222;
          this.oC_StandaloneCall();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_RegularQuery() {
    let localctx = new OC_RegularQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, CypherParser.RULE_oC_RegularQuery);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 225;
      this.oC_SingleQuery();
      this.state = 232;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 6, this._ctx);

      while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 227;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 226;
            this.match(CypherParser.SP);
          }

          this.state = 229;
          this.oC_Union();
        }

        this.state = 234;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 6, this._ctx);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_Union() {
    let localctx = new OC_UnionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, CypherParser.RULE_oC_Union);
    var _la = 0; // Token type

    try {
      this.state = 247;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 9, this._ctx);

      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 235;
          this.match(CypherParser.UNION);
          this.state = 236;
          this.match(CypherParser.SP);
          this.state = 237;
          this.match(CypherParser.ALL);
          this.state = 239;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 238;
            this.match(CypherParser.SP);
          }

          this.state = 241;
          this.oC_SingleQuery();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 242;
          this.match(CypherParser.UNION);
          this.state = 244;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 243;
            this.match(CypherParser.SP);
          }

          this.state = 246;
          this.oC_SingleQuery();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_SingleQuery() {
    let localctx = new OC_SingleQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, CypherParser.RULE_oC_SingleQuery);

    try {
      this.state = 251;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 10, this._ctx);

      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 249;
          this.oC_SinglePartQuery();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 250;
          this.oC_MultiPartQuery();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_SinglePartQuery() {
    let localctx = new OC_SinglePartQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, CypherParser.RULE_oC_SinglePartQuery);
    var _la = 0; // Token type

    try {
      this.state = 288;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 19, this._ctx);

      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 259;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          while ((_la - 48 & ~0x1f) == 0 && (1 << _la - 48 & (1 << CypherParser.OPTIONAL - 48 | 1 << CypherParser.MATCH - 48 | 1 << CypherParser.UNWIND - 48 | 1 << CypherParser.CALL - 48)) !== 0) {
            this.state = 253;
            this.oC_ReadingClause();
            this.state = 255;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            if (_la === CypherParser.SP) {
              this.state = 254;
              this.match(CypherParser.SP);
            }

            this.state = 261;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          }

          this.state = 262;
          this.oC_Return();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 269;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          while ((_la - 48 & ~0x1f) == 0 && (1 << _la - 48 & (1 << CypherParser.OPTIONAL - 48 | 1 << CypherParser.MATCH - 48 | 1 << CypherParser.UNWIND - 48 | 1 << CypherParser.CALL - 48)) !== 0) {
            this.state = 263;
            this.oC_ReadingClause();
            this.state = 265;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            if (_la === CypherParser.SP) {
              this.state = 264;
              this.match(CypherParser.SP);
            }

            this.state = 271;

            this._errHandler.sync(this);

            _la = this._input.LA(1);
          }

          this.state = 272;
          this.oC_UpdatingClause();
          this.state = 279;

          this._errHandler.sync(this);

          var _alt = this._interp.adaptivePredict(this._input, 16, this._ctx);

          while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 274;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === CypherParser.SP) {
                this.state = 273;
                this.match(CypherParser.SP);
              }

              this.state = 276;
              this.oC_UpdatingClause();
            }

            this.state = 281;

            this._errHandler.sync(this);

            _alt = this._interp.adaptivePredict(this._input, 16, this._ctx);
          }

          this.state = 286;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 18, this._ctx);

          if (la_ === 1) {
            this.state = 283;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            if (_la === CypherParser.SP) {
              this.state = 282;
              this.match(CypherParser.SP);
            }

            this.state = 285;
            this.oC_Return();
          }

          break;
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_MultiPartQuery() {
    let localctx = new OC_MultiPartQueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, CypherParser.RULE_oC_MultiPartQuery);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 312;

      this._errHandler.sync(this);

      var _alt = 1;

      do {
        switch (_alt) {
          case 1:
            this.state = 296;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            while ((_la - 48 & ~0x1f) == 0 && (1 << _la - 48 & (1 << CypherParser.OPTIONAL - 48 | 1 << CypherParser.MATCH - 48 | 1 << CypherParser.UNWIND - 48 | 1 << CypherParser.CALL - 48)) !== 0) {
              this.state = 290;
              this.oC_ReadingClause();
              this.state = 292;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === CypherParser.SP) {
                this.state = 291;
                this.match(CypherParser.SP);
              }

              this.state = 298;

              this._errHandler.sync(this);

              _la = this._input.LA(1);
            }

            this.state = 305;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            while ((_la - 52 & ~0x1f) == 0 && (1 << _la - 52 & (1 << CypherParser.MERGE - 52 | 1 << CypherParser.CREATE - 52 | 1 << CypherParser.SET - 52 | 1 << CypherParser.DETACH - 52 | 1 << CypherParser.DELETE - 52 | 1 << CypherParser.REMOVE - 52)) !== 0) {
              this.state = 299;
              this.oC_UpdatingClause();
              this.state = 301;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === CypherParser.SP) {
                this.state = 300;
                this.match(CypherParser.SP);
              }

              this.state = 307;

              this._errHandler.sync(this);

              _la = this._input.LA(1);
            }

            this.state = 308;
            this.oC_With();
            this.state = 310;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            if (_la === CypherParser.SP) {
              this.state = 309;
              this.match(CypherParser.SP);
            }

            break;

          default:
            throw new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.NoViableAltException(this);
        }

        this.state = 314;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 25, this._ctx);
      } while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.atn.ATN.INVALID_ALT_NUMBER);

      this.state = 316;
      this.oC_SinglePartQuery();
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_UpdatingClause() {
    let localctx = new OC_UpdatingClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, CypherParser.RULE_oC_UpdatingClause);

    try {
      this.state = 323;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case CypherParser.CREATE:
          this.enterOuterAlt(localctx, 1);
          this.state = 318;
          this.oC_Create();
          break;

        case CypherParser.MERGE:
          this.enterOuterAlt(localctx, 2);
          this.state = 319;
          this.oC_Merge();
          break;

        case CypherParser.DETACH:
        case CypherParser.DELETE:
          this.enterOuterAlt(localctx, 3);
          this.state = 320;
          this.oC_Delete();
          break;

        case CypherParser.SET:
          this.enterOuterAlt(localctx, 4);
          this.state = 321;
          this.oC_Set();
          break;

        case CypherParser.REMOVE:
          this.enterOuterAlt(localctx, 5);
          this.state = 322;
          this.oC_Remove();
          break;

        default:
          throw new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_ReadingClause() {
    let localctx = new OC_ReadingClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, CypherParser.RULE_oC_ReadingClause);

    try {
      this.state = 328;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case CypherParser.OPTIONAL:
        case CypherParser.MATCH:
          this.enterOuterAlt(localctx, 1);
          this.state = 325;
          this.oC_Match();
          break;

        case CypherParser.UNWIND:
          this.enterOuterAlt(localctx, 2);
          this.state = 326;
          this.oC_Unwind();
          break;

        case CypherParser.CALL:
          this.enterOuterAlt(localctx, 3);
          this.state = 327;
          this.oC_InQueryCall();
          break;

        default:
          throw new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_Match() {
    let localctx = new OC_MatchContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, CypherParser.RULE_oC_Match);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 332;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.OPTIONAL) {
        this.state = 330;
        this.match(CypherParser.OPTIONAL);
        this.state = 331;
        this.match(CypherParser.SP);
      }

      this.state = 334;
      this.match(CypherParser.MATCH);
      this.state = 336;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 335;
        this.match(CypherParser.SP);
      }

      this.state = 338;
      this.oC_Pattern();
      this.state = 343;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 31, this._ctx);

      if (la_ === 1) {
        this.state = 340;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 339;
          this.match(CypherParser.SP);
        }

        this.state = 342;
        this.oC_Where();
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_Unwind() {
    let localctx = new OC_UnwindContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, CypherParser.RULE_oC_Unwind);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 345;
      this.match(CypherParser.UNWIND);
      this.state = 347;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 346;
        this.match(CypherParser.SP);
      }

      this.state = 349;
      this.oC_Expression();
      this.state = 350;
      this.match(CypherParser.SP);
      this.state = 351;
      this.match(CypherParser.AS);
      this.state = 352;
      this.match(CypherParser.SP);
      this.state = 353;
      this.oC_Variable();
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_Merge() {
    let localctx = new OC_MergeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, CypherParser.RULE_oC_Merge);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 355;
      this.match(CypherParser.MERGE);
      this.state = 357;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 356;
        this.match(CypherParser.SP);
      }

      this.state = 359;
      this.oC_PatternPart();
      this.state = 364;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 34, this._ctx);

      while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 360;
          this.match(CypherParser.SP);
          this.state = 361;
          this.oC_MergeAction();
        }

        this.state = 366;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 34, this._ctx);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_MergeAction() {
    let localctx = new OC_MergeActionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, CypherParser.RULE_oC_MergeAction);

    try {
      this.state = 377;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 35, this._ctx);

      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 367;
          this.match(CypherParser.ON);
          this.state = 368;
          this.match(CypherParser.SP);
          this.state = 369;
          this.match(CypherParser.MATCH);
          this.state = 370;
          this.match(CypherParser.SP);
          this.state = 371;
          this.oC_Set();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 372;
          this.match(CypherParser.ON);
          this.state = 373;
          this.match(CypherParser.SP);
          this.state = 374;
          this.match(CypherParser.CREATE);
          this.state = 375;
          this.match(CypherParser.SP);
          this.state = 376;
          this.oC_Set();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_Create() {
    let localctx = new OC_CreateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, CypherParser.RULE_oC_Create);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 379;
      this.match(CypherParser.CREATE);
      this.state = 381;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 380;
        this.match(CypherParser.SP);
      }

      this.state = 383;
      this.oC_Pattern();
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_Set() {
    let localctx = new OC_SetContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, CypherParser.RULE_oC_Set);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 385;
      this.match(CypherParser.SET);
      this.state = 387;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 386;
        this.match(CypherParser.SP);
      }

      this.state = 389;
      this.oC_SetItem();
      this.state = 394;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      while (_la === CypherParser.T__1) {
        this.state = 390;
        this.match(CypherParser.T__1);
        this.state = 391;
        this.oC_SetItem();
        this.state = 396;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_SetItem() {
    let localctx = new OC_SetItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, CypherParser.RULE_oC_SetItem);
    var _la = 0; // Token type

    try {
      this.state = 433;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 46, this._ctx);

      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 397;
          this.oC_PropertyExpression();
          this.state = 399;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 398;
            this.match(CypherParser.SP);
          }

          this.state = 401;
          this.match(CypherParser.T__2);
          this.state = 403;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 402;
            this.match(CypherParser.SP);
          }

          this.state = 405;
          this.oC_Expression();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 407;
          this.oC_Variable();
          this.state = 409;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 408;
            this.match(CypherParser.SP);
          }

          this.state = 411;
          this.match(CypherParser.T__2);
          this.state = 413;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 412;
            this.match(CypherParser.SP);
          }

          this.state = 415;
          this.oC_Expression();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 417;
          this.oC_Variable();
          this.state = 419;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 418;
            this.match(CypherParser.SP);
          }

          this.state = 421;
          this.match(CypherParser.T__3);
          this.state = 423;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 422;
            this.match(CypherParser.SP);
          }

          this.state = 425;
          this.oC_Expression();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 427;
          this.oC_Variable();
          this.state = 429;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 428;
            this.match(CypherParser.SP);
          }

          this.state = 431;
          this.oC_NodeLabels();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_Delete() {
    let localctx = new OC_DeleteContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, CypherParser.RULE_oC_Delete);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 437;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.DETACH) {
        this.state = 435;
        this.match(CypherParser.DETACH);
        this.state = 436;
        this.match(CypherParser.SP);
      }

      this.state = 439;
      this.match(CypherParser.DELETE);
      this.state = 441;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 440;
        this.match(CypherParser.SP);
      }

      this.state = 443;
      this.oC_Expression();
      this.state = 454;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 51, this._ctx);

      while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 445;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 444;
            this.match(CypherParser.SP);
          }

          this.state = 447;
          this.match(CypherParser.T__1);
          this.state = 449;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 448;
            this.match(CypherParser.SP);
          }

          this.state = 451;
          this.oC_Expression();
        }

        this.state = 456;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 51, this._ctx);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_Remove() {
    let localctx = new OC_RemoveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, CypherParser.RULE_oC_Remove);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 457;
      this.match(CypherParser.REMOVE);
      this.state = 458;
      this.match(CypherParser.SP);
      this.state = 459;
      this.oC_RemoveItem();
      this.state = 470;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 54, this._ctx);

      while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 461;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 460;
            this.match(CypherParser.SP);
          }

          this.state = 463;
          this.match(CypherParser.T__1);
          this.state = 465;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 464;
            this.match(CypherParser.SP);
          }

          this.state = 467;
          this.oC_RemoveItem();
        }

        this.state = 472;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 54, this._ctx);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_RemoveItem() {
    let localctx = new OC_RemoveItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, CypherParser.RULE_oC_RemoveItem);

    try {
      this.state = 477;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 55, this._ctx);

      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 473;
          this.oC_Variable();
          this.state = 474;
          this.oC_NodeLabels();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 476;
          this.oC_PropertyExpression();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_InQueryCall() {
    let localctx = new OC_InQueryCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, CypherParser.RULE_oC_InQueryCall);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 479;
      this.match(CypherParser.CALL);
      this.state = 480;
      this.match(CypherParser.SP);
      this.state = 481;
      this.oC_ExplicitProcedureInvocation();
      this.state = 488;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 57, this._ctx);

      if (la_ === 1) {
        this.state = 483;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 482;
          this.match(CypherParser.SP);
        }

        this.state = 485;
        this.match(CypherParser.YIELD);
        this.state = 486;
        this.match(CypherParser.SP);
        this.state = 487;
        this.oC_YieldItems();
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_StandaloneCall() {
    let localctx = new OC_StandaloneCallContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, CypherParser.RULE_oC_StandaloneCall);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 490;
      this.match(CypherParser.CALL);
      this.state = 491;
      this.match(CypherParser.SP);
      this.state = 494;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 58, this._ctx);

      switch (la_) {
        case 1:
          this.state = 492;
          this.oC_ExplicitProcedureInvocation();
          break;

        case 2:
          this.state = 493;
          this.oC_ImplicitProcedureInvocation();
          break;
      }

      this.state = 500;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 59, this._ctx);

      if (la_ === 1) {
        this.state = 496;
        this.match(CypherParser.SP);
        this.state = 497;
        this.match(CypherParser.YIELD);
        this.state = 498;
        this.match(CypherParser.SP);
        this.state = 499;
        this.oC_YieldItems();
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_YieldItems() {
    let localctx = new OC_YieldItemsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, CypherParser.RULE_oC_YieldItems);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 517;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case CypherParser.T__4:
          this.state = 502;
          this.match(CypherParser.T__4);
          break;

        case CypherParser.COUNT:
        case CypherParser.ANY:
        case CypherParser.NONE:
        case CypherParser.SINGLE:
        case CypherParser.HexLetter:
        case CypherParser.FILTER:
        case CypherParser.EXTRACT:
        case CypherParser.UnescapedSymbolicName:
        case CypherParser.EscapedSymbolicName:
          this.state = 503;
          this.oC_YieldItem();
          this.state = 514;

          this._errHandler.sync(this);

          var _alt = this._interp.adaptivePredict(this._input, 62, this._ctx);

          while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 505;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === CypherParser.SP) {
                this.state = 504;
                this.match(CypherParser.SP);
              }

              this.state = 507;
              this.match(CypherParser.T__1);
              this.state = 509;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === CypherParser.SP) {
                this.state = 508;
                this.match(CypherParser.SP);
              }

              this.state = 511;
              this.oC_YieldItem();
            }

            this.state = 516;

            this._errHandler.sync(this);

            _alt = this._interp.adaptivePredict(this._input, 62, this._ctx);
          }

          break;

        default:
          throw new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.NoViableAltException(this);
      }

      this.state = 523;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 65, this._ctx);

      if (la_ === 1) {
        this.state = 520;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 519;
          this.match(CypherParser.SP);
        }

        this.state = 522;
        this.oC_Where();
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_YieldItem() {
    let localctx = new OC_YieldItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, CypherParser.RULE_oC_YieldItem);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 530;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 66, this._ctx);

      if (la_ === 1) {
        this.state = 525;
        this.oC_ProcedureResultField();
        this.state = 526;
        this.match(CypherParser.SP);
        this.state = 527;
        this.match(CypherParser.AS);
        this.state = 528;
        this.match(CypherParser.SP);
      }

      this.state = 532;
      this.oC_Variable();
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_With() {
    let localctx = new OC_WithContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, CypherParser.RULE_oC_With);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 534;
      this.match(CypherParser.WITH);
      this.state = 535;
      this.oC_ProjectionBody();
      this.state = 540;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 68, this._ctx);

      if (la_ === 1) {
        this.state = 537;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 536;
          this.match(CypherParser.SP);
        }

        this.state = 539;
        this.oC_Where();
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_Return() {
    let localctx = new OC_ReturnContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, CypherParser.RULE_oC_Return);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 542;
      this.match(CypherParser.RETURN);
      this.state = 543;
      this.oC_ProjectionBody();
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_ProjectionBody() {
    let localctx = new OC_ProjectionBodyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, CypherParser.RULE_oC_ProjectionBody);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 549;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 70, this._ctx);

      if (la_ === 1) {
        this.state = 546;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 545;
          this.match(CypherParser.SP);
        }

        this.state = 548;
        this.match(CypherParser.DISTINCT);
      }

      this.state = 551;
      this.match(CypherParser.SP);
      this.state = 552;
      this.oC_ProjectionItems();
      this.state = 555;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 71, this._ctx);

      if (la_ === 1) {
        this.state = 553;
        this.match(CypherParser.SP);
        this.state = 554;
        this.oC_Order();
      }

      this.state = 559;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 72, this._ctx);

      if (la_ === 1) {
        this.state = 557;
        this.match(CypherParser.SP);
        this.state = 558;
        this.oC_Skip();
      }

      this.state = 563;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 73, this._ctx);

      if (la_ === 1) {
        this.state = 561;
        this.match(CypherParser.SP);
        this.state = 562;
        this.oC_Limit();
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_ProjectionItems() {
    let localctx = new OC_ProjectionItemsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, CypherParser.RULE_oC_ProjectionItems);
    var _la = 0; // Token type

    try {
      this.state = 593;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case CypherParser.T__4:
          this.enterOuterAlt(localctx, 1);
          this.state = 565;
          this.match(CypherParser.T__4);
          this.state = 576;

          this._errHandler.sync(this);

          var _alt = this._interp.adaptivePredict(this._input, 76, this._ctx);

          while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 567;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === CypherParser.SP) {
                this.state = 566;
                this.match(CypherParser.SP);
              }

              this.state = 569;
              this.match(CypherParser.T__1);
              this.state = 571;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === CypherParser.SP) {
                this.state = 570;
                this.match(CypherParser.SP);
              }

              this.state = 573;
              this.oC_ProjectionItem();
            }

            this.state = 578;

            this._errHandler.sync(this);

            _alt = this._interp.adaptivePredict(this._input, 76, this._ctx);
          }

          break;

        case CypherParser.T__5:
        case CypherParser.T__7:
        case CypherParser.T__12:
        case CypherParser.T__13:
        case CypherParser.T__23:
        case CypherParser.T__25:
        case CypherParser.ALL:
        case CypherParser.NOT:
        case CypherParser.NULL:
        case CypherParser.SHORTESTPATH:
        case CypherParser.ALLSHORTESTPATHS:
        case CypherParser.COUNT:
        case CypherParser.ANY:
        case CypherParser.NONE:
        case CypherParser.SINGLE:
        case CypherParser.TRUE:
        case CypherParser.FALSE:
        case CypherParser.EXISTS:
        case CypherParser.CASE:
        case CypherParser.StringLiteral:
        case CypherParser.HexInteger:
        case CypherParser.DecimalInteger:
        case CypherParser.OctalInteger:
        case CypherParser.HexLetter:
        case CypherParser.ExponentDecimalReal:
        case CypherParser.RegularDecimalReal:
        case CypherParser.FILTER:
        case CypherParser.EXTRACT:
        case CypherParser.UnescapedSymbolicName:
        case CypherParser.EscapedSymbolicName:
          this.enterOuterAlt(localctx, 2);
          this.state = 579;
          this.oC_ProjectionItem();
          this.state = 590;

          this._errHandler.sync(this);

          var _alt = this._interp.adaptivePredict(this._input, 79, this._ctx);

          while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 581;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === CypherParser.SP) {
                this.state = 580;
                this.match(CypherParser.SP);
              }

              this.state = 583;
              this.match(CypherParser.T__1);
              this.state = 585;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === CypherParser.SP) {
                this.state = 584;
                this.match(CypherParser.SP);
              }

              this.state = 587;
              this.oC_ProjectionItem();
            }

            this.state = 592;

            this._errHandler.sync(this);

            _alt = this._interp.adaptivePredict(this._input, 79, this._ctx);
          }

          break;

        default:
          throw new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_ProjectionItem() {
    let localctx = new OC_ProjectionItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, CypherParser.RULE_oC_ProjectionItem);

    try {
      this.state = 602;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 81, this._ctx);

      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 595;
          this.oC_Expression();
          this.state = 596;
          this.match(CypherParser.SP);
          this.state = 597;
          this.match(CypherParser.AS);
          this.state = 598;
          this.match(CypherParser.SP);
          this.state = 599;
          this.oC_Variable();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 601;
          this.oC_Expression();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_Order() {
    let localctx = new OC_OrderContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, CypherParser.RULE_oC_Order);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 604;
      this.match(CypherParser.ORDER);
      this.state = 605;
      this.match(CypherParser.SP);
      this.state = 606;
      this.match(CypherParser.BY);
      this.state = 607;
      this.match(CypherParser.SP);
      this.state = 608;
      this.oC_SortItem();
      this.state = 616;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      while (_la === CypherParser.T__1) {
        this.state = 609;
        this.match(CypherParser.T__1);
        this.state = 611;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 610;
          this.match(CypherParser.SP);
        }

        this.state = 613;
        this.oC_SortItem();
        this.state = 618;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_Skip() {
    let localctx = new OC_SkipContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, CypherParser.RULE_oC_Skip);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 619;
      this.match(CypherParser.L_SKIP);
      this.state = 620;
      this.match(CypherParser.SP);
      this.state = 621;
      this.oC_Expression();
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_Limit() {
    let localctx = new OC_LimitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, CypherParser.RULE_oC_Limit);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 623;
      this.match(CypherParser.LIMIT);
      this.state = 624;
      this.match(CypherParser.SP);
      this.state = 625;
      this.oC_Expression();
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_SortItem() {
    let localctx = new OC_SortItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, CypherParser.RULE_oC_SortItem);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 627;
      this.oC_Expression();
      this.state = 632;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 85, this._ctx);

      if (la_ === 1) {
        this.state = 629;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 628;
          this.match(CypherParser.SP);
        }

        this.state = 631;
        _la = this._input.LA(1);

        if (!((_la - 68 & ~0x1f) == 0 && (1 << _la - 68 & (1 << CypherParser.ASCENDING - 68 | 1 << CypherParser.ASC - 68 | 1 << CypherParser.DESCENDING - 68 | 1 << CypherParser.DESC - 68)) !== 0)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);

          this.consume();
        }
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_Where() {
    let localctx = new OC_WhereContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, CypherParser.RULE_oC_Where);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 634;
      this.match(CypherParser.WHERE);
      this.state = 635;
      this.match(CypherParser.SP);
      this.state = 636;
      this.oC_Expression();
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_Pattern() {
    let localctx = new OC_PatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, CypherParser.RULE_oC_Pattern);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 638;
      this.oC_PatternPart();
      this.state = 649;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 88, this._ctx);

      while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 640;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 639;
            this.match(CypherParser.SP);
          }

          this.state = 642;
          this.match(CypherParser.T__1);
          this.state = 644;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 643;
            this.match(CypherParser.SP);
          }

          this.state = 646;
          this.oC_PatternPart();
        }

        this.state = 651;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 88, this._ctx);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_PatternPart() {
    let localctx = new OC_PatternPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, CypherParser.RULE_oC_PatternPart);
    var _la = 0; // Token type

    try {
      this.state = 663;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case CypherParser.COUNT:
        case CypherParser.ANY:
        case CypherParser.NONE:
        case CypherParser.SINGLE:
        case CypherParser.HexLetter:
        case CypherParser.FILTER:
        case CypherParser.EXTRACT:
        case CypherParser.UnescapedSymbolicName:
        case CypherParser.EscapedSymbolicName:
          this.enterOuterAlt(localctx, 1);
          this.state = 652;
          this.oC_Variable();
          this.state = 654;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 653;
            this.match(CypherParser.SP);
          }

          this.state = 656;
          this.match(CypherParser.T__2);
          this.state = 658;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 657;
            this.match(CypherParser.SP);
          }

          this.state = 660;
          this.oC_AnonymousPatternPart();
          break;

        case CypherParser.T__5:
        case CypherParser.SHORTESTPATH:
        case CypherParser.ALLSHORTESTPATHS:
          this.enterOuterAlt(localctx, 2);
          this.state = 662;
          this.oC_AnonymousPatternPart();
          break;

        default:
          throw new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_AnonymousPatternPart() {
    let localctx = new OC_AnonymousPatternPartContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, CypherParser.RULE_oC_AnonymousPatternPart);

    try {
      this.state = 667;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case CypherParser.SHORTESTPATH:
        case CypherParser.ALLSHORTESTPATHS:
          this.enterOuterAlt(localctx, 1);
          this.state = 665;
          this.oC_ShortestPathPatternFunction();
          break;

        case CypherParser.T__5:
          this.enterOuterAlt(localctx, 2);
          this.state = 666;
          this.oC_PatternElement();
          break;

        default:
          throw new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_PatternElement() {
    let localctx = new OC_PatternElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, CypherParser.RULE_oC_PatternElement);
    var _la = 0; // Token type

    try {
      this.state = 683;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 95, this._ctx);

      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 669;
          this.oC_NodePattern();
          this.state = 676;

          this._errHandler.sync(this);

          var _alt = this._interp.adaptivePredict(this._input, 94, this._ctx);

          while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.atn.ATN.INVALID_ALT_NUMBER) {
            if (_alt === 1) {
              this.state = 671;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === CypherParser.SP) {
                this.state = 670;
                this.match(CypherParser.SP);
              }

              this.state = 673;
              this.oC_PatternElementChain();
            }

            this.state = 678;

            this._errHandler.sync(this);

            _alt = this._interp.adaptivePredict(this._input, 94, this._ctx);
          }

          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 679;
          this.match(CypherParser.T__5);
          this.state = 680;
          this.oC_PatternElement();
          this.state = 681;
          this.match(CypherParser.T__6);
          break;
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_NodePattern() {
    let localctx = new OC_NodePatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, CypherParser.RULE_oC_NodePattern);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 685;
      this.match(CypherParser.T__5);
      this.state = 687;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 686;
        this.match(CypherParser.SP);
      }

      this.state = 693;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if ((_la - 85 & ~0x1f) == 0 && (1 << _la - 85 & (1 << CypherParser.COUNT - 85 | 1 << CypherParser.ANY - 85 | 1 << CypherParser.NONE - 85 | 1 << CypherParser.SINGLE - 85 | 1 << CypherParser.HexLetter - 85)) !== 0 || (_la - 121 & ~0x1f) == 0 && (1 << _la - 121 & (1 << CypherParser.FILTER - 121 | 1 << CypherParser.EXTRACT - 121 | 1 << CypherParser.UnescapedSymbolicName - 121 | 1 << CypherParser.EscapedSymbolicName - 121)) !== 0) {
        this.state = 689;
        this.oC_Variable();
        this.state = 691;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 690;
          this.match(CypherParser.SP);
        }
      }

      this.state = 699;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.T__9) {
        this.state = 695;
        this.oC_NodeLabels();
        this.state = 697;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 696;
          this.match(CypherParser.SP);
        }
      }

      this.state = 705;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.T__23 || _la === CypherParser.T__25) {
        this.state = 701;
        this.oC_Properties();
        this.state = 703;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 702;
          this.match(CypherParser.SP);
        }
      }

      this.state = 707;
      this.match(CypherParser.T__6);
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_PatternElementChain() {
    let localctx = new OC_PatternElementChainContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, CypherParser.RULE_oC_PatternElementChain);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 709;
      this.oC_RelationshipPattern();
      this.state = 711;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 710;
        this.match(CypherParser.SP);
      }

      this.state = 713;
      this.oC_NodePattern();
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_RelationshipPattern() {
    let localctx = new OC_RelationshipPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, CypherParser.RULE_oC_RelationshipPattern);
    var _la = 0; // Token type

    try {
      this.state = 779;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 120, this._ctx);

      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 715;
          this.oC_LeftArrowHead();
          this.state = 717;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 716;
            this.match(CypherParser.SP);
          }

          this.state = 719;
          this.oC_Dash();
          this.state = 721;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 105, this._ctx);

          if (la_ === 1) {
            this.state = 720;
            this.match(CypherParser.SP);
          }

          this.state = 724;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.T__7) {
            this.state = 723;
            this.oC_RelationshipDetail();
          }

          this.state = 727;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 726;
            this.match(CypherParser.SP);
          }

          this.state = 729;
          this.oC_Dash();
          this.state = 731;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 730;
            this.match(CypherParser.SP);
          }

          this.state = 733;
          this.oC_RightArrowHead();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 735;
          this.oC_LeftArrowHead();
          this.state = 737;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 736;
            this.match(CypherParser.SP);
          }

          this.state = 739;
          this.oC_Dash();
          this.state = 741;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 110, this._ctx);

          if (la_ === 1) {
            this.state = 740;
            this.match(CypherParser.SP);
          }

          this.state = 744;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.T__7) {
            this.state = 743;
            this.oC_RelationshipDetail();
          }

          this.state = 747;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 746;
            this.match(CypherParser.SP);
          }

          this.state = 749;
          this.oC_Dash();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 751;
          this.oC_Dash();
          this.state = 753;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 113, this._ctx);

          if (la_ === 1) {
            this.state = 752;
            this.match(CypherParser.SP);
          }

          this.state = 756;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.T__7) {
            this.state = 755;
            this.oC_RelationshipDetail();
          }

          this.state = 759;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 758;
            this.match(CypherParser.SP);
          }

          this.state = 761;
          this.oC_Dash();
          this.state = 763;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 762;
            this.match(CypherParser.SP);
          }

          this.state = 765;
          this.oC_RightArrowHead();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 767;
          this.oC_Dash();
          this.state = 769;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 117, this._ctx);

          if (la_ === 1) {
            this.state = 768;
            this.match(CypherParser.SP);
          }

          this.state = 772;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.T__7) {
            this.state = 771;
            this.oC_RelationshipDetail();
          }

          this.state = 775;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 774;
            this.match(CypherParser.SP);
          }

          this.state = 777;
          this.oC_Dash();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_RelationshipDetail() {
    let localctx = new OC_RelationshipDetailContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, CypherParser.RULE_oC_RelationshipDetail);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 781;
      this.match(CypherParser.T__7);
      this.state = 783;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 782;
        this.match(CypherParser.SP);
      }

      this.state = 789;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if ((_la - 85 & ~0x1f) == 0 && (1 << _la - 85 & (1 << CypherParser.COUNT - 85 | 1 << CypherParser.ANY - 85 | 1 << CypherParser.NONE - 85 | 1 << CypherParser.SINGLE - 85 | 1 << CypherParser.HexLetter - 85)) !== 0 || (_la - 121 & ~0x1f) == 0 && (1 << _la - 121 & (1 << CypherParser.FILTER - 121 | 1 << CypherParser.EXTRACT - 121 | 1 << CypherParser.UnescapedSymbolicName - 121 | 1 << CypherParser.EscapedSymbolicName - 121)) !== 0) {
        this.state = 785;
        this.oC_Variable();
        this.state = 787;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 786;
          this.match(CypherParser.SP);
        }
      }

      this.state = 795;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.T__9) {
        this.state = 791;
        this.oC_RelationshipTypes();
        this.state = 793;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 792;
          this.match(CypherParser.SP);
        }
      }

      this.state = 798;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.T__4) {
        this.state = 797;
        this.oC_RangeLiteral();
      }

      this.state = 804;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.T__23 || _la === CypherParser.T__25) {
        this.state = 800;
        this.oC_Properties();
        this.state = 802;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 801;
          this.match(CypherParser.SP);
        }
      }

      this.state = 806;
      this.match(CypherParser.T__8);
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_Properties() {
    let localctx = new OC_PropertiesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, CypherParser.RULE_oC_Properties);

    try {
      this.state = 810;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case CypherParser.T__23:
          this.enterOuterAlt(localctx, 1);
          this.state = 808;
          this.oC_MapLiteral();
          break;

        case CypherParser.T__25:
          this.enterOuterAlt(localctx, 2);
          this.state = 809;
          this.oC_Parameter();
          break;

        default:
          throw new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_RelationshipTypes() {
    let localctx = new OC_RelationshipTypesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, CypherParser.RULE_oC_RelationshipTypes);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 812;
      this.match(CypherParser.T__9);
      this.state = 814;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 813;
        this.match(CypherParser.SP);
      }

      this.state = 816;
      this.oC_RelTypeName();
      this.state = 830;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 134, this._ctx);

      while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 818;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 817;
            this.match(CypherParser.SP);
          }

          this.state = 820;
          this.match(CypherParser.T__10);
          this.state = 822;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.T__9) {
            this.state = 821;
            this.match(CypherParser.T__9);
          }

          this.state = 825;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 824;
            this.match(CypherParser.SP);
          }

          this.state = 827;
          this.oC_RelTypeName();
        }

        this.state = 832;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 134, this._ctx);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_NodeLabels() {
    let localctx = new OC_NodeLabelsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, CypherParser.RULE_oC_NodeLabels);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 833;
      this.oC_NodeLabel();
      this.state = 840;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 136, this._ctx);

      while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 835;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 834;
            this.match(CypherParser.SP);
          }

          this.state = 837;
          this.oC_NodeLabel();
        }

        this.state = 842;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 136, this._ctx);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_NodeLabel() {
    let localctx = new OC_NodeLabelContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, CypherParser.RULE_oC_NodeLabel);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 843;
      this.match(CypherParser.T__9);
      this.state = 845;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 844;
        this.match(CypherParser.SP);
      }

      this.state = 847;
      this.oC_LabelName();
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_RangeLiteral() {
    let localctx = new OC_RangeLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, CypherParser.RULE_oC_RangeLiteral);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 849;
      this.match(CypherParser.T__4);
      this.state = 851;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 850;
        this.match(CypherParser.SP);
      }

      this.state = 857;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if ((_la - 99 & ~0x1f) == 0 && (1 << _la - 99 & (1 << CypherParser.HexInteger - 99 | 1 << CypherParser.DecimalInteger - 99 | 1 << CypherParser.OctalInteger - 99)) !== 0) {
        this.state = 853;
        this.oC_IntegerLiteral();
        this.state = 855;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 854;
          this.match(CypherParser.SP);
        }
      }

      this.state = 869;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.T__11) {
        this.state = 859;
        this.match(CypherParser.T__11);
        this.state = 861;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 860;
          this.match(CypherParser.SP);
        }

        this.state = 867;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if ((_la - 99 & ~0x1f) == 0 && (1 << _la - 99 & (1 << CypherParser.HexInteger - 99 | 1 << CypherParser.DecimalInteger - 99 | 1 << CypherParser.OctalInteger - 99)) !== 0) {
          this.state = 863;
          this.oC_IntegerLiteral();
          this.state = 865;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 864;
            this.match(CypherParser.SP);
          }
        }
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_LabelName() {
    let localctx = new OC_LabelNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, CypherParser.RULE_oC_LabelName);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 871;
      this.oC_SchemaName();
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_RelTypeName() {
    let localctx = new OC_RelTypeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, CypherParser.RULE_oC_RelTypeName);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 873;
      this.oC_SchemaName();
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_Expression() {
    let localctx = new OC_ExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, CypherParser.RULE_oC_Expression);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 875;
      this.oC_OrExpression();
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_OrExpression() {
    let localctx = new OC_OrExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, CypherParser.RULE_oC_OrExpression);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 877;
      this.oC_XorExpression();
      this.state = 884;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 145, this._ctx);

      while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 878;
          this.match(CypherParser.SP);
          this.state = 879;
          this.match(CypherParser.OR);
          this.state = 880;
          this.match(CypherParser.SP);
          this.state = 881;
          this.oC_XorExpression();
        }

        this.state = 886;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 145, this._ctx);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_XorExpression() {
    let localctx = new OC_XorExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, CypherParser.RULE_oC_XorExpression);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 887;
      this.oC_AndExpression();
      this.state = 894;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 146, this._ctx);

      while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 888;
          this.match(CypherParser.SP);
          this.state = 889;
          this.match(CypherParser.XOR);
          this.state = 890;
          this.match(CypherParser.SP);
          this.state = 891;
          this.oC_AndExpression();
        }

        this.state = 896;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 146, this._ctx);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_AndExpression() {
    let localctx = new OC_AndExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, CypherParser.RULE_oC_AndExpression);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 897;
      this.oC_NotExpression();
      this.state = 904;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 147, this._ctx);

      while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 898;
          this.match(CypherParser.SP);
          this.state = 899;
          this.match(CypherParser.AND);
          this.state = 900;
          this.match(CypherParser.SP);
          this.state = 901;
          this.oC_NotExpression();
        }

        this.state = 906;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 147, this._ctx);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_NotExpression() {
    let localctx = new OC_NotExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, CypherParser.RULE_oC_NotExpression);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 913;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      while (_la === CypherParser.NOT) {
        this.state = 907;
        this.match(CypherParser.NOT);
        this.state = 909;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 908;
          this.match(CypherParser.SP);
        }

        this.state = 915;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      }

      this.state = 916;
      this.oC_ComparisonExpression();
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_ComparisonExpression() {
    let localctx = new OC_ComparisonExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, CypherParser.RULE_oC_ComparisonExpression);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 918;
      this.oC_AddOrSubtractExpression();
      this.state = 925;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 151, this._ctx);

      while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 920;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 919;
            this.match(CypherParser.SP);
          }

          this.state = 922;
          this.oC_PartialComparisonExpression();
        }

        this.state = 927;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 151, this._ctx);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_AddOrSubtractExpression() {
    let localctx = new OC_AddOrSubtractExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, CypherParser.RULE_oC_AddOrSubtractExpression);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 928;
      this.oC_MultiplyDivideModuloExpression();
      this.state = 947;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 157, this._ctx);

      while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 945;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 156, this._ctx);

          switch (la_) {
            case 1:
              this.state = 930;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === CypherParser.SP) {
                this.state = 929;
                this.match(CypherParser.SP);
              }

              this.state = 932;
              this.match(CypherParser.T__12);
              this.state = 934;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === CypherParser.SP) {
                this.state = 933;
                this.match(CypherParser.SP);
              }

              this.state = 936;
              this.oC_MultiplyDivideModuloExpression();
              break;

            case 2:
              this.state = 938;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === CypherParser.SP) {
                this.state = 937;
                this.match(CypherParser.SP);
              }

              this.state = 940;
              this.match(CypherParser.T__13);
              this.state = 942;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === CypherParser.SP) {
                this.state = 941;
                this.match(CypherParser.SP);
              }

              this.state = 944;
              this.oC_MultiplyDivideModuloExpression();
              break;
          }
        }

        this.state = 949;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 157, this._ctx);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_MultiplyDivideModuloExpression() {
    let localctx = new OC_MultiplyDivideModuloExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, CypherParser.RULE_oC_MultiplyDivideModuloExpression);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 950;
      this.oC_PowerOfExpression();
      this.state = 977;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 165, this._ctx);

      while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 975;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 164, this._ctx);

          switch (la_) {
            case 1:
              this.state = 952;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === CypherParser.SP) {
                this.state = 951;
                this.match(CypherParser.SP);
              }

              this.state = 954;
              this.match(CypherParser.T__4);
              this.state = 956;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === CypherParser.SP) {
                this.state = 955;
                this.match(CypherParser.SP);
              }

              this.state = 958;
              this.oC_PowerOfExpression();
              break;

            case 2:
              this.state = 960;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === CypherParser.SP) {
                this.state = 959;
                this.match(CypherParser.SP);
              }

              this.state = 962;
              this.match(CypherParser.T__14);
              this.state = 964;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === CypherParser.SP) {
                this.state = 963;
                this.match(CypherParser.SP);
              }

              this.state = 966;
              this.oC_PowerOfExpression();
              break;

            case 3:
              this.state = 968;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === CypherParser.SP) {
                this.state = 967;
                this.match(CypherParser.SP);
              }

              this.state = 970;
              this.match(CypherParser.T__15);
              this.state = 972;

              this._errHandler.sync(this);

              _la = this._input.LA(1);

              if (_la === CypherParser.SP) {
                this.state = 971;
                this.match(CypherParser.SP);
              }

              this.state = 974;
              this.oC_PowerOfExpression();
              break;
          }
        }

        this.state = 979;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 165, this._ctx);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_PowerOfExpression() {
    let localctx = new OC_PowerOfExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, CypherParser.RULE_oC_PowerOfExpression);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 980;
      this.oC_UnaryAddOrSubtractExpression();
      this.state = 991;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 168, this._ctx);

      while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 982;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 981;
            this.match(CypherParser.SP);
          }

          this.state = 984;
          this.match(CypherParser.T__16);
          this.state = 986;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 985;
            this.match(CypherParser.SP);
          }

          this.state = 988;
          this.oC_UnaryAddOrSubtractExpression();
        }

        this.state = 993;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 168, this._ctx);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_UnaryAddOrSubtractExpression() {
    let localctx = new OC_UnaryAddOrSubtractExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, CypherParser.RULE_oC_UnaryAddOrSubtractExpression);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1000;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      while (_la === CypherParser.T__12 || _la === CypherParser.T__13) {
        this.state = 994;
        _la = this._input.LA(1);

        if (!(_la === CypherParser.T__12 || _la === CypherParser.T__13)) {
          this._errHandler.recoverInline(this);
        } else {
          this._errHandler.reportMatch(this);

          this.consume();
        }

        this.state = 996;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 995;
          this.match(CypherParser.SP);
        }

        this.state = 1002;

        this._errHandler.sync(this);

        _la = this._input.LA(1);
      }

      this.state = 1003;
      this.oC_StringListNullOperatorExpression();
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_StringListNullOperatorExpression() {
    let localctx = new OC_StringListNullOperatorExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, CypherParser.RULE_oC_StringListNullOperatorExpression);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1005;
      this.oC_PropertyOrLabelsExpression();
      this.state = 1011;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 172, this._ctx);

      while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1009;

          this._errHandler.sync(this);

          var la_ = this._interp.adaptivePredict(this._input, 171, this._ctx);

          switch (la_) {
            case 1:
              this.state = 1006;
              this.oC_StringOperatorExpression();
              break;

            case 2:
              this.state = 1007;
              this.oC_ListOperatorExpression();
              break;

            case 3:
              this.state = 1008;
              this.oC_NullOperatorExpression();
              break;
          }
        }

        this.state = 1013;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 172, this._ctx);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_ListOperatorExpression() {
    let localctx = new OC_ListOperatorExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, CypherParser.RULE_oC_ListOperatorExpression);
    var _la = 0; // Token type

    try {
      this.state = 1039;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 178, this._ctx);

      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1014;
          this.match(CypherParser.SP);
          this.state = 1015;
          this.match(CypherParser.IN);
          this.state = 1017;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1016;
            this.match(CypherParser.SP);
          }

          this.state = 1019;
          this.oC_PropertyOrLabelsExpression();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1021;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1020;
            this.match(CypherParser.SP);
          }

          this.state = 1023;
          this.match(CypherParser.T__7);
          this.state = 1024;
          this.oC_Expression();
          this.state = 1025;
          this.match(CypherParser.T__8);
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1028;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1027;
            this.match(CypherParser.SP);
          }

          this.state = 1030;
          this.match(CypherParser.T__7);
          this.state = 1032;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if ((_la & ~0x1f) == 0 && (1 << _la & (1 << CypherParser.T__5 | 1 << CypherParser.T__7 | 1 << CypherParser.T__12 | 1 << CypherParser.T__13 | 1 << CypherParser.T__23 | 1 << CypherParser.T__25)) !== 0 || _la === CypherParser.ALL || _la === CypherParser.NOT || (_la - 82 & ~0x1f) == 0 && (1 << _la - 82 & (1 << CypherParser.NULL - 82 | 1 << CypherParser.SHORTESTPATH - 82 | 1 << CypherParser.ALLSHORTESTPATHS - 82 | 1 << CypherParser.COUNT - 82 | 1 << CypherParser.ANY - 82 | 1 << CypherParser.NONE - 82 | 1 << CypherParser.SINGLE - 82 | 1 << CypherParser.TRUE - 82 | 1 << CypherParser.FALSE - 82 | 1 << CypherParser.EXISTS - 82 | 1 << CypherParser.CASE - 82 | 1 << CypherParser.StringLiteral - 82 | 1 << CypherParser.HexInteger - 82 | 1 << CypherParser.DecimalInteger - 82 | 1 << CypherParser.OctalInteger - 82 | 1 << CypherParser.HexLetter - 82 | 1 << CypherParser.ExponentDecimalReal - 82 | 1 << CypherParser.RegularDecimalReal - 82)) !== 0 || (_la - 121 & ~0x1f) == 0 && (1 << _la - 121 & (1 << CypherParser.FILTER - 121 | 1 << CypherParser.EXTRACT - 121 | 1 << CypherParser.UnescapedSymbolicName - 121 | 1 << CypherParser.EscapedSymbolicName - 121)) !== 0) {
            this.state = 1031;
            this.oC_Expression();
          }

          this.state = 1034;
          this.match(CypherParser.T__11);
          this.state = 1036;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if ((_la & ~0x1f) == 0 && (1 << _la & (1 << CypherParser.T__5 | 1 << CypherParser.T__7 | 1 << CypherParser.T__12 | 1 << CypherParser.T__13 | 1 << CypherParser.T__23 | 1 << CypherParser.T__25)) !== 0 || _la === CypherParser.ALL || _la === CypherParser.NOT || (_la - 82 & ~0x1f) == 0 && (1 << _la - 82 & (1 << CypherParser.NULL - 82 | 1 << CypherParser.SHORTESTPATH - 82 | 1 << CypherParser.ALLSHORTESTPATHS - 82 | 1 << CypherParser.COUNT - 82 | 1 << CypherParser.ANY - 82 | 1 << CypherParser.NONE - 82 | 1 << CypherParser.SINGLE - 82 | 1 << CypherParser.TRUE - 82 | 1 << CypherParser.FALSE - 82 | 1 << CypherParser.EXISTS - 82 | 1 << CypherParser.CASE - 82 | 1 << CypherParser.StringLiteral - 82 | 1 << CypherParser.HexInteger - 82 | 1 << CypherParser.DecimalInteger - 82 | 1 << CypherParser.OctalInteger - 82 | 1 << CypherParser.HexLetter - 82 | 1 << CypherParser.ExponentDecimalReal - 82 | 1 << CypherParser.RegularDecimalReal - 82)) !== 0 || (_la - 121 & ~0x1f) == 0 && (1 << _la - 121 & (1 << CypherParser.FILTER - 121 | 1 << CypherParser.EXTRACT - 121 | 1 << CypherParser.UnescapedSymbolicName - 121 | 1 << CypherParser.EscapedSymbolicName - 121)) !== 0) {
            this.state = 1035;
            this.oC_Expression();
          }

          this.state = 1038;
          this.match(CypherParser.T__8);
          break;
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_StringOperatorExpression() {
    let localctx = new OC_StringOperatorExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, CypherParser.RULE_oC_StringOperatorExpression);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1051;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 179, this._ctx);

      switch (la_) {
        case 1:
          this.state = 1041;
          this.match(CypherParser.SP);
          this.state = 1042;
          this.match(CypherParser.STARTS);
          this.state = 1043;
          this.match(CypherParser.SP);
          this.state = 1044;
          this.match(CypherParser.WITH);
          break;

        case 2:
          this.state = 1045;
          this.match(CypherParser.SP);
          this.state = 1046;
          this.match(CypherParser.ENDS);
          this.state = 1047;
          this.match(CypherParser.SP);
          this.state = 1048;
          this.match(CypherParser.WITH);
          break;

        case 3:
          this.state = 1049;
          this.match(CypherParser.SP);
          this.state = 1050;
          this.match(CypherParser.CONTAINS);
          break;
      }

      this.state = 1054;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 1053;
        this.match(CypherParser.SP);
      }

      this.state = 1056;
      this.oC_PropertyOrLabelsExpression();
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_NullOperatorExpression() {
    let localctx = new OC_NullOperatorExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, CypherParser.RULE_oC_NullOperatorExpression);

    try {
      this.state = 1068;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 181, this._ctx);

      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1058;
          this.match(CypherParser.SP);
          this.state = 1059;
          this.match(CypherParser.IS);
          this.state = 1060;
          this.match(CypherParser.SP);
          this.state = 1061;
          this.match(CypherParser.NULL);
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1062;
          this.match(CypherParser.SP);
          this.state = 1063;
          this.match(CypherParser.IS);
          this.state = 1064;
          this.match(CypherParser.SP);
          this.state = 1065;
          this.match(CypherParser.NOT);
          this.state = 1066;
          this.match(CypherParser.SP);
          this.state = 1067;
          this.match(CypherParser.NULL);
          break;
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_PropertyOrLabelsExpression() {
    let localctx = new OC_PropertyOrLabelsExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, CypherParser.RULE_oC_PropertyOrLabelsExpression);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1070;
      this.oC_Atom();
      this.state = 1077;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 183, this._ctx);

      while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1072;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1071;
            this.match(CypherParser.SP);
          }

          this.state = 1074;
          this.oC_PropertyLookup();
        }

        this.state = 1079;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 183, this._ctx);
      }

      this.state = 1084;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 185, this._ctx);

      if (la_ === 1) {
        this.state = 1081;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 1080;
          this.match(CypherParser.SP);
        }

        this.state = 1083;
        this.oC_NodeLabels();
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_ShortestPathPatternFunction() {
    let localctx = new OC_ShortestPathPatternFunctionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, CypherParser.RULE_oC_ShortestPathPatternFunction);
    var _la = 0; // Token type

    try {
      this.state = 1114;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case CypherParser.SHORTESTPATH:
          this.enterOuterAlt(localctx, 1);
          this.state = 1086;
          this.oC_ShortestPathFunctionName();
          this.state = 1088;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1087;
            this.match(CypherParser.SP);
          }

          this.state = 1090;
          this.match(CypherParser.T__5);
          this.state = 1092;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1091;
            this.match(CypherParser.SP);
          }

          this.state = 1094;
          this.oC_PatternElement();
          this.state = 1096;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1095;
            this.match(CypherParser.SP);
          }

          this.state = 1098;
          this.match(CypherParser.T__6);
          break;

        case CypherParser.ALLSHORTESTPATHS:
          this.enterOuterAlt(localctx, 2);
          this.state = 1100;
          this.oC_AllShortestPathFunctionName();
          this.state = 1102;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1101;
            this.match(CypherParser.SP);
          }

          this.state = 1104;
          this.match(CypherParser.T__5);
          this.state = 1106;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1105;
            this.match(CypherParser.SP);
          }

          this.state = 1108;
          this.oC_PatternElement();
          this.state = 1110;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1109;
            this.match(CypherParser.SP);
          }

          this.state = 1112;
          this.match(CypherParser.T__6);
          break;

        default:
          throw new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_ShortestPathFunctionName() {
    let localctx = new OC_ShortestPathFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, CypherParser.RULE_oC_ShortestPathFunctionName);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1116;
      this.match(CypherParser.SHORTESTPATH);
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_AllShortestPathFunctionName() {
    let localctx = new OC_AllShortestPathFunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, CypherParser.RULE_oC_AllShortestPathFunctionName);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1118;
      this.match(CypherParser.ALLSHORTESTPATHS);
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_Atom() {
    let localctx = new OC_AtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, CypherParser.RULE_oC_Atom);
    var _la = 0; // Token type

    try {
      this.state = 1213;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 211, this._ctx);

      switch (la_) {
        case 1:
          this.enterOuterAlt(localctx, 1);
          this.state = 1120;
          this.oC_Literal();
          break;

        case 2:
          this.enterOuterAlt(localctx, 2);
          this.state = 1121;
          this.oC_Parameter();
          break;

        case 3:
          this.enterOuterAlt(localctx, 3);
          this.state = 1122;
          this.oC_CaseExpression();
          break;

        case 4:
          this.enterOuterAlt(localctx, 4);
          this.state = 1123;
          this.match(CypherParser.COUNT);
          this.state = 1125;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1124;
            this.match(CypherParser.SP);
          }

          this.state = 1127;
          this.match(CypherParser.T__5);
          this.state = 1129;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1128;
            this.match(CypherParser.SP);
          }

          this.state = 1131;
          this.match(CypherParser.T__4);
          this.state = 1133;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1132;
            this.match(CypherParser.SP);
          }

          this.state = 1135;
          this.match(CypherParser.T__6);
          break;

        case 5:
          this.enterOuterAlt(localctx, 5);
          this.state = 1136;
          this.oC_ListComprehension();
          break;

        case 6:
          this.enterOuterAlt(localctx, 6);
          this.state = 1137;
          this.oC_PatternComprehension();
          break;

        case 7:
          this.enterOuterAlt(localctx, 7);
          this.state = 1138;
          this.match(CypherParser.ALL);
          this.state = 1140;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1139;
            this.match(CypherParser.SP);
          }

          this.state = 1142;
          this.match(CypherParser.T__5);
          this.state = 1144;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1143;
            this.match(CypherParser.SP);
          }

          this.state = 1146;
          this.oC_FilterExpression();
          this.state = 1148;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1147;
            this.match(CypherParser.SP);
          }

          this.state = 1150;
          this.match(CypherParser.T__6);
          break;

        case 8:
          this.enterOuterAlt(localctx, 8);
          this.state = 1152;
          this.match(CypherParser.ANY);
          this.state = 1154;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1153;
            this.match(CypherParser.SP);
          }

          this.state = 1156;
          this.match(CypherParser.T__5);
          this.state = 1158;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1157;
            this.match(CypherParser.SP);
          }

          this.state = 1160;
          this.oC_FilterExpression();
          this.state = 1162;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1161;
            this.match(CypherParser.SP);
          }

          this.state = 1164;
          this.match(CypherParser.T__6);
          break;

        case 9:
          this.enterOuterAlt(localctx, 9);
          this.state = 1166;
          this.match(CypherParser.NONE);
          this.state = 1168;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1167;
            this.match(CypherParser.SP);
          }

          this.state = 1170;
          this.match(CypherParser.T__5);
          this.state = 1172;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1171;
            this.match(CypherParser.SP);
          }

          this.state = 1174;
          this.oC_FilterExpression();
          this.state = 1176;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1175;
            this.match(CypherParser.SP);
          }

          this.state = 1178;
          this.match(CypherParser.T__6);
          break;

        case 10:
          this.enterOuterAlt(localctx, 10);
          this.state = 1180;
          this.match(CypherParser.SINGLE);
          this.state = 1182;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1181;
            this.match(CypherParser.SP);
          }

          this.state = 1184;
          this.match(CypherParser.T__5);
          this.state = 1186;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1185;
            this.match(CypherParser.SP);
          }

          this.state = 1188;
          this.oC_FilterExpression();
          this.state = 1190;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1189;
            this.match(CypherParser.SP);
          }

          this.state = 1192;
          this.match(CypherParser.T__6);
          break;

        case 11:
          this.enterOuterAlt(localctx, 11);
          this.state = 1194;
          this.match(CypherParser.EXISTS);
          this.state = 1196;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1195;
            this.match(CypherParser.SP);
          }

          this.state = 1198;
          this.match(CypherParser.T__5);
          this.state = 1200;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1199;
            this.match(CypherParser.SP);
          }

          this.state = 1202;
          this.oC_Expression();
          this.state = 1204;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1203;
            this.match(CypherParser.SP);
          }

          this.state = 1206;
          this.match(CypherParser.T__6);
          break;

        case 12:
          this.enterOuterAlt(localctx, 12);
          this.state = 1208;
          this.oC_ShortestPathPatternFunction();
          break;

        case 13:
          this.enterOuterAlt(localctx, 13);
          this.state = 1209;
          this.oC_RelationshipsPattern();
          break;

        case 14:
          this.enterOuterAlt(localctx, 14);
          this.state = 1210;
          this.oC_ParenthesizedExpression();
          break;

        case 15:
          this.enterOuterAlt(localctx, 15);
          this.state = 1211;
          this.oC_FunctionInvocation();
          break;

        case 16:
          this.enterOuterAlt(localctx, 16);
          this.state = 1212;
          this.oC_Variable();
          break;
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_Literal() {
    let localctx = new OC_LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, CypherParser.RULE_oC_Literal);

    try {
      this.state = 1221;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case CypherParser.HexInteger:
        case CypherParser.DecimalInteger:
        case CypherParser.OctalInteger:
        case CypherParser.ExponentDecimalReal:
        case CypherParser.RegularDecimalReal:
          this.enterOuterAlt(localctx, 1);
          this.state = 1215;
          this.oC_NumberLiteral();
          break;

        case CypherParser.StringLiteral:
          this.enterOuterAlt(localctx, 2);
          this.state = 1216;
          this.match(CypherParser.StringLiteral);
          break;

        case CypherParser.TRUE:
        case CypherParser.FALSE:
          this.enterOuterAlt(localctx, 3);
          this.state = 1217;
          this.oC_BooleanLiteral();
          break;

        case CypherParser.NULL:
          this.enterOuterAlt(localctx, 4);
          this.state = 1218;
          this.match(CypherParser.NULL);
          break;

        case CypherParser.T__23:
          this.enterOuterAlt(localctx, 5);
          this.state = 1219;
          this.oC_MapLiteral();
          break;

        case CypherParser.T__7:
          this.enterOuterAlt(localctx, 6);
          this.state = 1220;
          this.oC_ListLiteral();
          break;

        default:
          throw new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_BooleanLiteral() {
    let localctx = new OC_BooleanLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, CypherParser.RULE_oC_BooleanLiteral);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1223;
      _la = this._input.LA(1);

      if (!(_la === CypherParser.TRUE || _la === CypherParser.FALSE)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);

        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_ListLiteral() {
    let localctx = new OC_ListLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, CypherParser.RULE_oC_ListLiteral);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1225;
      this.match(CypherParser.T__7);
      this.state = 1227;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 1226;
        this.match(CypherParser.SP);
      }

      this.state = 1246;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if ((_la & ~0x1f) == 0 && (1 << _la & (1 << CypherParser.T__5 | 1 << CypherParser.T__7 | 1 << CypherParser.T__12 | 1 << CypherParser.T__13 | 1 << CypherParser.T__23 | 1 << CypherParser.T__25)) !== 0 || _la === CypherParser.ALL || _la === CypherParser.NOT || (_la - 82 & ~0x1f) == 0 && (1 << _la - 82 & (1 << CypherParser.NULL - 82 | 1 << CypherParser.SHORTESTPATH - 82 | 1 << CypherParser.ALLSHORTESTPATHS - 82 | 1 << CypherParser.COUNT - 82 | 1 << CypherParser.ANY - 82 | 1 << CypherParser.NONE - 82 | 1 << CypherParser.SINGLE - 82 | 1 << CypherParser.TRUE - 82 | 1 << CypherParser.FALSE - 82 | 1 << CypherParser.EXISTS - 82 | 1 << CypherParser.CASE - 82 | 1 << CypherParser.StringLiteral - 82 | 1 << CypherParser.HexInteger - 82 | 1 << CypherParser.DecimalInteger - 82 | 1 << CypherParser.OctalInteger - 82 | 1 << CypherParser.HexLetter - 82 | 1 << CypherParser.ExponentDecimalReal - 82 | 1 << CypherParser.RegularDecimalReal - 82)) !== 0 || (_la - 121 & ~0x1f) == 0 && (1 << _la - 121 & (1 << CypherParser.FILTER - 121 | 1 << CypherParser.EXTRACT - 121 | 1 << CypherParser.UnescapedSymbolicName - 121 | 1 << CypherParser.EscapedSymbolicName - 121)) !== 0) {
        this.state = 1229;
        this.oC_Expression();
        this.state = 1231;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 1230;
          this.match(CypherParser.SP);
        }

        this.state = 1243;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        while (_la === CypherParser.T__1) {
          this.state = 1233;
          this.match(CypherParser.T__1);
          this.state = 1235;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1234;
            this.match(CypherParser.SP);
          }

          this.state = 1237;
          this.oC_Expression();
          this.state = 1239;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1238;
            this.match(CypherParser.SP);
          }

          this.state = 1245;

          this._errHandler.sync(this);

          _la = this._input.LA(1);
        }
      }

      this.state = 1248;
      this.match(CypherParser.T__8);
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_PartialComparisonExpression() {
    let localctx = new OC_PartialComparisonExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, CypherParser.RULE_oC_PartialComparisonExpression);
    var _la = 0; // Token type

    try {
      this.state = 1280;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case CypherParser.T__2:
          this.enterOuterAlt(localctx, 1);
          this.state = 1250;
          this.match(CypherParser.T__2);
          this.state = 1252;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1251;
            this.match(CypherParser.SP);
          }

          this.state = 1254;
          this.oC_AddOrSubtractExpression();
          break;

        case CypherParser.T__17:
          this.enterOuterAlt(localctx, 2);
          this.state = 1255;
          this.match(CypherParser.T__17);
          this.state = 1257;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1256;
            this.match(CypherParser.SP);
          }

          this.state = 1259;
          this.oC_AddOrSubtractExpression();
          break;

        case CypherParser.T__18:
          this.enterOuterAlt(localctx, 3);
          this.state = 1260;
          this.match(CypherParser.T__18);
          this.state = 1262;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1261;
            this.match(CypherParser.SP);
          }

          this.state = 1264;
          this.oC_AddOrSubtractExpression();
          break;

        case CypherParser.T__19:
          this.enterOuterAlt(localctx, 4);
          this.state = 1265;
          this.match(CypherParser.T__19);
          this.state = 1267;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1266;
            this.match(CypherParser.SP);
          }

          this.state = 1269;
          this.oC_AddOrSubtractExpression();
          break;

        case CypherParser.T__20:
          this.enterOuterAlt(localctx, 5);
          this.state = 1270;
          this.match(CypherParser.T__20);
          this.state = 1272;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1271;
            this.match(CypherParser.SP);
          }

          this.state = 1274;
          this.oC_AddOrSubtractExpression();
          break;

        case CypherParser.T__21:
          this.enterOuterAlt(localctx, 6);
          this.state = 1275;
          this.match(CypherParser.T__21);
          this.state = 1277;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1276;
            this.match(CypherParser.SP);
          }

          this.state = 1279;
          this.oC_AddOrSubtractExpression();
          break;

        default:
          throw new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_ParenthesizedExpression() {
    let localctx = new OC_ParenthesizedExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, CypherParser.RULE_oC_ParenthesizedExpression);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1282;
      this.match(CypherParser.T__5);
      this.state = 1284;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 1283;
        this.match(CypherParser.SP);
      }

      this.state = 1286;
      this.oC_Expression();
      this.state = 1288;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 1287;
        this.match(CypherParser.SP);
      }

      this.state = 1290;
      this.match(CypherParser.T__6);
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_RelationshipsPattern() {
    let localctx = new OC_RelationshipsPatternContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, CypherParser.RULE_oC_RelationshipsPattern);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1292;
      this.oC_NodePattern();
      this.state = 1297;

      this._errHandler.sync(this);

      var _alt = 1;

      do {
        switch (_alt) {
          case 1:
            this.state = 1294;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            if (_la === CypherParser.SP) {
              this.state = 1293;
              this.match(CypherParser.SP);
            }

            this.state = 1296;
            this.oC_PatternElementChain();
            break;

          default:
            throw new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.NoViableAltException(this);
        }

        this.state = 1299;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 229, this._ctx);
      } while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.atn.ATN.INVALID_ALT_NUMBER);
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_FilterExpression() {
    let localctx = new OC_FilterExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, CypherParser.RULE_oC_FilterExpression);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1301;
      this.oC_IdInColl();
      this.state = 1306;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 231, this._ctx);

      if (la_ === 1) {
        this.state = 1303;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 1302;
          this.match(CypherParser.SP);
        }

        this.state = 1305;
        this.oC_Where();
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_IdInColl() {
    let localctx = new OC_IdInCollContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, CypherParser.RULE_oC_IdInColl);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1308;
      this.oC_Variable();
      this.state = 1309;
      this.match(CypherParser.SP);
      this.state = 1310;
      this.match(CypherParser.IN);
      this.state = 1311;
      this.match(CypherParser.SP);
      this.state = 1312;
      this.oC_Expression();
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_FunctionInvocation() {
    let localctx = new OC_FunctionInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, CypherParser.RULE_oC_FunctionInvocation);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1314;
      this.oC_FunctionName();
      this.state = 1316;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 1315;
        this.match(CypherParser.SP);
      }

      this.state = 1318;
      this.match(CypherParser.T__5);
      this.state = 1320;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 1319;
        this.match(CypherParser.SP);
      }

      this.state = 1326;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.DISTINCT) {
        this.state = 1322;
        this.match(CypherParser.DISTINCT);
        this.state = 1324;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 1323;
          this.match(CypherParser.SP);
        }
      }

      this.state = 1345;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if ((_la & ~0x1f) == 0 && (1 << _la & (1 << CypherParser.T__5 | 1 << CypherParser.T__7 | 1 << CypherParser.T__12 | 1 << CypherParser.T__13 | 1 << CypherParser.T__23 | 1 << CypherParser.T__25)) !== 0 || _la === CypherParser.ALL || _la === CypherParser.NOT || (_la - 82 & ~0x1f) == 0 && (1 << _la - 82 & (1 << CypherParser.NULL - 82 | 1 << CypherParser.SHORTESTPATH - 82 | 1 << CypherParser.ALLSHORTESTPATHS - 82 | 1 << CypherParser.COUNT - 82 | 1 << CypherParser.ANY - 82 | 1 << CypherParser.NONE - 82 | 1 << CypherParser.SINGLE - 82 | 1 << CypherParser.TRUE - 82 | 1 << CypherParser.FALSE - 82 | 1 << CypherParser.EXISTS - 82 | 1 << CypherParser.CASE - 82 | 1 << CypherParser.StringLiteral - 82 | 1 << CypherParser.HexInteger - 82 | 1 << CypherParser.DecimalInteger - 82 | 1 << CypherParser.OctalInteger - 82 | 1 << CypherParser.HexLetter - 82 | 1 << CypherParser.ExponentDecimalReal - 82 | 1 << CypherParser.RegularDecimalReal - 82)) !== 0 || (_la - 121 & ~0x1f) == 0 && (1 << _la - 121 & (1 << CypherParser.FILTER - 121 | 1 << CypherParser.EXTRACT - 121 | 1 << CypherParser.UnescapedSymbolicName - 121 | 1 << CypherParser.EscapedSymbolicName - 121)) !== 0) {
        this.state = 1328;
        this.oC_Expression();
        this.state = 1330;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 1329;
          this.match(CypherParser.SP);
        }

        this.state = 1342;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        while (_la === CypherParser.T__1) {
          this.state = 1332;
          this.match(CypherParser.T__1);
          this.state = 1334;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1333;
            this.match(CypherParser.SP);
          }

          this.state = 1336;
          this.oC_Expression();
          this.state = 1338;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1337;
            this.match(CypherParser.SP);
          }

          this.state = 1344;

          this._errHandler.sync(this);

          _la = this._input.LA(1);
        }
      }

      this.state = 1347;
      this.match(CypherParser.T__6);
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_FunctionName() {
    let localctx = new OC_FunctionNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, CypherParser.RULE_oC_FunctionName);

    try {
      this.state = 1353;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case CypherParser.COUNT:
        case CypherParser.ANY:
        case CypherParser.NONE:
        case CypherParser.SINGLE:
        case CypherParser.HexLetter:
        case CypherParser.FILTER:
        case CypherParser.EXTRACT:
        case CypherParser.UnescapedSymbolicName:
        case CypherParser.EscapedSymbolicName:
          this.enterOuterAlt(localctx, 1);
          this.state = 1349;
          this.oC_Namespace();
          this.state = 1350;
          this.oC_SymbolicName();
          break;

        case CypherParser.EXISTS:
          this.enterOuterAlt(localctx, 2);
          this.state = 1352;
          this.match(CypherParser.EXISTS);
          break;

        default:
          throw new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_ExplicitProcedureInvocation() {
    let localctx = new OC_ExplicitProcedureInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, CypherParser.RULE_oC_ExplicitProcedureInvocation);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1355;
      this.oC_ProcedureName();
      this.state = 1357;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 1356;
        this.match(CypherParser.SP);
      }

      this.state = 1359;
      this.match(CypherParser.T__5);
      this.state = 1361;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 1360;
        this.match(CypherParser.SP);
      }

      this.state = 1380;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if ((_la & ~0x1f) == 0 && (1 << _la & (1 << CypherParser.T__5 | 1 << CypherParser.T__7 | 1 << CypherParser.T__12 | 1 << CypherParser.T__13 | 1 << CypherParser.T__23 | 1 << CypherParser.T__25)) !== 0 || _la === CypherParser.ALL || _la === CypherParser.NOT || (_la - 82 & ~0x1f) == 0 && (1 << _la - 82 & (1 << CypherParser.NULL - 82 | 1 << CypherParser.SHORTESTPATH - 82 | 1 << CypherParser.ALLSHORTESTPATHS - 82 | 1 << CypherParser.COUNT - 82 | 1 << CypherParser.ANY - 82 | 1 << CypherParser.NONE - 82 | 1 << CypherParser.SINGLE - 82 | 1 << CypherParser.TRUE - 82 | 1 << CypherParser.FALSE - 82 | 1 << CypherParser.EXISTS - 82 | 1 << CypherParser.CASE - 82 | 1 << CypherParser.StringLiteral - 82 | 1 << CypherParser.HexInteger - 82 | 1 << CypherParser.DecimalInteger - 82 | 1 << CypherParser.OctalInteger - 82 | 1 << CypherParser.HexLetter - 82 | 1 << CypherParser.ExponentDecimalReal - 82 | 1 << CypherParser.RegularDecimalReal - 82)) !== 0 || (_la - 121 & ~0x1f) == 0 && (1 << _la - 121 & (1 << CypherParser.FILTER - 121 | 1 << CypherParser.EXTRACT - 121 | 1 << CypherParser.UnescapedSymbolicName - 121 | 1 << CypherParser.EscapedSymbolicName - 121)) !== 0) {
        this.state = 1363;
        this.oC_Expression();
        this.state = 1365;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 1364;
          this.match(CypherParser.SP);
        }

        this.state = 1377;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        while (_la === CypherParser.T__1) {
          this.state = 1367;
          this.match(CypherParser.T__1);
          this.state = 1369;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1368;
            this.match(CypherParser.SP);
          }

          this.state = 1371;
          this.oC_Expression();
          this.state = 1373;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1372;
            this.match(CypherParser.SP);
          }

          this.state = 1379;

          this._errHandler.sync(this);

          _la = this._input.LA(1);
        }
      }

      this.state = 1382;
      this.match(CypherParser.T__6);
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_ImplicitProcedureInvocation() {
    let localctx = new OC_ImplicitProcedureInvocationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, CypherParser.RULE_oC_ImplicitProcedureInvocation);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1384;
      this.oC_ProcedureName();
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_ProcedureResultField() {
    let localctx = new OC_ProcedureResultFieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, CypherParser.RULE_oC_ProcedureResultField);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1386;
      this.oC_SymbolicName();
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_ProcedureName() {
    let localctx = new OC_ProcedureNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, CypherParser.RULE_oC_ProcedureName);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1388;
      this.oC_Namespace();
      this.state = 1389;
      this.oC_SymbolicName();
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_Namespace() {
    let localctx = new OC_NamespaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, CypherParser.RULE_oC_Namespace);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1396;

      this._errHandler.sync(this);

      var _alt = this._interp.adaptivePredict(this._input, 249, this._ctx);

      while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.atn.ATN.INVALID_ALT_NUMBER) {
        if (_alt === 1) {
          this.state = 1391;
          this.oC_SymbolicName();
          this.state = 1392;
          this.match(CypherParser.T__22);
        }

        this.state = 1398;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 249, this._ctx);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_ListComprehension() {
    let localctx = new OC_ListComprehensionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, CypherParser.RULE_oC_ListComprehension);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1399;
      this.match(CypherParser.T__7);
      this.state = 1401;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 1400;
        this.match(CypherParser.SP);
      }

      this.state = 1403;
      this.oC_FilterExpression();
      this.state = 1412;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 253, this._ctx);

      if (la_ === 1) {
        this.state = 1405;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 1404;
          this.match(CypherParser.SP);
        }

        this.state = 1407;
        this.match(CypherParser.T__10);
        this.state = 1409;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 1408;
          this.match(CypherParser.SP);
        }

        this.state = 1411;
        this.oC_Expression();
      }

      this.state = 1415;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 1414;
        this.match(CypherParser.SP);
      }

      this.state = 1417;
      this.match(CypherParser.T__8);
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_PatternComprehension() {
    let localctx = new OC_PatternComprehensionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, CypherParser.RULE_oC_PatternComprehension);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1419;
      this.match(CypherParser.T__7);
      this.state = 1421;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 1420;
        this.match(CypherParser.SP);
      }

      this.state = 1431;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if ((_la - 85 & ~0x1f) == 0 && (1 << _la - 85 & (1 << CypherParser.COUNT - 85 | 1 << CypherParser.ANY - 85 | 1 << CypherParser.NONE - 85 | 1 << CypherParser.SINGLE - 85 | 1 << CypherParser.HexLetter - 85)) !== 0 || (_la - 121 & ~0x1f) == 0 && (1 << _la - 121 & (1 << CypherParser.FILTER - 121 | 1 << CypherParser.EXTRACT - 121 | 1 << CypherParser.UnescapedSymbolicName - 121 | 1 << CypherParser.EscapedSymbolicName - 121)) !== 0) {
        this.state = 1423;
        this.oC_Variable();
        this.state = 1425;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 1424;
          this.match(CypherParser.SP);
        }

        this.state = 1427;
        this.match(CypherParser.T__2);
        this.state = 1429;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 1428;
          this.match(CypherParser.SP);
        }
      }

      this.state = 1433;
      this.oC_RelationshipsPattern();
      this.state = 1435;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 1434;
        this.match(CypherParser.SP);
      }

      this.state = 1445;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.WHERE) {
        this.state = 1437;
        this.match(CypherParser.WHERE);
        this.state = 1439;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 1438;
          this.match(CypherParser.SP);
        }

        this.state = 1441;
        this.oC_Expression();
        this.state = 1443;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 1442;
          this.match(CypherParser.SP);
        }
      }

      this.state = 1447;
      this.match(CypherParser.T__10);
      this.state = 1449;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 1448;
        this.match(CypherParser.SP);
      }

      this.state = 1451;
      this.oC_Expression();
      this.state = 1453;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 1452;
        this.match(CypherParser.SP);
      }

      this.state = 1455;
      this.match(CypherParser.T__8);
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_PropertyLookup() {
    let localctx = new OC_PropertyLookupContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, CypherParser.RULE_oC_PropertyLookup);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1457;
      this.match(CypherParser.T__22);
      this.state = 1459;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 1458;
        this.match(CypherParser.SP);
      }

      this.state = 1461;
      this.oC_PropertyKeyName();
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_CaseExpression() {
    let localctx = new OC_CaseExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, CypherParser.RULE_oC_CaseExpression);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1485;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 271, this._ctx);

      switch (la_) {
        case 1:
          this.state = 1463;
          this.match(CypherParser.CASE);
          this.state = 1468;

          this._errHandler.sync(this);

          var _alt = 1;

          do {
            switch (_alt) {
              case 1:
                this.state = 1465;

                this._errHandler.sync(this);

                _la = this._input.LA(1);

                if (_la === CypherParser.SP) {
                  this.state = 1464;
                  this.match(CypherParser.SP);
                }

                this.state = 1467;
                this.oC_CaseAlternatives();
                break;

              default:
                throw new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.NoViableAltException(this);
            }

            this.state = 1470;

            this._errHandler.sync(this);

            _alt = this._interp.adaptivePredict(this._input, 267, this._ctx);
          } while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.atn.ATN.INVALID_ALT_NUMBER);

          break;

        case 2:
          this.state = 1472;
          this.match(CypherParser.CASE);
          this.state = 1474;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1473;
            this.match(CypherParser.SP);
          }

          this.state = 1476;
          this.oC_Expression();
          this.state = 1481;

          this._errHandler.sync(this);

          var _alt = 1;

          do {
            switch (_alt) {
              case 1:
                this.state = 1478;

                this._errHandler.sync(this);

                _la = this._input.LA(1);

                if (_la === CypherParser.SP) {
                  this.state = 1477;
                  this.match(CypherParser.SP);
                }

                this.state = 1480;
                this.oC_CaseAlternatives();
                break;

              default:
                throw new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.NoViableAltException(this);
            }

            this.state = 1483;

            this._errHandler.sync(this);

            _alt = this._interp.adaptivePredict(this._input, 270, this._ctx);
          } while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.atn.ATN.INVALID_ALT_NUMBER);

          break;
      }

      this.state = 1495;

      this._errHandler.sync(this);

      var la_ = this._interp.adaptivePredict(this._input, 274, this._ctx);

      if (la_ === 1) {
        this.state = 1488;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 1487;
          this.match(CypherParser.SP);
        }

        this.state = 1490;
        this.match(CypherParser.ELSE);
        this.state = 1492;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 1491;
          this.match(CypherParser.SP);
        }

        this.state = 1494;
        this.oC_Expression();
      }

      this.state = 1498;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 1497;
        this.match(CypherParser.SP);
      }

      this.state = 1500;
      this.match(CypherParser.END);
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_CaseAlternatives() {
    let localctx = new OC_CaseAlternativesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, CypherParser.RULE_oC_CaseAlternatives);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1502;
      this.match(CypherParser.WHEN);
      this.state = 1504;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 1503;
        this.match(CypherParser.SP);
      }

      this.state = 1506;
      this.oC_Expression();
      this.state = 1508;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 1507;
        this.match(CypherParser.SP);
      }

      this.state = 1510;
      this.match(CypherParser.THEN);
      this.state = 1512;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 1511;
        this.match(CypherParser.SP);
      }

      this.state = 1514;
      this.oC_Expression();
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_Variable() {
    let localctx = new OC_VariableContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, CypherParser.RULE_oC_Variable);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1516;
      this.oC_SymbolicName();
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_NumberLiteral() {
    let localctx = new OC_NumberLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, CypherParser.RULE_oC_NumberLiteral);

    try {
      this.state = 1520;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case CypherParser.ExponentDecimalReal:
        case CypherParser.RegularDecimalReal:
          this.enterOuterAlt(localctx, 1);
          this.state = 1518;
          this.oC_DoubleLiteral();
          break;

        case CypherParser.HexInteger:
        case CypherParser.DecimalInteger:
        case CypherParser.OctalInteger:
          this.enterOuterAlt(localctx, 2);
          this.state = 1519;
          this.oC_IntegerLiteral();
          break;

        default:
          throw new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_MapLiteral() {
    let localctx = new OC_MapLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, CypherParser.RULE_oC_MapLiteral);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1522;
      this.match(CypherParser.T__23);
      this.state = 1524;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if (_la === CypherParser.SP) {
        this.state = 1523;
        this.match(CypherParser.SP);
      }

      this.state = 1559;

      this._errHandler.sync(this);

      _la = this._input.LA(1);

      if ((_la - 46 & ~0x1f) == 0 && (1 << _la - 46 & (1 << CypherParser.UNION - 46 | 1 << CypherParser.ALL - 46 | 1 << CypherParser.OPTIONAL - 46 | 1 << CypherParser.MATCH - 46 | 1 << CypherParser.UNWIND - 46 | 1 << CypherParser.AS - 46 | 1 << CypherParser.MERGE - 46 | 1 << CypherParser.ON - 46 | 1 << CypherParser.CREATE - 46 | 1 << CypherParser.SET - 46 | 1 << CypherParser.DETACH - 46 | 1 << CypherParser.DELETE - 46 | 1 << CypherParser.REMOVE - 46 | 1 << CypherParser.WITH - 46 | 1 << CypherParser.RETURN - 46 | 1 << CypherParser.DISTINCT - 46 | 1 << CypherParser.ORDER - 46 | 1 << CypherParser.BY - 46 | 1 << CypherParser.L_SKIP - 46 | 1 << CypherParser.LIMIT - 46 | 1 << CypherParser.ASCENDING - 46 | 1 << CypherParser.ASC - 46 | 1 << CypherParser.DESCENDING - 46 | 1 << CypherParser.DESC - 46 | 1 << CypherParser.WHERE - 46 | 1 << CypherParser.OR - 46 | 1 << CypherParser.XOR - 46 | 1 << CypherParser.AND - 46 | 1 << CypherParser.NOT - 46 | 1 << CypherParser.IN - 46)) !== 0 || (_la - 78 & ~0x1f) == 0 && (1 << _la - 78 & (1 << CypherParser.STARTS - 78 | 1 << CypherParser.ENDS - 78 | 1 << CypherParser.CONTAINS - 78 | 1 << CypherParser.IS - 78 | 1 << CypherParser.NULL - 78 | 1 << CypherParser.COUNT - 78 | 1 << CypherParser.ANY - 78 | 1 << CypherParser.NONE - 78 | 1 << CypherParser.SINGLE - 78 | 1 << CypherParser.TRUE - 78 | 1 << CypherParser.FALSE - 78 | 1 << CypherParser.EXISTS - 78 | 1 << CypherParser.CASE - 78 | 1 << CypherParser.ELSE - 78 | 1 << CypherParser.END - 78 | 1 << CypherParser.WHEN - 78 | 1 << CypherParser.THEN - 78 | 1 << CypherParser.HexLetter - 78)) !== 0 || (_la - 111 & ~0x1f) == 0 && (1 << _la - 111 & (1 << CypherParser.CONSTRAINT - 111 | 1 << CypherParser.DO - 111 | 1 << CypherParser.FOR - 111 | 1 << CypherParser.REQUIRE - 111 | 1 << CypherParser.UNIQUE - 111 | 1 << CypherParser.MANDATORY - 111 | 1 << CypherParser.SCALAR - 111 | 1 << CypherParser.OF - 111 | 1 << CypherParser.ADD - 111 | 1 << CypherParser.DROP - 111 | 1 << CypherParser.FILTER - 111 | 1 << CypherParser.EXTRACT - 111 | 1 << CypherParser.UnescapedSymbolicName - 111 | 1 << CypherParser.EscapedSymbolicName - 111)) !== 0) {
        this.state = 1526;
        this.oC_PropertyKeyName();
        this.state = 1528;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 1527;
          this.match(CypherParser.SP);
        }

        this.state = 1530;
        this.match(CypherParser.T__9);
        this.state = 1532;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 1531;
          this.match(CypherParser.SP);
        }

        this.state = 1534;
        this.oC_Expression();
        this.state = 1536;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        if (_la === CypherParser.SP) {
          this.state = 1535;
          this.match(CypherParser.SP);
        }

        this.state = 1556;

        this._errHandler.sync(this);

        _la = this._input.LA(1);

        while (_la === CypherParser.T__1) {
          this.state = 1538;
          this.match(CypherParser.T__1);
          this.state = 1540;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1539;
            this.match(CypherParser.SP);
          }

          this.state = 1542;
          this.oC_PropertyKeyName();
          this.state = 1544;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1543;
            this.match(CypherParser.SP);
          }

          this.state = 1546;
          this.match(CypherParser.T__9);
          this.state = 1548;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1547;
            this.match(CypherParser.SP);
          }

          this.state = 1550;
          this.oC_Expression();
          this.state = 1552;

          this._errHandler.sync(this);

          _la = this._input.LA(1);

          if (_la === CypherParser.SP) {
            this.state = 1551;
            this.match(CypherParser.SP);
          }

          this.state = 1558;

          this._errHandler.sync(this);

          _la = this._input.LA(1);
        }
      }

      this.state = 1561;
      this.match(CypherParser.T__24);
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_Parameter() {
    let localctx = new OC_ParameterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, CypherParser.RULE_oC_Parameter);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1563;
      this.match(CypherParser.T__25);
      this.state = 1566;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case CypherParser.COUNT:
        case CypherParser.ANY:
        case CypherParser.NONE:
        case CypherParser.SINGLE:
        case CypherParser.HexLetter:
        case CypherParser.FILTER:
        case CypherParser.EXTRACT:
        case CypherParser.UnescapedSymbolicName:
        case CypherParser.EscapedSymbolicName:
          this.state = 1564;
          this.oC_SymbolicName();
          break;

        case CypherParser.DecimalInteger:
          this.state = 1565;
          this.match(CypherParser.DecimalInteger);
          break;

        default:
          throw new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_PropertyExpression() {
    let localctx = new OC_PropertyExpressionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, CypherParser.RULE_oC_PropertyExpression);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1568;
      this.oC_Atom();
      this.state = 1573;

      this._errHandler.sync(this);

      var _alt = 1;

      do {
        switch (_alt) {
          case 1:
            this.state = 1570;

            this._errHandler.sync(this);

            _la = this._input.LA(1);

            if (_la === CypherParser.SP) {
              this.state = 1569;
              this.match(CypherParser.SP);
            }

            this.state = 1572;
            this.oC_PropertyLookup();
            break;

          default:
            throw new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.NoViableAltException(this);
        }

        this.state = 1575;

        this._errHandler.sync(this);

        _alt = this._interp.adaptivePredict(this._input, 292, this._ctx);
      } while (_alt != 2 && _alt != antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.atn.ATN.INVALID_ALT_NUMBER);
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_PropertyKeyName() {
    let localctx = new OC_PropertyKeyNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, CypherParser.RULE_oC_PropertyKeyName);

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1577;
      this.oC_SchemaName();
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_IntegerLiteral() {
    let localctx = new OC_IntegerLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, CypherParser.RULE_oC_IntegerLiteral);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1579;
      _la = this._input.LA(1);

      if (!((_la - 99 & ~0x1f) == 0 && (1 << _la - 99 & (1 << CypherParser.HexInteger - 99 | 1 << CypherParser.DecimalInteger - 99 | 1 << CypherParser.OctalInteger - 99)) !== 0)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);

        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_DoubleLiteral() {
    let localctx = new OC_DoubleLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, CypherParser.RULE_oC_DoubleLiteral);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1581;
      _la = this._input.LA(1);

      if (!(_la === CypherParser.ExponentDecimalReal || _la === CypherParser.RegularDecimalReal)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);

        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_SchemaName() {
    let localctx = new OC_SchemaNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, CypherParser.RULE_oC_SchemaName);

    try {
      this.state = 1585;

      this._errHandler.sync(this);

      switch (this._input.LA(1)) {
        case CypherParser.COUNT:
        case CypherParser.ANY:
        case CypherParser.NONE:
        case CypherParser.SINGLE:
        case CypherParser.HexLetter:
        case CypherParser.FILTER:
        case CypherParser.EXTRACT:
        case CypherParser.UnescapedSymbolicName:
        case CypherParser.EscapedSymbolicName:
          this.enterOuterAlt(localctx, 1);
          this.state = 1583;
          this.oC_SymbolicName();
          break;

        case CypherParser.UNION:
        case CypherParser.ALL:
        case CypherParser.OPTIONAL:
        case CypherParser.MATCH:
        case CypherParser.UNWIND:
        case CypherParser.AS:
        case CypherParser.MERGE:
        case CypherParser.ON:
        case CypherParser.CREATE:
        case CypherParser.SET:
        case CypherParser.DETACH:
        case CypherParser.DELETE:
        case CypherParser.REMOVE:
        case CypherParser.WITH:
        case CypherParser.RETURN:
        case CypherParser.DISTINCT:
        case CypherParser.ORDER:
        case CypherParser.BY:
        case CypherParser.L_SKIP:
        case CypherParser.LIMIT:
        case CypherParser.ASCENDING:
        case CypherParser.ASC:
        case CypherParser.DESCENDING:
        case CypherParser.DESC:
        case CypherParser.WHERE:
        case CypherParser.OR:
        case CypherParser.XOR:
        case CypherParser.AND:
        case CypherParser.NOT:
        case CypherParser.IN:
        case CypherParser.STARTS:
        case CypherParser.ENDS:
        case CypherParser.CONTAINS:
        case CypherParser.IS:
        case CypherParser.NULL:
        case CypherParser.TRUE:
        case CypherParser.FALSE:
        case CypherParser.EXISTS:
        case CypherParser.CASE:
        case CypherParser.ELSE:
        case CypherParser.END:
        case CypherParser.WHEN:
        case CypherParser.THEN:
        case CypherParser.CONSTRAINT:
        case CypherParser.DO:
        case CypherParser.FOR:
        case CypherParser.REQUIRE:
        case CypherParser.UNIQUE:
        case CypherParser.MANDATORY:
        case CypherParser.SCALAR:
        case CypherParser.OF:
        case CypherParser.ADD:
        case CypherParser.DROP:
          this.enterOuterAlt(localctx, 2);
          this.state = 1584;
          this.oC_ReservedWord();
          break;

        default:
          throw new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.NoViableAltException(this);
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_ReservedWord() {
    let localctx = new OC_ReservedWordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, CypherParser.RULE_oC_ReservedWord);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1587;
      _la = this._input.LA(1);

      if (!((_la - 46 & ~0x1f) == 0 && (1 << _la - 46 & (1 << CypherParser.UNION - 46 | 1 << CypherParser.ALL - 46 | 1 << CypherParser.OPTIONAL - 46 | 1 << CypherParser.MATCH - 46 | 1 << CypherParser.UNWIND - 46 | 1 << CypherParser.AS - 46 | 1 << CypherParser.MERGE - 46 | 1 << CypherParser.ON - 46 | 1 << CypherParser.CREATE - 46 | 1 << CypherParser.SET - 46 | 1 << CypherParser.DETACH - 46 | 1 << CypherParser.DELETE - 46 | 1 << CypherParser.REMOVE - 46 | 1 << CypherParser.WITH - 46 | 1 << CypherParser.RETURN - 46 | 1 << CypherParser.DISTINCT - 46 | 1 << CypherParser.ORDER - 46 | 1 << CypherParser.BY - 46 | 1 << CypherParser.L_SKIP - 46 | 1 << CypherParser.LIMIT - 46 | 1 << CypherParser.ASCENDING - 46 | 1 << CypherParser.ASC - 46 | 1 << CypherParser.DESCENDING - 46 | 1 << CypherParser.DESC - 46 | 1 << CypherParser.WHERE - 46 | 1 << CypherParser.OR - 46 | 1 << CypherParser.XOR - 46 | 1 << CypherParser.AND - 46 | 1 << CypherParser.NOT - 46 | 1 << CypherParser.IN - 46)) !== 0 || (_la - 78 & ~0x1f) == 0 && (1 << _la - 78 & (1 << CypherParser.STARTS - 78 | 1 << CypherParser.ENDS - 78 | 1 << CypherParser.CONTAINS - 78 | 1 << CypherParser.IS - 78 | 1 << CypherParser.NULL - 78 | 1 << CypherParser.TRUE - 78 | 1 << CypherParser.FALSE - 78 | 1 << CypherParser.EXISTS - 78 | 1 << CypherParser.CASE - 78 | 1 << CypherParser.ELSE - 78 | 1 << CypherParser.END - 78 | 1 << CypherParser.WHEN - 78 | 1 << CypherParser.THEN - 78)) !== 0 || (_la - 111 & ~0x1f) == 0 && (1 << _la - 111 & (1 << CypherParser.CONSTRAINT - 111 | 1 << CypherParser.DO - 111 | 1 << CypherParser.FOR - 111 | 1 << CypherParser.REQUIRE - 111 | 1 << CypherParser.UNIQUE - 111 | 1 << CypherParser.MANDATORY - 111 | 1 << CypherParser.SCALAR - 111 | 1 << CypherParser.OF - 111 | 1 << CypherParser.ADD - 111 | 1 << CypherParser.DROP - 111)) !== 0)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);

        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_SymbolicName() {
    let localctx = new OC_SymbolicNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, CypherParser.RULE_oC_SymbolicName);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1589;
      _la = this._input.LA(1);

      if (!((_la - 85 & ~0x1f) == 0 && (1 << _la - 85 & (1 << CypherParser.COUNT - 85 | 1 << CypherParser.ANY - 85 | 1 << CypherParser.NONE - 85 | 1 << CypherParser.SINGLE - 85 | 1 << CypherParser.HexLetter - 85)) !== 0 || (_la - 121 & ~0x1f) == 0 && (1 << _la - 121 & (1 << CypherParser.FILTER - 121 | 1 << CypherParser.EXTRACT - 121 | 1 << CypherParser.UnescapedSymbolicName - 121 | 1 << CypherParser.EscapedSymbolicName - 121)) !== 0)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);

        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_LeftArrowHead() {
    let localctx = new OC_LeftArrowHeadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, CypherParser.RULE_oC_LeftArrowHead);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1591;
      _la = this._input.LA(1);

      if (!((_la & ~0x1f) == 0 && (1 << _la & (1 << CypherParser.T__18 | 1 << CypherParser.T__26 | 1 << CypherParser.T__27 | 1 << CypherParser.T__28 | 1 << CypherParser.T__29)) !== 0)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);

        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_RightArrowHead() {
    let localctx = new OC_RightArrowHeadContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, CypherParser.RULE_oC_RightArrowHead);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1593;
      _la = this._input.LA(1);

      if (!((_la - 20 & ~0x1f) == 0 && (1 << _la - 20 & (1 << CypherParser.T__19 - 20 | 1 << CypherParser.T__30 - 20 | 1 << CypherParser.T__31 - 20 | 1 << CypherParser.T__32 - 20 | 1 << CypherParser.T__33 - 20)) !== 0)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);

        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

  oC_Dash() {
    let localctx = new OC_DashContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, CypherParser.RULE_oC_Dash);
    var _la = 0; // Token type

    try {
      this.enterOuterAlt(localctx, 1);
      this.state = 1595;
      _la = this._input.LA(1);

      if (!((_la - 14 & ~0x1f) == 0 && (1 << _la - 14 & (1 << CypherParser.T__13 - 14 | 1 << CypherParser.T__34 - 14 | 1 << CypherParser.T__35 - 14 | 1 << CypherParser.T__36 - 14 | 1 << CypherParser.T__37 - 14 | 1 << CypherParser.T__38 - 14 | 1 << CypherParser.T__39 - 14 | 1 << CypherParser.T__40 - 14 | 1 << CypherParser.T__41 - 14 | 1 << CypherParser.T__42 - 14 | 1 << CypherParser.T__43 - 14 | 1 << CypherParser.T__44 - 14)) !== 0)) {
        this._errHandler.recoverInline(this);
      } else {
        this._errHandler.reportMatch(this);

        this.consume();
      }
    } catch (re) {
      if (re instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.RecognitionException) {
        localctx.exception = re;

        this._errHandler.reportError(this, re);

        this._errHandler.recover(this, re);
      } else {
        throw re;
      }
    } finally {
      this.exitRule();
    }

    return localctx;
  }

}

_defineProperty(CypherParser, "grammarFileName", "Cypher.g4");

_defineProperty(CypherParser, "literalNames", [null, "';'", "','", "'='", "'+='", "'*'", "'('", "')'", "'['", "']'", "':'", "'|'", "'..'", "'+'", "'-'", "'/'", "'%'", "'^'", "'<>'", "'<'", "'>'", "'<='", "'>='", "'.'", "'{'", "'}'", "'$'", "'\u27E8'", "'\u3008'", "'\uFE64'", "'\uFF1C'", "'\u27E9'", "'\u3009'", "'\uFE65'", "'\uFF1E'", "'\u00AD'", "'\u2010'", "'\u2011'", "'\u2012'", "'\u2013'", "'\u2014'", "'\u2015'", "'\u2212'", "'\uFE58'", "'\uFE63'", "'\uFF0D'", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "'0'"]);

_defineProperty(CypherParser, "symbolicNames", [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNION", "ALL", "OPTIONAL", "MATCH", "UNWIND", "AS", "MERGE", "ON", "CREATE", "SET", "DETACH", "DELETE", "REMOVE", "CALL", "YIELD", "WITH", "RETURN", "DISTINCT", "ORDER", "BY", "L_SKIP", "LIMIT", "ASCENDING", "ASC", "DESCENDING", "DESC", "WHERE", "OR", "XOR", "AND", "NOT", "IN", "STARTS", "ENDS", "CONTAINS", "IS", "NULL", "SHORTESTPATH", "ALLSHORTESTPATHS", "COUNT", "ANY", "NONE", "SINGLE", "TRUE", "FALSE", "EXISTS", "CASE", "ELSE", "END", "WHEN", "THEN", "StringLiteral", "EscapedChar", "HexInteger", "DecimalInteger", "OctalInteger", "HexLetter", "HexDigit", "Digit", "NonZeroDigit", "NonZeroOctDigit", "OctDigit", "ZeroDigit", "ExponentDecimalReal", "RegularDecimalReal", "CONSTRAINT", "DO", "FOR", "REQUIRE", "UNIQUE", "MANDATORY", "SCALAR", "OF", "ADD", "DROP", "FILTER", "EXTRACT", "UnescapedSymbolicName", "IdentifierStart", "IdentifierPart", "EscapedSymbolicName", "SP", "WHITESPACE", "Comment"]);

_defineProperty(CypherParser, "ruleNames", ["oC_Cypher", "oC_Statement", "oC_Query", "oC_RegularQuery", "oC_Union", "oC_SingleQuery", "oC_SinglePartQuery", "oC_MultiPartQuery", "oC_UpdatingClause", "oC_ReadingClause", "oC_Match", "oC_Unwind", "oC_Merge", "oC_MergeAction", "oC_Create", "oC_Set", "oC_SetItem", "oC_Delete", "oC_Remove", "oC_RemoveItem", "oC_InQueryCall", "oC_StandaloneCall", "oC_YieldItems", "oC_YieldItem", "oC_With", "oC_Return", "oC_ProjectionBody", "oC_ProjectionItems", "oC_ProjectionItem", "oC_Order", "oC_Skip", "oC_Limit", "oC_SortItem", "oC_Where", "oC_Pattern", "oC_PatternPart", "oC_AnonymousPatternPart", "oC_PatternElement", "oC_NodePattern", "oC_PatternElementChain", "oC_RelationshipPattern", "oC_RelationshipDetail", "oC_Properties", "oC_RelationshipTypes", "oC_NodeLabels", "oC_NodeLabel", "oC_RangeLiteral", "oC_LabelName", "oC_RelTypeName", "oC_Expression", "oC_OrExpression", "oC_XorExpression", "oC_AndExpression", "oC_NotExpression", "oC_ComparisonExpression", "oC_AddOrSubtractExpression", "oC_MultiplyDivideModuloExpression", "oC_PowerOfExpression", "oC_UnaryAddOrSubtractExpression", "oC_StringListNullOperatorExpression", "oC_ListOperatorExpression", "oC_StringOperatorExpression", "oC_NullOperatorExpression", "oC_PropertyOrLabelsExpression", "oC_ShortestPathPatternFunction", "oC_ShortestPathFunctionName", "oC_AllShortestPathFunctionName", "oC_Atom", "oC_Literal", "oC_BooleanLiteral", "oC_ListLiteral", "oC_PartialComparisonExpression", "oC_ParenthesizedExpression", "oC_RelationshipsPattern", "oC_FilterExpression", "oC_IdInColl", "oC_FunctionInvocation", "oC_FunctionName", "oC_ExplicitProcedureInvocation", "oC_ImplicitProcedureInvocation", "oC_ProcedureResultField", "oC_ProcedureName", "oC_Namespace", "oC_ListComprehension", "oC_PatternComprehension", "oC_PropertyLookup", "oC_CaseExpression", "oC_CaseAlternatives", "oC_Variable", "oC_NumberLiteral", "oC_MapLiteral", "oC_Parameter", "oC_PropertyExpression", "oC_PropertyKeyName", "oC_IntegerLiteral", "oC_DoubleLiteral", "oC_SchemaName", "oC_ReservedWord", "oC_SymbolicName", "oC_LeftArrowHead", "oC_RightArrowHead", "oC_Dash"]);

CypherParser.EOF = antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.Token.EOF;
CypherParser.T__0 = 1;
CypherParser.T__1 = 2;
CypherParser.T__2 = 3;
CypherParser.T__3 = 4;
CypherParser.T__4 = 5;
CypherParser.T__5 = 6;
CypherParser.T__6 = 7;
CypherParser.T__7 = 8;
CypherParser.T__8 = 9;
CypherParser.T__9 = 10;
CypherParser.T__10 = 11;
CypherParser.T__11 = 12;
CypherParser.T__12 = 13;
CypherParser.T__13 = 14;
CypherParser.T__14 = 15;
CypherParser.T__15 = 16;
CypherParser.T__16 = 17;
CypherParser.T__17 = 18;
CypherParser.T__18 = 19;
CypherParser.T__19 = 20;
CypherParser.T__20 = 21;
CypherParser.T__21 = 22;
CypherParser.T__22 = 23;
CypherParser.T__23 = 24;
CypherParser.T__24 = 25;
CypherParser.T__25 = 26;
CypherParser.T__26 = 27;
CypherParser.T__27 = 28;
CypherParser.T__28 = 29;
CypherParser.T__29 = 30;
CypherParser.T__30 = 31;
CypherParser.T__31 = 32;
CypherParser.T__32 = 33;
CypherParser.T__33 = 34;
CypherParser.T__34 = 35;
CypherParser.T__35 = 36;
CypherParser.T__36 = 37;
CypherParser.T__37 = 38;
CypherParser.T__38 = 39;
CypherParser.T__39 = 40;
CypherParser.T__40 = 41;
CypherParser.T__41 = 42;
CypherParser.T__42 = 43;
CypherParser.T__43 = 44;
CypherParser.T__44 = 45;
CypherParser.UNION = 46;
CypherParser.ALL = 47;
CypherParser.OPTIONAL = 48;
CypherParser.MATCH = 49;
CypherParser.UNWIND = 50;
CypherParser.AS = 51;
CypherParser.MERGE = 52;
CypherParser.ON = 53;
CypherParser.CREATE = 54;
CypherParser.SET = 55;
CypherParser.DETACH = 56;
CypherParser.DELETE = 57;
CypherParser.REMOVE = 58;
CypherParser.CALL = 59;
CypherParser.YIELD = 60;
CypherParser.WITH = 61;
CypherParser.RETURN = 62;
CypherParser.DISTINCT = 63;
CypherParser.ORDER = 64;
CypherParser.BY = 65;
CypherParser.L_SKIP = 66;
CypherParser.LIMIT = 67;
CypherParser.ASCENDING = 68;
CypherParser.ASC = 69;
CypherParser.DESCENDING = 70;
CypherParser.DESC = 71;
CypherParser.WHERE = 72;
CypherParser.OR = 73;
CypherParser.XOR = 74;
CypherParser.AND = 75;
CypherParser.NOT = 76;
CypherParser.IN = 77;
CypherParser.STARTS = 78;
CypherParser.ENDS = 79;
CypherParser.CONTAINS = 80;
CypherParser.IS = 81;
CypherParser.NULL = 82;
CypherParser.SHORTESTPATH = 83;
CypherParser.ALLSHORTESTPATHS = 84;
CypherParser.COUNT = 85;
CypherParser.ANY = 86;
CypherParser.NONE = 87;
CypherParser.SINGLE = 88;
CypherParser.TRUE = 89;
CypherParser.FALSE = 90;
CypherParser.EXISTS = 91;
CypherParser.CASE = 92;
CypherParser.ELSE = 93;
CypherParser.END = 94;
CypherParser.WHEN = 95;
CypherParser.THEN = 96;
CypherParser.StringLiteral = 97;
CypherParser.EscapedChar = 98;
CypherParser.HexInteger = 99;
CypherParser.DecimalInteger = 100;
CypherParser.OctalInteger = 101;
CypherParser.HexLetter = 102;
CypherParser.HexDigit = 103;
CypherParser.Digit = 104;
CypherParser.NonZeroDigit = 105;
CypherParser.NonZeroOctDigit = 106;
CypherParser.OctDigit = 107;
CypherParser.ZeroDigit = 108;
CypherParser.ExponentDecimalReal = 109;
CypherParser.RegularDecimalReal = 110;
CypherParser.CONSTRAINT = 111;
CypherParser.DO = 112;
CypherParser.FOR = 113;
CypherParser.REQUIRE = 114;
CypherParser.UNIQUE = 115;
CypherParser.MANDATORY = 116;
CypherParser.SCALAR = 117;
CypherParser.OF = 118;
CypherParser.ADD = 119;
CypherParser.DROP = 120;
CypherParser.FILTER = 121;
CypherParser.EXTRACT = 122;
CypherParser.UnescapedSymbolicName = 123;
CypherParser.IdentifierStart = 124;
CypherParser.IdentifierPart = 125;
CypherParser.EscapedSymbolicName = 126;
CypherParser.SP = 127;
CypherParser.WHITESPACE = 128;
CypherParser.Comment = 129;
CypherParser.RULE_oC_Cypher = 0;
CypherParser.RULE_oC_Statement = 1;
CypherParser.RULE_oC_Query = 2;
CypherParser.RULE_oC_RegularQuery = 3;
CypherParser.RULE_oC_Union = 4;
CypherParser.RULE_oC_SingleQuery = 5;
CypherParser.RULE_oC_SinglePartQuery = 6;
CypherParser.RULE_oC_MultiPartQuery = 7;
CypherParser.RULE_oC_UpdatingClause = 8;
CypherParser.RULE_oC_ReadingClause = 9;
CypherParser.RULE_oC_Match = 10;
CypherParser.RULE_oC_Unwind = 11;
CypherParser.RULE_oC_Merge = 12;
CypherParser.RULE_oC_MergeAction = 13;
CypherParser.RULE_oC_Create = 14;
CypherParser.RULE_oC_Set = 15;
CypherParser.RULE_oC_SetItem = 16;
CypherParser.RULE_oC_Delete = 17;
CypherParser.RULE_oC_Remove = 18;
CypherParser.RULE_oC_RemoveItem = 19;
CypherParser.RULE_oC_InQueryCall = 20;
CypherParser.RULE_oC_StandaloneCall = 21;
CypherParser.RULE_oC_YieldItems = 22;
CypherParser.RULE_oC_YieldItem = 23;
CypherParser.RULE_oC_With = 24;
CypherParser.RULE_oC_Return = 25;
CypherParser.RULE_oC_ProjectionBody = 26;
CypherParser.RULE_oC_ProjectionItems = 27;
CypherParser.RULE_oC_ProjectionItem = 28;
CypherParser.RULE_oC_Order = 29;
CypherParser.RULE_oC_Skip = 30;
CypherParser.RULE_oC_Limit = 31;
CypherParser.RULE_oC_SortItem = 32;
CypherParser.RULE_oC_Where = 33;
CypherParser.RULE_oC_Pattern = 34;
CypherParser.RULE_oC_PatternPart = 35;
CypherParser.RULE_oC_AnonymousPatternPart = 36;
CypherParser.RULE_oC_PatternElement = 37;
CypherParser.RULE_oC_NodePattern = 38;
CypherParser.RULE_oC_PatternElementChain = 39;
CypherParser.RULE_oC_RelationshipPattern = 40;
CypherParser.RULE_oC_RelationshipDetail = 41;
CypherParser.RULE_oC_Properties = 42;
CypherParser.RULE_oC_RelationshipTypes = 43;
CypherParser.RULE_oC_NodeLabels = 44;
CypherParser.RULE_oC_NodeLabel = 45;
CypherParser.RULE_oC_RangeLiteral = 46;
CypherParser.RULE_oC_LabelName = 47;
CypherParser.RULE_oC_RelTypeName = 48;
CypherParser.RULE_oC_Expression = 49;
CypherParser.RULE_oC_OrExpression = 50;
CypherParser.RULE_oC_XorExpression = 51;
CypherParser.RULE_oC_AndExpression = 52;
CypherParser.RULE_oC_NotExpression = 53;
CypherParser.RULE_oC_ComparisonExpression = 54;
CypherParser.RULE_oC_AddOrSubtractExpression = 55;
CypherParser.RULE_oC_MultiplyDivideModuloExpression = 56;
CypherParser.RULE_oC_PowerOfExpression = 57;
CypherParser.RULE_oC_UnaryAddOrSubtractExpression = 58;
CypherParser.RULE_oC_StringListNullOperatorExpression = 59;
CypherParser.RULE_oC_ListOperatorExpression = 60;
CypherParser.RULE_oC_StringOperatorExpression = 61;
CypherParser.RULE_oC_NullOperatorExpression = 62;
CypherParser.RULE_oC_PropertyOrLabelsExpression = 63;
CypherParser.RULE_oC_ShortestPathPatternFunction = 64;
CypherParser.RULE_oC_ShortestPathFunctionName = 65;
CypherParser.RULE_oC_AllShortestPathFunctionName = 66;
CypherParser.RULE_oC_Atom = 67;
CypherParser.RULE_oC_Literal = 68;
CypherParser.RULE_oC_BooleanLiteral = 69;
CypherParser.RULE_oC_ListLiteral = 70;
CypherParser.RULE_oC_PartialComparisonExpression = 71;
CypherParser.RULE_oC_ParenthesizedExpression = 72;
CypherParser.RULE_oC_RelationshipsPattern = 73;
CypherParser.RULE_oC_FilterExpression = 74;
CypherParser.RULE_oC_IdInColl = 75;
CypherParser.RULE_oC_FunctionInvocation = 76;
CypherParser.RULE_oC_FunctionName = 77;
CypherParser.RULE_oC_ExplicitProcedureInvocation = 78;
CypherParser.RULE_oC_ImplicitProcedureInvocation = 79;
CypherParser.RULE_oC_ProcedureResultField = 80;
CypherParser.RULE_oC_ProcedureName = 81;
CypherParser.RULE_oC_Namespace = 82;
CypherParser.RULE_oC_ListComprehension = 83;
CypherParser.RULE_oC_PatternComprehension = 84;
CypherParser.RULE_oC_PropertyLookup = 85;
CypherParser.RULE_oC_CaseExpression = 86;
CypherParser.RULE_oC_CaseAlternatives = 87;
CypherParser.RULE_oC_Variable = 88;
CypherParser.RULE_oC_NumberLiteral = 89;
CypherParser.RULE_oC_MapLiteral = 90;
CypherParser.RULE_oC_Parameter = 91;
CypherParser.RULE_oC_PropertyExpression = 92;
CypherParser.RULE_oC_PropertyKeyName = 93;
CypherParser.RULE_oC_IntegerLiteral = 94;
CypherParser.RULE_oC_DoubleLiteral = 95;
CypherParser.RULE_oC_SchemaName = 96;
CypherParser.RULE_oC_ReservedWord = 97;
CypherParser.RULE_oC_SymbolicName = 98;
CypherParser.RULE_oC_LeftArrowHead = 99;
CypherParser.RULE_oC_RightArrowHead = 100;
CypherParser.RULE_oC_Dash = 101;

class OC_CypherContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Cypher;
  }

  oC_Statement() {
    return this.getTypedRuleContext(OC_StatementContext, 0);
  }

  EOF() {
    return this.getToken(CypherParser.EOF, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_Cypher(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_Cypher(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_Cypher(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_StatementContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Statement;
  }

  oC_Query() {
    return this.getTypedRuleContext(OC_QueryContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_Statement(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_Statement(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_Statement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_QueryContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Query;
  }

  oC_RegularQuery() {
    return this.getTypedRuleContext(OC_RegularQueryContext, 0);
  }

  oC_StandaloneCall() {
    return this.getTypedRuleContext(OC_StandaloneCallContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_Query(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_Query(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_Query(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_RegularQueryContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "oC_Union", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_UnionContext);
      } else {
        return this.getTypedRuleContext(OC_UnionContext, i);
      }
    });

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_RegularQuery;
  }

  oC_SingleQuery() {
    return this.getTypedRuleContext(OC_SingleQueryContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_RegularQuery(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_RegularQuery(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_RegularQuery(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_UnionContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Union;
  }

  UNION() {
    return this.getToken(CypherParser.UNION, 0);
  }

  ALL() {
    return this.getToken(CypherParser.ALL, 0);
  }

  oC_SingleQuery() {
    return this.getTypedRuleContext(OC_SingleQueryContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_Union(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_Union(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_Union(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_SingleQueryContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_SingleQuery;
  }

  oC_SinglePartQuery() {
    return this.getTypedRuleContext(OC_SinglePartQueryContext, 0);
  }

  oC_MultiPartQuery() {
    return this.getTypedRuleContext(OC_MultiPartQueryContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_SingleQuery(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_SingleQuery(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_SingleQuery(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_SinglePartQueryContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "oC_ReadingClause", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_ReadingClauseContext);
      } else {
        return this.getTypedRuleContext(OC_ReadingClauseContext, i);
      }
    });

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    _defineProperty(this, "oC_UpdatingClause", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_UpdatingClauseContext);
      } else {
        return this.getTypedRuleContext(OC_UpdatingClauseContext, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_SinglePartQuery;
  }

  oC_Return() {
    return this.getTypedRuleContext(OC_ReturnContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_SinglePartQuery(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_SinglePartQuery(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_SinglePartQuery(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_MultiPartQueryContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "oC_With", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_WithContext);
      } else {
        return this.getTypedRuleContext(OC_WithContext, i);
      }
    });

    _defineProperty(this, "oC_ReadingClause", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_ReadingClauseContext);
      } else {
        return this.getTypedRuleContext(OC_ReadingClauseContext, i);
      }
    });

    _defineProperty(this, "oC_UpdatingClause", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_UpdatingClauseContext);
      } else {
        return this.getTypedRuleContext(OC_UpdatingClauseContext, i);
      }
    });

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_MultiPartQuery;
  }

  oC_SinglePartQuery() {
    return this.getTypedRuleContext(OC_SinglePartQueryContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_MultiPartQuery(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_MultiPartQuery(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_MultiPartQuery(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_UpdatingClauseContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_UpdatingClause;
  }

  oC_Create() {
    return this.getTypedRuleContext(OC_CreateContext, 0);
  }

  oC_Merge() {
    return this.getTypedRuleContext(OC_MergeContext, 0);
  }

  oC_Delete() {
    return this.getTypedRuleContext(OC_DeleteContext, 0);
  }

  oC_Set() {
    return this.getTypedRuleContext(OC_SetContext, 0);
  }

  oC_Remove() {
    return this.getTypedRuleContext(OC_RemoveContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_UpdatingClause(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_UpdatingClause(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_UpdatingClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_ReadingClauseContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_ReadingClause;
  }

  oC_Match() {
    return this.getTypedRuleContext(OC_MatchContext, 0);
  }

  oC_Unwind() {
    return this.getTypedRuleContext(OC_UnwindContext, 0);
  }

  oC_InQueryCall() {
    return this.getTypedRuleContext(OC_InQueryCallContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_ReadingClause(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_ReadingClause(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_ReadingClause(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_MatchContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Match;
  }

  MATCH() {
    return this.getToken(CypherParser.MATCH, 0);
  }

  oC_Pattern() {
    return this.getTypedRuleContext(OC_PatternContext, 0);
  }

  OPTIONAL() {
    return this.getToken(CypherParser.OPTIONAL, 0);
  }

  oC_Where() {
    return this.getTypedRuleContext(OC_WhereContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_Match(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_Match(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_Match(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_UnwindContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Unwind;
  }

  UNWIND() {
    return this.getToken(CypherParser.UNWIND, 0);
  }

  oC_Expression() {
    return this.getTypedRuleContext(OC_ExpressionContext, 0);
  }

  AS() {
    return this.getToken(CypherParser.AS, 0);
  }

  oC_Variable() {
    return this.getTypedRuleContext(OC_VariableContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_Unwind(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_Unwind(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_Unwind(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_MergeContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    _defineProperty(this, "oC_MergeAction", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_MergeActionContext);
      } else {
        return this.getTypedRuleContext(OC_MergeActionContext, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Merge;
  }

  MERGE() {
    return this.getToken(CypherParser.MERGE, 0);
  }

  oC_PatternPart() {
    return this.getTypedRuleContext(OC_PatternPartContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_Merge(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_Merge(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_Merge(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_MergeActionContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_MergeAction;
  }

  ON() {
    return this.getToken(CypherParser.ON, 0);
  }

  MATCH() {
    return this.getToken(CypherParser.MATCH, 0);
  }

  oC_Set() {
    return this.getTypedRuleContext(OC_SetContext, 0);
  }

  CREATE() {
    return this.getToken(CypherParser.CREATE, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_MergeAction(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_MergeAction(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_MergeAction(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_CreateContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Create;
  }

  CREATE() {
    return this.getToken(CypherParser.CREATE, 0);
  }

  oC_Pattern() {
    return this.getTypedRuleContext(OC_PatternContext, 0);
  }

  SP() {
    return this.getToken(CypherParser.SP, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_Create(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_Create(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_Create(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_SetContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "oC_SetItem", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_SetItemContext);
      } else {
        return this.getTypedRuleContext(OC_SetItemContext, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Set;
  }

  SET() {
    return this.getToken(CypherParser.SET, 0);
  }

  SP() {
    return this.getToken(CypherParser.SP, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_Set(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_Set(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_Set(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_SetItemContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_SetItem;
  }

  oC_PropertyExpression() {
    return this.getTypedRuleContext(OC_PropertyExpressionContext, 0);
  }

  oC_Expression() {
    return this.getTypedRuleContext(OC_ExpressionContext, 0);
  }

  oC_Variable() {
    return this.getTypedRuleContext(OC_VariableContext, 0);
  }

  oC_NodeLabels() {
    return this.getTypedRuleContext(OC_NodeLabelsContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_SetItem(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_SetItem(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_SetItem(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_DeleteContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "oC_Expression", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_ExpressionContext);
      } else {
        return this.getTypedRuleContext(OC_ExpressionContext, i);
      }
    });

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Delete;
  }

  DELETE() {
    return this.getToken(CypherParser.DELETE, 0);
  }

  DETACH() {
    return this.getToken(CypherParser.DETACH, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_Delete(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_Delete(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_Delete(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_RemoveContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    _defineProperty(this, "oC_RemoveItem", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_RemoveItemContext);
      } else {
        return this.getTypedRuleContext(OC_RemoveItemContext, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Remove;
  }

  REMOVE() {
    return this.getToken(CypherParser.REMOVE, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_Remove(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_Remove(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_Remove(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_RemoveItemContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_RemoveItem;
  }

  oC_Variable() {
    return this.getTypedRuleContext(OC_VariableContext, 0);
  }

  oC_NodeLabels() {
    return this.getTypedRuleContext(OC_NodeLabelsContext, 0);
  }

  oC_PropertyExpression() {
    return this.getTypedRuleContext(OC_PropertyExpressionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_RemoveItem(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_RemoveItem(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_RemoveItem(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_InQueryCallContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_InQueryCall;
  }

  CALL() {
    return this.getToken(CypherParser.CALL, 0);
  }

  oC_ExplicitProcedureInvocation() {
    return this.getTypedRuleContext(OC_ExplicitProcedureInvocationContext, 0);
  }

  YIELD() {
    return this.getToken(CypherParser.YIELD, 0);
  }

  oC_YieldItems() {
    return this.getTypedRuleContext(OC_YieldItemsContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_InQueryCall(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_InQueryCall(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_InQueryCall(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_StandaloneCallContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_StandaloneCall;
  }

  CALL() {
    return this.getToken(CypherParser.CALL, 0);
  }

  oC_ExplicitProcedureInvocation() {
    return this.getTypedRuleContext(OC_ExplicitProcedureInvocationContext, 0);
  }

  oC_ImplicitProcedureInvocation() {
    return this.getTypedRuleContext(OC_ImplicitProcedureInvocationContext, 0);
  }

  YIELD() {
    return this.getToken(CypherParser.YIELD, 0);
  }

  oC_YieldItems() {
    return this.getTypedRuleContext(OC_YieldItemsContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_StandaloneCall(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_StandaloneCall(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_StandaloneCall(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_YieldItemsContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "oC_YieldItem", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_YieldItemContext);
      } else {
        return this.getTypedRuleContext(OC_YieldItemContext, i);
      }
    });

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_YieldItems;
  }

  oC_Where() {
    return this.getTypedRuleContext(OC_WhereContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_YieldItems(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_YieldItems(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_YieldItems(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_YieldItemContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_YieldItem;
  }

  oC_Variable() {
    return this.getTypedRuleContext(OC_VariableContext, 0);
  }

  oC_ProcedureResultField() {
    return this.getTypedRuleContext(OC_ProcedureResultFieldContext, 0);
  }

  AS() {
    return this.getToken(CypherParser.AS, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_YieldItem(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_YieldItem(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_YieldItem(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_WithContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_With;
  }

  WITH() {
    return this.getToken(CypherParser.WITH, 0);
  }

  oC_ProjectionBody() {
    return this.getTypedRuleContext(OC_ProjectionBodyContext, 0);
  }

  oC_Where() {
    return this.getTypedRuleContext(OC_WhereContext, 0);
  }

  SP() {
    return this.getToken(CypherParser.SP, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_With(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_With(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_With(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_ReturnContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Return;
  }

  RETURN() {
    return this.getToken(CypherParser.RETURN, 0);
  }

  oC_ProjectionBody() {
    return this.getTypedRuleContext(OC_ProjectionBodyContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_Return(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_Return(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_Return(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_ProjectionBodyContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_ProjectionBody;
  }

  oC_ProjectionItems() {
    return this.getTypedRuleContext(OC_ProjectionItemsContext, 0);
  }

  DISTINCT() {
    return this.getToken(CypherParser.DISTINCT, 0);
  }

  oC_Order() {
    return this.getTypedRuleContext(OC_OrderContext, 0);
  }

  oC_Skip() {
    return this.getTypedRuleContext(OC_SkipContext, 0);
  }

  oC_Limit() {
    return this.getTypedRuleContext(OC_LimitContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_ProjectionBody(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_ProjectionBody(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_ProjectionBody(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_ProjectionItemsContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "oC_ProjectionItem", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_ProjectionItemContext);
      } else {
        return this.getTypedRuleContext(OC_ProjectionItemContext, i);
      }
    });

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_ProjectionItems;
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_ProjectionItems(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_ProjectionItems(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_ProjectionItems(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_ProjectionItemContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_ProjectionItem;
  }

  oC_Expression() {
    return this.getTypedRuleContext(OC_ExpressionContext, 0);
  }

  AS() {
    return this.getToken(CypherParser.AS, 0);
  }

  oC_Variable() {
    return this.getTypedRuleContext(OC_VariableContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_ProjectionItem(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_ProjectionItem(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_ProjectionItem(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_OrderContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    _defineProperty(this, "oC_SortItem", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_SortItemContext);
      } else {
        return this.getTypedRuleContext(OC_SortItemContext, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Order;
  }

  ORDER() {
    return this.getToken(CypherParser.ORDER, 0);
  }

  BY() {
    return this.getToken(CypherParser.BY, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_Order(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_Order(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_Order(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_SkipContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Skip;
  }

  L_SKIP() {
    return this.getToken(CypherParser.L_SKIP, 0);
  }

  SP() {
    return this.getToken(CypherParser.SP, 0);
  }

  oC_Expression() {
    return this.getTypedRuleContext(OC_ExpressionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_Skip(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_Skip(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_Skip(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_LimitContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Limit;
  }

  LIMIT() {
    return this.getToken(CypherParser.LIMIT, 0);
  }

  SP() {
    return this.getToken(CypherParser.SP, 0);
  }

  oC_Expression() {
    return this.getTypedRuleContext(OC_ExpressionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_Limit(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_Limit(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_Limit(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_SortItemContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_SortItem;
  }

  oC_Expression() {
    return this.getTypedRuleContext(OC_ExpressionContext, 0);
  }

  ASCENDING() {
    return this.getToken(CypherParser.ASCENDING, 0);
  }

  ASC() {
    return this.getToken(CypherParser.ASC, 0);
  }

  DESCENDING() {
    return this.getToken(CypherParser.DESCENDING, 0);
  }

  DESC() {
    return this.getToken(CypherParser.DESC, 0);
  }

  SP() {
    return this.getToken(CypherParser.SP, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_SortItem(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_SortItem(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_SortItem(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_WhereContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Where;
  }

  WHERE() {
    return this.getToken(CypherParser.WHERE, 0);
  }

  SP() {
    return this.getToken(CypherParser.SP, 0);
  }

  oC_Expression() {
    return this.getTypedRuleContext(OC_ExpressionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_Where(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_Where(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_Where(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_PatternContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "oC_PatternPart", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_PatternPartContext);
      } else {
        return this.getTypedRuleContext(OC_PatternPartContext, i);
      }
    });

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Pattern;
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_Pattern(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_Pattern(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_Pattern(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_PatternPartContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_PatternPart;
  }

  oC_Variable() {
    return this.getTypedRuleContext(OC_VariableContext, 0);
  }

  oC_AnonymousPatternPart() {
    return this.getTypedRuleContext(OC_AnonymousPatternPartContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_PatternPart(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_PatternPart(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_PatternPart(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_AnonymousPatternPartContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_AnonymousPatternPart;
  }

  oC_ShortestPathPatternFunction() {
    return this.getTypedRuleContext(OC_ShortestPathPatternFunctionContext, 0);
  }

  oC_PatternElement() {
    return this.getTypedRuleContext(OC_PatternElementContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_AnonymousPatternPart(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_AnonymousPatternPart(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_AnonymousPatternPart(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_PatternElementContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "oC_PatternElementChain", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_PatternElementChainContext);
      } else {
        return this.getTypedRuleContext(OC_PatternElementChainContext, i);
      }
    });

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_PatternElement;
  }

  oC_NodePattern() {
    return this.getTypedRuleContext(OC_NodePatternContext, 0);
  }

  oC_PatternElement() {
    return this.getTypedRuleContext(OC_PatternElementContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_PatternElement(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_PatternElement(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_PatternElement(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_NodePatternContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_NodePattern;
  }

  oC_Variable() {
    return this.getTypedRuleContext(OC_VariableContext, 0);
  }

  oC_NodeLabels() {
    return this.getTypedRuleContext(OC_NodeLabelsContext, 0);
  }

  oC_Properties() {
    return this.getTypedRuleContext(OC_PropertiesContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_NodePattern(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_NodePattern(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_NodePattern(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_PatternElementChainContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_PatternElementChain;
  }

  oC_RelationshipPattern() {
    return this.getTypedRuleContext(OC_RelationshipPatternContext, 0);
  }

  oC_NodePattern() {
    return this.getTypedRuleContext(OC_NodePatternContext, 0);
  }

  SP() {
    return this.getToken(CypherParser.SP, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_PatternElementChain(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_PatternElementChain(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_PatternElementChain(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_RelationshipPatternContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "oC_Dash", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_DashContext);
      } else {
        return this.getTypedRuleContext(OC_DashContext, i);
      }
    });

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_RelationshipPattern;
  }

  oC_LeftArrowHead() {
    return this.getTypedRuleContext(OC_LeftArrowHeadContext, 0);
  }

  oC_RightArrowHead() {
    return this.getTypedRuleContext(OC_RightArrowHeadContext, 0);
  }

  oC_RelationshipDetail() {
    return this.getTypedRuleContext(OC_RelationshipDetailContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_RelationshipPattern(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_RelationshipPattern(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_RelationshipPattern(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_RelationshipDetailContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_RelationshipDetail;
  }

  oC_Variable() {
    return this.getTypedRuleContext(OC_VariableContext, 0);
  }

  oC_RelationshipTypes() {
    return this.getTypedRuleContext(OC_RelationshipTypesContext, 0);
  }

  oC_RangeLiteral() {
    return this.getTypedRuleContext(OC_RangeLiteralContext, 0);
  }

  oC_Properties() {
    return this.getTypedRuleContext(OC_PropertiesContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_RelationshipDetail(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_RelationshipDetail(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_RelationshipDetail(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_PropertiesContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Properties;
  }

  oC_MapLiteral() {
    return this.getTypedRuleContext(OC_MapLiteralContext, 0);
  }

  oC_Parameter() {
    return this.getTypedRuleContext(OC_ParameterContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_Properties(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_Properties(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_Properties(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_RelationshipTypesContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "oC_RelTypeName", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_RelTypeNameContext);
      } else {
        return this.getTypedRuleContext(OC_RelTypeNameContext, i);
      }
    });

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_RelationshipTypes;
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_RelationshipTypes(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_RelationshipTypes(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_RelationshipTypes(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_NodeLabelsContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "oC_NodeLabel", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_NodeLabelContext);
      } else {
        return this.getTypedRuleContext(OC_NodeLabelContext, i);
      }
    });

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_NodeLabels;
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_NodeLabels(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_NodeLabels(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_NodeLabels(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_NodeLabelContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_NodeLabel;
  }

  oC_LabelName() {
    return this.getTypedRuleContext(OC_LabelNameContext, 0);
  }

  SP() {
    return this.getToken(CypherParser.SP, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_NodeLabel(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_NodeLabel(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_NodeLabel(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_RangeLiteralContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    _defineProperty(this, "oC_IntegerLiteral", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_IntegerLiteralContext);
      } else {
        return this.getTypedRuleContext(OC_IntegerLiteralContext, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_RangeLiteral;
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_RangeLiteral(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_RangeLiteral(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_RangeLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_LabelNameContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_LabelName;
  }

  oC_SchemaName() {
    return this.getTypedRuleContext(OC_SchemaNameContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_LabelName(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_LabelName(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_LabelName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_RelTypeNameContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_RelTypeName;
  }

  oC_SchemaName() {
    return this.getTypedRuleContext(OC_SchemaNameContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_RelTypeName(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_RelTypeName(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_RelTypeName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_ExpressionContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Expression;
  }

  oC_OrExpression() {
    return this.getTypedRuleContext(OC_OrExpressionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_Expression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_Expression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_Expression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_OrExpressionContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "oC_XorExpression", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_XorExpressionContext);
      } else {
        return this.getTypedRuleContext(OC_XorExpressionContext, i);
      }
    });

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    _defineProperty(this, "OR", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.OR);
      } else {
        return this.getToken(CypherParser.OR, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_OrExpression;
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_OrExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_OrExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_OrExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_XorExpressionContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "oC_AndExpression", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_AndExpressionContext);
      } else {
        return this.getTypedRuleContext(OC_AndExpressionContext, i);
      }
    });

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    _defineProperty(this, "XOR", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.XOR);
      } else {
        return this.getToken(CypherParser.XOR, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_XorExpression;
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_XorExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_XorExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_XorExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_AndExpressionContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "oC_NotExpression", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_NotExpressionContext);
      } else {
        return this.getTypedRuleContext(OC_NotExpressionContext, i);
      }
    });

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    _defineProperty(this, "AND", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.AND);
      } else {
        return this.getToken(CypherParser.AND, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_AndExpression;
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_AndExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_AndExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_AndExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_NotExpressionContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "NOT", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.NOT);
      } else {
        return this.getToken(CypherParser.NOT, i);
      }
    });

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_NotExpression;
  }

  oC_ComparisonExpression() {
    return this.getTypedRuleContext(OC_ComparisonExpressionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_NotExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_NotExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_NotExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_ComparisonExpressionContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "oC_PartialComparisonExpression", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_PartialComparisonExpressionContext);
      } else {
        return this.getTypedRuleContext(OC_PartialComparisonExpressionContext, i);
      }
    });

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_ComparisonExpression;
  }

  oC_AddOrSubtractExpression() {
    return this.getTypedRuleContext(OC_AddOrSubtractExpressionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_ComparisonExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_ComparisonExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_ComparisonExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_AddOrSubtractExpressionContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "oC_MultiplyDivideModuloExpression", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_MultiplyDivideModuloExpressionContext);
      } else {
        return this.getTypedRuleContext(OC_MultiplyDivideModuloExpressionContext, i);
      }
    });

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_AddOrSubtractExpression;
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_AddOrSubtractExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_AddOrSubtractExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_AddOrSubtractExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_MultiplyDivideModuloExpressionContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "oC_PowerOfExpression", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_PowerOfExpressionContext);
      } else {
        return this.getTypedRuleContext(OC_PowerOfExpressionContext, i);
      }
    });

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_MultiplyDivideModuloExpression;
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_MultiplyDivideModuloExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_MultiplyDivideModuloExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_MultiplyDivideModuloExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_PowerOfExpressionContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "oC_UnaryAddOrSubtractExpression", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_UnaryAddOrSubtractExpressionContext);
      } else {
        return this.getTypedRuleContext(OC_UnaryAddOrSubtractExpressionContext, i);
      }
    });

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_PowerOfExpression;
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_PowerOfExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_PowerOfExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_PowerOfExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_UnaryAddOrSubtractExpressionContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_UnaryAddOrSubtractExpression;
  }

  oC_StringListNullOperatorExpression() {
    return this.getTypedRuleContext(OC_StringListNullOperatorExpressionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_UnaryAddOrSubtractExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_UnaryAddOrSubtractExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_UnaryAddOrSubtractExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_StringListNullOperatorExpressionContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "oC_StringOperatorExpression", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_StringOperatorExpressionContext);
      } else {
        return this.getTypedRuleContext(OC_StringOperatorExpressionContext, i);
      }
    });

    _defineProperty(this, "oC_ListOperatorExpression", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_ListOperatorExpressionContext);
      } else {
        return this.getTypedRuleContext(OC_ListOperatorExpressionContext, i);
      }
    });

    _defineProperty(this, "oC_NullOperatorExpression", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_NullOperatorExpressionContext);
      } else {
        return this.getTypedRuleContext(OC_NullOperatorExpressionContext, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_StringListNullOperatorExpression;
  }

  oC_PropertyOrLabelsExpression() {
    return this.getTypedRuleContext(OC_PropertyOrLabelsExpressionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_StringListNullOperatorExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_StringListNullOperatorExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_StringListNullOperatorExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_ListOperatorExpressionContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    _defineProperty(this, "oC_Expression", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_ExpressionContext);
      } else {
        return this.getTypedRuleContext(OC_ExpressionContext, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_ListOperatorExpression;
  }

  IN() {
    return this.getToken(CypherParser.IN, 0);
  }

  oC_PropertyOrLabelsExpression() {
    return this.getTypedRuleContext(OC_PropertyOrLabelsExpressionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_ListOperatorExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_ListOperatorExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_ListOperatorExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_StringOperatorExpressionContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_StringOperatorExpression;
  }

  oC_PropertyOrLabelsExpression() {
    return this.getTypedRuleContext(OC_PropertyOrLabelsExpressionContext, 0);
  }

  STARTS() {
    return this.getToken(CypherParser.STARTS, 0);
  }

  WITH() {
    return this.getToken(CypherParser.WITH, 0);
  }

  ENDS() {
    return this.getToken(CypherParser.ENDS, 0);
  }

  CONTAINS() {
    return this.getToken(CypherParser.CONTAINS, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_StringOperatorExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_StringOperatorExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_StringOperatorExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_NullOperatorExpressionContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_NullOperatorExpression;
  }

  IS() {
    return this.getToken(CypherParser.IS, 0);
  }

  NULL() {
    return this.getToken(CypherParser.NULL, 0);
  }

  NOT() {
    return this.getToken(CypherParser.NOT, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_NullOperatorExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_NullOperatorExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_NullOperatorExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_PropertyOrLabelsExpressionContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "oC_PropertyLookup", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_PropertyLookupContext);
      } else {
        return this.getTypedRuleContext(OC_PropertyLookupContext, i);
      }
    });

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_PropertyOrLabelsExpression;
  }

  oC_Atom() {
    return this.getTypedRuleContext(OC_AtomContext, 0);
  }

  oC_NodeLabels() {
    return this.getTypedRuleContext(OC_NodeLabelsContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_PropertyOrLabelsExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_PropertyOrLabelsExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_PropertyOrLabelsExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_ShortestPathPatternFunctionContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_ShortestPathPatternFunction;
  }

  oC_ShortestPathFunctionName() {
    return this.getTypedRuleContext(OC_ShortestPathFunctionNameContext, 0);
  }

  oC_PatternElement() {
    return this.getTypedRuleContext(OC_PatternElementContext, 0);
  }

  oC_AllShortestPathFunctionName() {
    return this.getTypedRuleContext(OC_AllShortestPathFunctionNameContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_ShortestPathPatternFunction(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_ShortestPathPatternFunction(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_ShortestPathPatternFunction(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_ShortestPathFunctionNameContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_ShortestPathFunctionName;
  }

  SHORTESTPATH() {
    return this.getToken(CypherParser.SHORTESTPATH, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_ShortestPathFunctionName(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_ShortestPathFunctionName(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_ShortestPathFunctionName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_AllShortestPathFunctionNameContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_AllShortestPathFunctionName;
  }

  ALLSHORTESTPATHS() {
    return this.getToken(CypherParser.ALLSHORTESTPATHS, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_AllShortestPathFunctionName(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_AllShortestPathFunctionName(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_AllShortestPathFunctionName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_AtomContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Atom;
  }

  oC_Literal() {
    return this.getTypedRuleContext(OC_LiteralContext, 0);
  }

  oC_Parameter() {
    return this.getTypedRuleContext(OC_ParameterContext, 0);
  }

  oC_CaseExpression() {
    return this.getTypedRuleContext(OC_CaseExpressionContext, 0);
  }

  COUNT() {
    return this.getToken(CypherParser.COUNT, 0);
  }

  oC_ListComprehension() {
    return this.getTypedRuleContext(OC_ListComprehensionContext, 0);
  }

  oC_PatternComprehension() {
    return this.getTypedRuleContext(OC_PatternComprehensionContext, 0);
  }

  ALL() {
    return this.getToken(CypherParser.ALL, 0);
  }

  oC_FilterExpression() {
    return this.getTypedRuleContext(OC_FilterExpressionContext, 0);
  }

  ANY() {
    return this.getToken(CypherParser.ANY, 0);
  }

  NONE() {
    return this.getToken(CypherParser.NONE, 0);
  }

  SINGLE() {
    return this.getToken(CypherParser.SINGLE, 0);
  }

  EXISTS() {
    return this.getToken(CypherParser.EXISTS, 0);
  }

  oC_Expression() {
    return this.getTypedRuleContext(OC_ExpressionContext, 0);
  }

  oC_ShortestPathPatternFunction() {
    return this.getTypedRuleContext(OC_ShortestPathPatternFunctionContext, 0);
  }

  oC_RelationshipsPattern() {
    return this.getTypedRuleContext(OC_RelationshipsPatternContext, 0);
  }

  oC_ParenthesizedExpression() {
    return this.getTypedRuleContext(OC_ParenthesizedExpressionContext, 0);
  }

  oC_FunctionInvocation() {
    return this.getTypedRuleContext(OC_FunctionInvocationContext, 0);
  }

  oC_Variable() {
    return this.getTypedRuleContext(OC_VariableContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_Atom(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_Atom(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_Atom(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_LiteralContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Literal;
  }

  oC_NumberLiteral() {
    return this.getTypedRuleContext(OC_NumberLiteralContext, 0);
  }

  StringLiteral() {
    return this.getToken(CypherParser.StringLiteral, 0);
  }

  oC_BooleanLiteral() {
    return this.getTypedRuleContext(OC_BooleanLiteralContext, 0);
  }

  NULL() {
    return this.getToken(CypherParser.NULL, 0);
  }

  oC_MapLiteral() {
    return this.getTypedRuleContext(OC_MapLiteralContext, 0);
  }

  oC_ListLiteral() {
    return this.getTypedRuleContext(OC_ListLiteralContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_Literal(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_Literal(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_Literal(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_BooleanLiteralContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_BooleanLiteral;
  }

  TRUE() {
    return this.getToken(CypherParser.TRUE, 0);
  }

  FALSE() {
    return this.getToken(CypherParser.FALSE, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_BooleanLiteral(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_BooleanLiteral(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_BooleanLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_ListLiteralContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    _defineProperty(this, "oC_Expression", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_ExpressionContext);
      } else {
        return this.getTypedRuleContext(OC_ExpressionContext, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_ListLiteral;
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_ListLiteral(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_ListLiteral(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_ListLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_PartialComparisonExpressionContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_PartialComparisonExpression;
  }

  oC_AddOrSubtractExpression() {
    return this.getTypedRuleContext(OC_AddOrSubtractExpressionContext, 0);
  }

  SP() {
    return this.getToken(CypherParser.SP, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_PartialComparisonExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_PartialComparisonExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_PartialComparisonExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_ParenthesizedExpressionContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_ParenthesizedExpression;
  }

  oC_Expression() {
    return this.getTypedRuleContext(OC_ExpressionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_ParenthesizedExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_ParenthesizedExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_ParenthesizedExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_RelationshipsPatternContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "oC_PatternElementChain", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_PatternElementChainContext);
      } else {
        return this.getTypedRuleContext(OC_PatternElementChainContext, i);
      }
    });

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_RelationshipsPattern;
  }

  oC_NodePattern() {
    return this.getTypedRuleContext(OC_NodePatternContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_RelationshipsPattern(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_RelationshipsPattern(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_RelationshipsPattern(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_FilterExpressionContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_FilterExpression;
  }

  oC_IdInColl() {
    return this.getTypedRuleContext(OC_IdInCollContext, 0);
  }

  oC_Where() {
    return this.getTypedRuleContext(OC_WhereContext, 0);
  }

  SP() {
    return this.getToken(CypherParser.SP, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_FilterExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_FilterExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_FilterExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_IdInCollContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_IdInColl;
  }

  oC_Variable() {
    return this.getTypedRuleContext(OC_VariableContext, 0);
  }

  IN() {
    return this.getToken(CypherParser.IN, 0);
  }

  oC_Expression() {
    return this.getTypedRuleContext(OC_ExpressionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_IdInColl(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_IdInColl(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_IdInColl(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_FunctionInvocationContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    _defineProperty(this, "oC_Expression", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_ExpressionContext);
      } else {
        return this.getTypedRuleContext(OC_ExpressionContext, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_FunctionInvocation;
  }

  oC_FunctionName() {
    return this.getTypedRuleContext(OC_FunctionNameContext, 0);
  }

  DISTINCT() {
    return this.getToken(CypherParser.DISTINCT, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_FunctionInvocation(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_FunctionInvocation(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_FunctionInvocation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_FunctionNameContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_FunctionName;
  }

  oC_Namespace() {
    return this.getTypedRuleContext(OC_NamespaceContext, 0);
  }

  oC_SymbolicName() {
    return this.getTypedRuleContext(OC_SymbolicNameContext, 0);
  }

  EXISTS() {
    return this.getToken(CypherParser.EXISTS, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_FunctionName(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_FunctionName(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_FunctionName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_ExplicitProcedureInvocationContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    _defineProperty(this, "oC_Expression", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_ExpressionContext);
      } else {
        return this.getTypedRuleContext(OC_ExpressionContext, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_ExplicitProcedureInvocation;
  }

  oC_ProcedureName() {
    return this.getTypedRuleContext(OC_ProcedureNameContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_ExplicitProcedureInvocation(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_ExplicitProcedureInvocation(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_ExplicitProcedureInvocation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_ImplicitProcedureInvocationContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_ImplicitProcedureInvocation;
  }

  oC_ProcedureName() {
    return this.getTypedRuleContext(OC_ProcedureNameContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_ImplicitProcedureInvocation(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_ImplicitProcedureInvocation(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_ImplicitProcedureInvocation(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_ProcedureResultFieldContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_ProcedureResultField;
  }

  oC_SymbolicName() {
    return this.getTypedRuleContext(OC_SymbolicNameContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_ProcedureResultField(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_ProcedureResultField(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_ProcedureResultField(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_ProcedureNameContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_ProcedureName;
  }

  oC_Namespace() {
    return this.getTypedRuleContext(OC_NamespaceContext, 0);
  }

  oC_SymbolicName() {
    return this.getTypedRuleContext(OC_SymbolicNameContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_ProcedureName(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_ProcedureName(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_ProcedureName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_NamespaceContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "oC_SymbolicName", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_SymbolicNameContext);
      } else {
        return this.getTypedRuleContext(OC_SymbolicNameContext, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Namespace;
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_Namespace(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_Namespace(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_Namespace(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_ListComprehensionContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_ListComprehension;
  }

  oC_FilterExpression() {
    return this.getTypedRuleContext(OC_FilterExpressionContext, 0);
  }

  oC_Expression() {
    return this.getTypedRuleContext(OC_ExpressionContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_ListComprehension(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_ListComprehension(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_ListComprehension(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_PatternComprehensionContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "oC_Expression", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_ExpressionContext);
      } else {
        return this.getTypedRuleContext(OC_ExpressionContext, i);
      }
    });

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_PatternComprehension;
  }

  oC_RelationshipsPattern() {
    return this.getTypedRuleContext(OC_RelationshipsPatternContext, 0);
  }

  oC_Variable() {
    return this.getTypedRuleContext(OC_VariableContext, 0);
  }

  WHERE() {
    return this.getToken(CypherParser.WHERE, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_PatternComprehension(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_PatternComprehension(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_PatternComprehension(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_PropertyLookupContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_PropertyLookup;
  }

  oC_PropertyKeyName() {
    return this.getTypedRuleContext(OC_PropertyKeyNameContext, 0);
  }

  SP() {
    return this.getToken(CypherParser.SP, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_PropertyLookup(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_PropertyLookup(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_PropertyLookup(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_CaseExpressionContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "oC_Expression", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_ExpressionContext);
      } else {
        return this.getTypedRuleContext(OC_ExpressionContext, i);
      }
    });

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    _defineProperty(this, "oC_CaseAlternatives", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_CaseAlternativesContext);
      } else {
        return this.getTypedRuleContext(OC_CaseAlternativesContext, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_CaseExpression;
  }

  END() {
    return this.getToken(CypherParser.END, 0);
  }

  ELSE() {
    return this.getToken(CypherParser.ELSE, 0);
  }

  CASE() {
    return this.getToken(CypherParser.CASE, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_CaseExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_CaseExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_CaseExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_CaseAlternativesContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "oC_Expression", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_ExpressionContext);
      } else {
        return this.getTypedRuleContext(OC_ExpressionContext, i);
      }
    });

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_CaseAlternatives;
  }

  WHEN() {
    return this.getToken(CypherParser.WHEN, 0);
  }

  THEN() {
    return this.getToken(CypherParser.THEN, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_CaseAlternatives(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_CaseAlternatives(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_CaseAlternatives(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_VariableContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Variable;
  }

  oC_SymbolicName() {
    return this.getTypedRuleContext(OC_SymbolicNameContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_Variable(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_Variable(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_Variable(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_NumberLiteralContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_NumberLiteral;
  }

  oC_DoubleLiteral() {
    return this.getTypedRuleContext(OC_DoubleLiteralContext, 0);
  }

  oC_IntegerLiteral() {
    return this.getTypedRuleContext(OC_IntegerLiteralContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_NumberLiteral(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_NumberLiteral(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_NumberLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_MapLiteralContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    _defineProperty(this, "oC_PropertyKeyName", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_PropertyKeyNameContext);
      } else {
        return this.getTypedRuleContext(OC_PropertyKeyNameContext, i);
      }
    });

    _defineProperty(this, "oC_Expression", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_ExpressionContext);
      } else {
        return this.getTypedRuleContext(OC_ExpressionContext, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_MapLiteral;
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_MapLiteral(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_MapLiteral(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_MapLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_ParameterContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Parameter;
  }

  oC_SymbolicName() {
    return this.getTypedRuleContext(OC_SymbolicNameContext, 0);
  }

  DecimalInteger() {
    return this.getToken(CypherParser.DecimalInteger, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_Parameter(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_Parameter(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_Parameter(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_PropertyExpressionContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);

    _defineProperty(this, "oC_PropertyLookup", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTypedRuleContexts(OC_PropertyLookupContext);
      } else {
        return this.getTypedRuleContext(OC_PropertyLookupContext, i);
      }
    });

    _defineProperty(this, "SP", function (i) {
      if (i === undefined) {
        i = null;
      }

      if (i === null) {
        return this.getTokens(CypherParser.SP);
      } else {
        return this.getToken(CypherParser.SP, i);
      }
    });

    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_PropertyExpression;
  }

  oC_Atom() {
    return this.getTypedRuleContext(OC_AtomContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_PropertyExpression(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_PropertyExpression(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_PropertyExpression(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_PropertyKeyNameContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_PropertyKeyName;
  }

  oC_SchemaName() {
    return this.getTypedRuleContext(OC_SchemaNameContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_PropertyKeyName(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_PropertyKeyName(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_PropertyKeyName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_IntegerLiteralContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_IntegerLiteral;
  }

  HexInteger() {
    return this.getToken(CypherParser.HexInteger, 0);
  }

  OctalInteger() {
    return this.getToken(CypherParser.OctalInteger, 0);
  }

  DecimalInteger() {
    return this.getToken(CypherParser.DecimalInteger, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_IntegerLiteral(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_IntegerLiteral(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_IntegerLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_DoubleLiteralContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_DoubleLiteral;
  }

  ExponentDecimalReal() {
    return this.getToken(CypherParser.ExponentDecimalReal, 0);
  }

  RegularDecimalReal() {
    return this.getToken(CypherParser.RegularDecimalReal, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_DoubleLiteral(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_DoubleLiteral(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_DoubleLiteral(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_SchemaNameContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_SchemaName;
  }

  oC_SymbolicName() {
    return this.getTypedRuleContext(OC_SymbolicNameContext, 0);
  }

  oC_ReservedWord() {
    return this.getTypedRuleContext(OC_ReservedWordContext, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_SchemaName(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_SchemaName(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_SchemaName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_ReservedWordContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_ReservedWord;
  }

  ALL() {
    return this.getToken(CypherParser.ALL, 0);
  }

  ASC() {
    return this.getToken(CypherParser.ASC, 0);
  }

  ASCENDING() {
    return this.getToken(CypherParser.ASCENDING, 0);
  }

  BY() {
    return this.getToken(CypherParser.BY, 0);
  }

  CREATE() {
    return this.getToken(CypherParser.CREATE, 0);
  }

  DELETE() {
    return this.getToken(CypherParser.DELETE, 0);
  }

  DESC() {
    return this.getToken(CypherParser.DESC, 0);
  }

  DESCENDING() {
    return this.getToken(CypherParser.DESCENDING, 0);
  }

  DETACH() {
    return this.getToken(CypherParser.DETACH, 0);
  }

  EXISTS() {
    return this.getToken(CypherParser.EXISTS, 0);
  }

  LIMIT() {
    return this.getToken(CypherParser.LIMIT, 0);
  }

  MATCH() {
    return this.getToken(CypherParser.MATCH, 0);
  }

  MERGE() {
    return this.getToken(CypherParser.MERGE, 0);
  }

  ON() {
    return this.getToken(CypherParser.ON, 0);
  }

  OPTIONAL() {
    return this.getToken(CypherParser.OPTIONAL, 0);
  }

  ORDER() {
    return this.getToken(CypherParser.ORDER, 0);
  }

  REMOVE() {
    return this.getToken(CypherParser.REMOVE, 0);
  }

  RETURN() {
    return this.getToken(CypherParser.RETURN, 0);
  }

  SET() {
    return this.getToken(CypherParser.SET, 0);
  }

  L_SKIP() {
    return this.getToken(CypherParser.L_SKIP, 0);
  }

  WHERE() {
    return this.getToken(CypherParser.WHERE, 0);
  }

  WITH() {
    return this.getToken(CypherParser.WITH, 0);
  }

  UNION() {
    return this.getToken(CypherParser.UNION, 0);
  }

  UNWIND() {
    return this.getToken(CypherParser.UNWIND, 0);
  }

  AND() {
    return this.getToken(CypherParser.AND, 0);
  }

  AS() {
    return this.getToken(CypherParser.AS, 0);
  }

  CONTAINS() {
    return this.getToken(CypherParser.CONTAINS, 0);
  }

  DISTINCT() {
    return this.getToken(CypherParser.DISTINCT, 0);
  }

  ENDS() {
    return this.getToken(CypherParser.ENDS, 0);
  }

  IN() {
    return this.getToken(CypherParser.IN, 0);
  }

  IS() {
    return this.getToken(CypherParser.IS, 0);
  }

  NOT() {
    return this.getToken(CypherParser.NOT, 0);
  }

  OR() {
    return this.getToken(CypherParser.OR, 0);
  }

  STARTS() {
    return this.getToken(CypherParser.STARTS, 0);
  }

  XOR() {
    return this.getToken(CypherParser.XOR, 0);
  }

  FALSE() {
    return this.getToken(CypherParser.FALSE, 0);
  }

  TRUE() {
    return this.getToken(CypherParser.TRUE, 0);
  }

  NULL() {
    return this.getToken(CypherParser.NULL, 0);
  }

  CONSTRAINT() {
    return this.getToken(CypherParser.CONSTRAINT, 0);
  }

  DO() {
    return this.getToken(CypherParser.DO, 0);
  }

  FOR() {
    return this.getToken(CypherParser.FOR, 0);
  }

  REQUIRE() {
    return this.getToken(CypherParser.REQUIRE, 0);
  }

  UNIQUE() {
    return this.getToken(CypherParser.UNIQUE, 0);
  }

  CASE() {
    return this.getToken(CypherParser.CASE, 0);
  }

  WHEN() {
    return this.getToken(CypherParser.WHEN, 0);
  }

  THEN() {
    return this.getToken(CypherParser.THEN, 0);
  }

  ELSE() {
    return this.getToken(CypherParser.ELSE, 0);
  }

  END() {
    return this.getToken(CypherParser.END, 0);
  }

  MANDATORY() {
    return this.getToken(CypherParser.MANDATORY, 0);
  }

  SCALAR() {
    return this.getToken(CypherParser.SCALAR, 0);
  }

  OF() {
    return this.getToken(CypherParser.OF, 0);
  }

  ADD() {
    return this.getToken(CypherParser.ADD, 0);
  }

  DROP() {
    return this.getToken(CypherParser.DROP, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_ReservedWord(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_ReservedWord(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_ReservedWord(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_SymbolicNameContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_SymbolicName;
  }

  UnescapedSymbolicName() {
    return this.getToken(CypherParser.UnescapedSymbolicName, 0);
  }

  EscapedSymbolicName() {
    return this.getToken(CypherParser.EscapedSymbolicName, 0);
  }

  HexLetter() {
    return this.getToken(CypherParser.HexLetter, 0);
  }

  COUNT() {
    return this.getToken(CypherParser.COUNT, 0);
  }

  FILTER() {
    return this.getToken(CypherParser.FILTER, 0);
  }

  EXTRACT() {
    return this.getToken(CypherParser.EXTRACT, 0);
  }

  ANY() {
    return this.getToken(CypherParser.ANY, 0);
  }

  NONE() {
    return this.getToken(CypherParser.NONE, 0);
  }

  SINGLE() {
    return this.getToken(CypherParser.SINGLE, 0);
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_SymbolicName(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_SymbolicName(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_SymbolicName(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_LeftArrowHeadContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_LeftArrowHead;
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_LeftArrowHead(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_LeftArrowHead(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_LeftArrowHead(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_RightArrowHeadContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_RightArrowHead;
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_RightArrowHead(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_RightArrowHead(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_RightArrowHead(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

class OC_DashContext extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.ParserRuleContext {
  constructor(parser, parent, invokingState) {
    if (parent === undefined) {
      parent = null;
    }

    if (invokingState === undefined || invokingState === null) {
      invokingState = -1;
    }

    super(parent, invokingState);
    this.parser = parser;
    this.ruleIndex = CypherParser.RULE_oC_Dash;
  }

  enterRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.enterOC_Dash(this);
    }
  }

  exitRule(listener) {
    if (listener instanceof _CypherListener_js__WEBPACK_IMPORTED_MODULE_1__["default"]) {
      listener.exitOC_Dash(this);
    }
  }

  accept(visitor) {
    if (visitor instanceof _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_2__["default"]) {
      return visitor.visitOC_Dash(this);
    } else {
      return visitor.visitChildren(this);
    }
  }

}

CypherParser.OC_CypherContext = OC_CypherContext;
CypherParser.OC_StatementContext = OC_StatementContext;
CypherParser.OC_QueryContext = OC_QueryContext;
CypherParser.OC_RegularQueryContext = OC_RegularQueryContext;
CypherParser.OC_UnionContext = OC_UnionContext;
CypherParser.OC_SingleQueryContext = OC_SingleQueryContext;
CypherParser.OC_SinglePartQueryContext = OC_SinglePartQueryContext;
CypherParser.OC_MultiPartQueryContext = OC_MultiPartQueryContext;
CypherParser.OC_UpdatingClauseContext = OC_UpdatingClauseContext;
CypherParser.OC_ReadingClauseContext = OC_ReadingClauseContext;
CypherParser.OC_MatchContext = OC_MatchContext;
CypherParser.OC_UnwindContext = OC_UnwindContext;
CypherParser.OC_MergeContext = OC_MergeContext;
CypherParser.OC_MergeActionContext = OC_MergeActionContext;
CypherParser.OC_CreateContext = OC_CreateContext;
CypherParser.OC_SetContext = OC_SetContext;
CypherParser.OC_SetItemContext = OC_SetItemContext;
CypherParser.OC_DeleteContext = OC_DeleteContext;
CypherParser.OC_RemoveContext = OC_RemoveContext;
CypherParser.OC_RemoveItemContext = OC_RemoveItemContext;
CypherParser.OC_InQueryCallContext = OC_InQueryCallContext;
CypherParser.OC_StandaloneCallContext = OC_StandaloneCallContext;
CypherParser.OC_YieldItemsContext = OC_YieldItemsContext;
CypherParser.OC_YieldItemContext = OC_YieldItemContext;
CypherParser.OC_WithContext = OC_WithContext;
CypherParser.OC_ReturnContext = OC_ReturnContext;
CypherParser.OC_ProjectionBodyContext = OC_ProjectionBodyContext;
CypherParser.OC_ProjectionItemsContext = OC_ProjectionItemsContext;
CypherParser.OC_ProjectionItemContext = OC_ProjectionItemContext;
CypherParser.OC_OrderContext = OC_OrderContext;
CypherParser.OC_SkipContext = OC_SkipContext;
CypherParser.OC_LimitContext = OC_LimitContext;
CypherParser.OC_SortItemContext = OC_SortItemContext;
CypherParser.OC_WhereContext = OC_WhereContext;
CypherParser.OC_PatternContext = OC_PatternContext;
CypherParser.OC_PatternPartContext = OC_PatternPartContext;
CypherParser.OC_AnonymousPatternPartContext = OC_AnonymousPatternPartContext;
CypherParser.OC_PatternElementContext = OC_PatternElementContext;
CypherParser.OC_NodePatternContext = OC_NodePatternContext;
CypherParser.OC_PatternElementChainContext = OC_PatternElementChainContext;
CypherParser.OC_RelationshipPatternContext = OC_RelationshipPatternContext;
CypherParser.OC_RelationshipDetailContext = OC_RelationshipDetailContext;
CypherParser.OC_PropertiesContext = OC_PropertiesContext;
CypherParser.OC_RelationshipTypesContext = OC_RelationshipTypesContext;
CypherParser.OC_NodeLabelsContext = OC_NodeLabelsContext;
CypherParser.OC_NodeLabelContext = OC_NodeLabelContext;
CypherParser.OC_RangeLiteralContext = OC_RangeLiteralContext;
CypherParser.OC_LabelNameContext = OC_LabelNameContext;
CypherParser.OC_RelTypeNameContext = OC_RelTypeNameContext;
CypherParser.OC_ExpressionContext = OC_ExpressionContext;
CypherParser.OC_OrExpressionContext = OC_OrExpressionContext;
CypherParser.OC_XorExpressionContext = OC_XorExpressionContext;
CypherParser.OC_AndExpressionContext = OC_AndExpressionContext;
CypherParser.OC_NotExpressionContext = OC_NotExpressionContext;
CypherParser.OC_ComparisonExpressionContext = OC_ComparisonExpressionContext;
CypherParser.OC_AddOrSubtractExpressionContext = OC_AddOrSubtractExpressionContext;
CypherParser.OC_MultiplyDivideModuloExpressionContext = OC_MultiplyDivideModuloExpressionContext;
CypherParser.OC_PowerOfExpressionContext = OC_PowerOfExpressionContext;
CypherParser.OC_UnaryAddOrSubtractExpressionContext = OC_UnaryAddOrSubtractExpressionContext;
CypherParser.OC_StringListNullOperatorExpressionContext = OC_StringListNullOperatorExpressionContext;
CypherParser.OC_ListOperatorExpressionContext = OC_ListOperatorExpressionContext;
CypherParser.OC_StringOperatorExpressionContext = OC_StringOperatorExpressionContext;
CypherParser.OC_NullOperatorExpressionContext = OC_NullOperatorExpressionContext;
CypherParser.OC_PropertyOrLabelsExpressionContext = OC_PropertyOrLabelsExpressionContext;
CypherParser.OC_ShortestPathPatternFunctionContext = OC_ShortestPathPatternFunctionContext;
CypherParser.OC_ShortestPathFunctionNameContext = OC_ShortestPathFunctionNameContext;
CypherParser.OC_AllShortestPathFunctionNameContext = OC_AllShortestPathFunctionNameContext;
CypherParser.OC_AtomContext = OC_AtomContext;
CypherParser.OC_LiteralContext = OC_LiteralContext;
CypherParser.OC_BooleanLiteralContext = OC_BooleanLiteralContext;
CypherParser.OC_ListLiteralContext = OC_ListLiteralContext;
CypherParser.OC_PartialComparisonExpressionContext = OC_PartialComparisonExpressionContext;
CypherParser.OC_ParenthesizedExpressionContext = OC_ParenthesizedExpressionContext;
CypherParser.OC_RelationshipsPatternContext = OC_RelationshipsPatternContext;
CypherParser.OC_FilterExpressionContext = OC_FilterExpressionContext;
CypherParser.OC_IdInCollContext = OC_IdInCollContext;
CypherParser.OC_FunctionInvocationContext = OC_FunctionInvocationContext;
CypherParser.OC_FunctionNameContext = OC_FunctionNameContext;
CypherParser.OC_ExplicitProcedureInvocationContext = OC_ExplicitProcedureInvocationContext;
CypherParser.OC_ImplicitProcedureInvocationContext = OC_ImplicitProcedureInvocationContext;
CypherParser.OC_ProcedureResultFieldContext = OC_ProcedureResultFieldContext;
CypherParser.OC_ProcedureNameContext = OC_ProcedureNameContext;
CypherParser.OC_NamespaceContext = OC_NamespaceContext;
CypherParser.OC_ListComprehensionContext = OC_ListComprehensionContext;
CypherParser.OC_PatternComprehensionContext = OC_PatternComprehensionContext;
CypherParser.OC_PropertyLookupContext = OC_PropertyLookupContext;
CypherParser.OC_CaseExpressionContext = OC_CaseExpressionContext;
CypherParser.OC_CaseAlternativesContext = OC_CaseAlternativesContext;
CypherParser.OC_VariableContext = OC_VariableContext;
CypherParser.OC_NumberLiteralContext = OC_NumberLiteralContext;
CypherParser.OC_MapLiteralContext = OC_MapLiteralContext;
CypherParser.OC_ParameterContext = OC_ParameterContext;
CypherParser.OC_PropertyExpressionContext = OC_PropertyExpressionContext;
CypherParser.OC_PropertyKeyNameContext = OC_PropertyKeyNameContext;
CypherParser.OC_IntegerLiteralContext = OC_IntegerLiteralContext;
CypherParser.OC_DoubleLiteralContext = OC_DoubleLiteralContext;
CypherParser.OC_SchemaNameContext = OC_SchemaNameContext;
CypherParser.OC_ReservedWordContext = OC_ReservedWordContext;
CypherParser.OC_SymbolicNameContext = OC_SymbolicNameContext;
CypherParser.OC_LeftArrowHeadContext = OC_LeftArrowHeadContext;
CypherParser.OC_RightArrowHeadContext = OC_RightArrowHeadContext;
CypherParser.OC_DashContext = OC_DashContext;

/***/ }),

/***/ "./lib/CypherVisitor.js":
/*!******************************!*\
  !*** ./libs/CypherVisitor.js ***!
  \******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return CypherVisitor; });
/* harmony import */ var antlr4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antlr4 */ "./node_modules/antlr4/src/antlr4/index.js");
/* harmony import */ var antlr4__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(antlr4__WEBPACK_IMPORTED_MODULE_0__);
// Generated from Cypher.g4 by ANTLR 4.9
// jshint ignore: start
 // This class defines a complete generic visitor for a parse tree produced by CypherParser.

class CypherVisitor extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.tree.ParseTreeVisitor {
  // Visit a parse tree produced by CypherParser#oC_Cypher.
  visitOC_Cypher(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_Statement.


  visitOC_Statement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_Query.


  visitOC_Query(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_RegularQuery.


  visitOC_RegularQuery(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_Union.


  visitOC_Union(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_SingleQuery.


  visitOC_SingleQuery(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_SinglePartQuery.


  visitOC_SinglePartQuery(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_MultiPartQuery.


  visitOC_MultiPartQuery(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_UpdatingClause.


  visitOC_UpdatingClause(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_ReadingClause.


  visitOC_ReadingClause(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_Match.


  visitOC_Match(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_Unwind.


  visitOC_Unwind(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_Merge.


  visitOC_Merge(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_MergeAction.


  visitOC_MergeAction(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_Create.


  visitOC_Create(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_Set.


  visitOC_Set(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_SetItem.


  visitOC_SetItem(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_Delete.


  visitOC_Delete(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_Remove.


  visitOC_Remove(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_RemoveItem.


  visitOC_RemoveItem(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_InQueryCall.


  visitOC_InQueryCall(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_StandaloneCall.


  visitOC_StandaloneCall(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_YieldItems.


  visitOC_YieldItems(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_YieldItem.


  visitOC_YieldItem(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_With.


  visitOC_With(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_Return.


  visitOC_Return(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_ProjectionBody.


  visitOC_ProjectionBody(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_ProjectionItems.


  visitOC_ProjectionItems(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_ProjectionItem.


  visitOC_ProjectionItem(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_Order.


  visitOC_Order(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_Skip.


  visitOC_Skip(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_Limit.


  visitOC_Limit(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_SortItem.


  visitOC_SortItem(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_Where.


  visitOC_Where(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_Pattern.


  visitOC_Pattern(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_PatternPart.


  visitOC_PatternPart(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_AnonymousPatternPart.


  visitOC_AnonymousPatternPart(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_PatternElement.


  visitOC_PatternElement(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_NodePattern.


  visitOC_NodePattern(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_PatternElementChain.


  visitOC_PatternElementChain(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_RelationshipPattern.


  visitOC_RelationshipPattern(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_RelationshipDetail.


  visitOC_RelationshipDetail(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_Properties.


  visitOC_Properties(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_RelationshipTypes.


  visitOC_RelationshipTypes(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_NodeLabels.


  visitOC_NodeLabels(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_NodeLabel.


  visitOC_NodeLabel(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_RangeLiteral.


  visitOC_RangeLiteral(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_LabelName.


  visitOC_LabelName(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_RelTypeName.


  visitOC_RelTypeName(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_Expression.


  visitOC_Expression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_OrExpression.


  visitOC_OrExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_XorExpression.


  visitOC_XorExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_AndExpression.


  visitOC_AndExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_NotExpression.


  visitOC_NotExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_ComparisonExpression.


  visitOC_ComparisonExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_AddOrSubtractExpression.


  visitOC_AddOrSubtractExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_MultiplyDivideModuloExpression.


  visitOC_MultiplyDivideModuloExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_PowerOfExpression.


  visitOC_PowerOfExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_UnaryAddOrSubtractExpression.


  visitOC_UnaryAddOrSubtractExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_StringListNullOperatorExpression.


  visitOC_StringListNullOperatorExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_ListOperatorExpression.


  visitOC_ListOperatorExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_StringOperatorExpression.


  visitOC_StringOperatorExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_NullOperatorExpression.


  visitOC_NullOperatorExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_PropertyOrLabelsExpression.


  visitOC_PropertyOrLabelsExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_ShortestPathPatternFunction.


  visitOC_ShortestPathPatternFunction(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_ShortestPathFunctionName.


  visitOC_ShortestPathFunctionName(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_AllShortestPathFunctionName.


  visitOC_AllShortestPathFunctionName(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_Atom.


  visitOC_Atom(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_Literal.


  visitOC_Literal(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_BooleanLiteral.


  visitOC_BooleanLiteral(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_ListLiteral.


  visitOC_ListLiteral(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_PartialComparisonExpression.


  visitOC_PartialComparisonExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_ParenthesizedExpression.


  visitOC_ParenthesizedExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_RelationshipsPattern.


  visitOC_RelationshipsPattern(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_FilterExpression.


  visitOC_FilterExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_IdInColl.


  visitOC_IdInColl(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_FunctionInvocation.


  visitOC_FunctionInvocation(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_FunctionName.


  visitOC_FunctionName(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_ExplicitProcedureInvocation.


  visitOC_ExplicitProcedureInvocation(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_ImplicitProcedureInvocation.


  visitOC_ImplicitProcedureInvocation(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_ProcedureResultField.


  visitOC_ProcedureResultField(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_ProcedureName.


  visitOC_ProcedureName(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_Namespace.


  visitOC_Namespace(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_ListComprehension.


  visitOC_ListComprehension(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_PatternComprehension.


  visitOC_PatternComprehension(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_PropertyLookup.


  visitOC_PropertyLookup(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_CaseExpression.


  visitOC_CaseExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_CaseAlternatives.


  visitOC_CaseAlternatives(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_Variable.


  visitOC_Variable(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_NumberLiteral.


  visitOC_NumberLiteral(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_MapLiteral.


  visitOC_MapLiteral(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_Parameter.


  visitOC_Parameter(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_PropertyExpression.


  visitOC_PropertyExpression(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_PropertyKeyName.


  visitOC_PropertyKeyName(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_IntegerLiteral.


  visitOC_IntegerLiteral(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_DoubleLiteral.


  visitOC_DoubleLiteral(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_SchemaName.


  visitOC_SchemaName(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_ReservedWord.


  visitOC_ReservedWord(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_SymbolicName.


  visitOC_SymbolicName(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_LeftArrowHead.


  visitOC_LeftArrowHead(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_RightArrowHead.


  visitOC_RightArrowHead(ctx) {
    return this.visitChildren(ctx);
  } // Visit a parse tree produced by CypherParser#oC_Dash.


  visitOC_Dash(ctx) {
    return this.visitChildren(ctx);
  }

}

/***/ }),

/***/ "./lib/graph.js":
/*!**********************!*\
  !*** ./libs/graph.js ***!
  \**********************/
/*! exports provided: parsedCypherToGraph, parsedCypherToCypherString */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parsedCypherToGraph", function() { return parsedCypherToGraph; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parsedCypherToCypherString", function() { return parsedCypherToCypherString; });
function parsedCypherToGraph(parsed) {
  // console.log(parsed);
  let graph = {};
  let nodes = [];
  let links = [];
  let variables = parsed.scopes[0].variables;
  let variablesArray = Object.values(variables);
  console.log(variablesArray);
  let i = 0;
  variablesArray.forEach(entity => {
    let type = entity.type; // 1 is node, 2 link

    if (type == 1) {
      let nodePattern = entity.scoped[0].nodePatterns.filter(nodePattern => nodePattern.id == entity.id)[0]; // console.log(nodePattern);

      let label = nodePattern.labels ? nodePattern.labels[0] : null;
      let node = {
        id: entity.id,
        name: entity.id,
        label: label,
        ...nodePattern.properties
      };
      nodes.push(node);
    } else if (type == 2) {
      let linkPattern = entity.scoped[0].elementChains.filter(linkPattern => linkPattern.id == entity.id)[0]; // console.log(linkPattern);

      let label = linkPattern.detail ? linkPattern.detail.relationshipTypes[1] : null;
      let properties = linkPattern.detail ? linkPattern.detail.properties : {};
      let link = {
        id: entity.id,
        source: variablesArray[i - 1].id,
        target: variablesArray[i + 1].id,
        label: label,
        ...properties
      };
      links.push(link);
    }

    i++;
  });
  graph['nodes'] = nodes;
  graph['links'] = links;
  return graph;
}

async function sleepUntil(f, timeoutMs) {
  return new Promise((resolve, reject) => {
    let timeWas = new Date();
    let wait = setInterval(function () {
      if (f()) {
        console.log("resolved after", new Date() - timeWas, "ms");
        clearInterval(wait);
        resolve();
      } else if (new Date() - timeWas > timeoutMs) {
        // Timeout
        console.log("rejected after", new Date() - timeWas, "ms");
        clearInterval(wait);
        reject();
      }
    }, 20);
  });
}

async function exploreTree(parsedTree, string, status) {
  if (parsedTree["toRawString"]) {
    // console.log(parsedTree.constructor.name);
    string.string += parsedTree.toRawString();
  }

  let name = parsedTree.constructor.name;

  if (name == "NodePattern") {
    console.log('node');
    sleepUntil(() => status.continue == true, 5000);
    status.continue = false;
  } else if (name == "RelationshipPattern") {
    console.log("rel");
    status.continue = true;
  }

  for (const [key, value] of Object.entries(parsedTree)) {
    if (key == "scope" || key == "scoped") {
      continue;
    }

    if (Array.isArray(value) && value.length > 0 && value[0] === Object(value[0])) {
      // && rulesNames.includes(value[0].constructor.name)
      value.forEach(v => {
        // console.log("push", v);
        exploreTree(v, string, status);
      });
    } else if (value === Object(value) && !Array.isArray(value)) {
      // console.log("push2", value);
      exploreTree(value, string, status);
    } else {//
    }
  }
}

function parsedCypherToCypherString(parsedTree) {
  let cypherReverse = {
    string: ""
  };
  let status = {
    continue: true
  };
  exploreTree(parsedTree, cypherReverse, status);
  return cypherReverse;
}

/***/ }),

/***/ "./lib/index.js":
/*!**********************!*\
  !*** ./libs/index.js ***!
  \**********************/
/*! exports provided: antlr4, CypherListener, CypherVisitor, ruleNames, tree2JSON, getNodeText, parseCypher, parseMatch, NodePattern, PatternElement, PatternPart, Pattern, parsePatterns, parsedCypherToGraph, parsedCypherToCypherString */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _main_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./main.js */ "./lib/main.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "antlr4", function() { return _main_js__WEBPACK_IMPORTED_MODULE_0__["antlr4"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CypherListener", function() { return _main_js__WEBPACK_IMPORTED_MODULE_0__["CypherListener"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CypherVisitor", function() { return _main_js__WEBPACK_IMPORTED_MODULE_0__["CypherVisitor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ruleNames", function() { return _main_js__WEBPACK_IMPORTED_MODULE_0__["ruleNames"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tree2JSON", function() { return _main_js__WEBPACK_IMPORTED_MODULE_0__["tree2JSON"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "getNodeText", function() { return _main_js__WEBPACK_IMPORTED_MODULE_0__["getNodeText"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parseCypher", function() { return _main_js__WEBPACK_IMPORTED_MODULE_0__["parseCypher"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parseMatch", function() { return _main_js__WEBPACK_IMPORTED_MODULE_0__["parseMatch"]; });

/* harmony import */ var _parse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./parse.js */ "./lib/parse.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NodePattern", function() { return _parse_js__WEBPACK_IMPORTED_MODULE_1__["NodePattern"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PatternElement", function() { return _parse_js__WEBPACK_IMPORTED_MODULE_1__["PatternElement"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PatternPart", function() { return _parse_js__WEBPACK_IMPORTED_MODULE_1__["PatternPart"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Pattern", function() { return _parse_js__WEBPACK_IMPORTED_MODULE_1__["Pattern"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parsePatterns", function() { return _parse_js__WEBPACK_IMPORTED_MODULE_1__["parsePatterns"]; });

/* harmony import */ var _graph_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./graph.js */ "./lib/graph.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parsedCypherToGraph", function() { return _graph_js__WEBPACK_IMPORTED_MODULE_2__["parsedCypherToGraph"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "parsedCypherToCypherString", function() { return _graph_js__WEBPACK_IMPORTED_MODULE_2__["parsedCypherToCypherString"]; });








/***/ }),

/***/ "./lib/main.js":
/*!*********************!*\
  !*** ./libs/main.js ***!
  \*********************/
/*! exports provided: ruleNames, tree2JSON, simplifyExpression, getNodeText, parseCypher, parseMatch, main, CypherListener, CypherVisitor, antlr4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ruleNames", function() { return ruleNames; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tree2JSON", function() { return tree2JSON; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "simplifyExpression", function() { return simplifyExpression; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNodeText", function() { return getNodeText; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseCypher", function() { return parseCypher; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseMatch", function() { return parseMatch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "main", function() { return main; });
/* harmony import */ var antlr4__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! antlr4 */ "./node_modules/antlr4/src/antlr4/index.js");
/* harmony import */ var antlr4__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(antlr4__WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (default from non-harmony) */ __webpack_require__.d(__webpack_exports__, "antlr4", function() { return antlr4__WEBPACK_IMPORTED_MODULE_0___default.a; });
/* harmony import */ var _CypherParser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CypherParser.js */ "./lib/CypherParser.js");
/* harmony import */ var _CypherLexer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CypherLexer.js */ "./lib/CypherLexer.js");
/* harmony import */ var _CypherListener_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./CypherListener.js */ "./lib/CypherListener.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CypherListener", function() { return _CypherListener_js__WEBPACK_IMPORTED_MODULE_3__["default"]; });

/* harmony import */ var _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./CypherVisitor.js */ "./lib/CypherVisitor.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CypherVisitor", function() { return _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_4__["default"]; });






const ruleNames = _CypherParser_js__WEBPACK_IMPORTED_MODULE_1__["default"].ruleNames;
function tree2JSON(tree, ruleNames, simplify) {
  ruleNames = ruleNames || null;
  simplify = typeof simplify != "undefined";
  let s = getNodeText(tree, ruleNames);
  s = antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.Utils.escapeWhitespace(s, false);
  const c = tree.getChildCount();

  if (c === 0) {
    return s;
  }

  const res = [s];

  for (let i = 0; i < c; i++) {
    res.push(tree2JSON(tree.getChild(i), ruleNames, simplify));
  }

  if (simplify) return simplifyExpression(res);
  return res;
}
const simpleExpression = new Set(["oC_OrExpression", "oC_XorExpression", "oC_AndExpression", "oC_NotExpression", "oC_ComparisonExpression", "oC_AddOrSubtractExpression", "oC_MultiplyDivideModuloExpression", "oC_PowerOfExpression", "oC_UnaryAddOrSubtractExpression", "oC_StringListNullOperatorExpression", "oC_PropertyOrLabelsExpression"]); // Simplify a Cypher expression node

function simplifyExpression(expr) {
  if (Array.isArray(expr)) {
    const typeName = expr[0];

    if (simpleExpression.has(typeName) && expr.length == 2) {
      return expr[1];
    }
  }

  return expr;
} // Borrowed from antlr4.tree.Trees

function getNodeText(t, ruleNames) {
  if (ruleNames !== null) {
    if (t instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.tree.RuleNode) {
      const context = t.getRuleContext();
      const altNumber = context.getAltNumber(); // use const value of ATN.INVALID_ALT_NUMBER to avoid circular dependency

      if (altNumber != 0) {
        return ruleNames[t.ruleIndex] + ":" + altNumber;
      }

      return ruleNames[t.ruleIndex];
    } else if (t instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.tree.ErrorNode) {
      return t.toString();
    } else if (t instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.tree.TerminalNode) {
      if (t.symbol !== null) {
        return t.symbol.text;
      }
    }
  } // no recog for rule names


  const payload = t.getPayload();

  if (payload instanceof antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.tree.Token) {
    return payload.text;
  }

  return t.getPayload().toString();
}

class SimpleErrorListener extends antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.error.ErrorListener {
  constructor(callback) {
    super();
    this.callback = callback;
  }

  syntaxError(recognizer, offendingSymbol, line, column, msg) {
    this.callback("line " + line + ":" + column + " " + msg);
  }

}

function parseCypher(string, errors) {
  errors = errors || function (err) {
    throw err;
  };

  const chars = new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.InputStream(string);
  const lexer = new _CypherLexer_js__WEBPACK_IMPORTED_MODULE_2__["default"](chars);
  const tokens = new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.CommonTokenStream(lexer);
  const parser = new _CypherParser_js__WEBPACK_IMPORTED_MODULE_1__["default"](tokens);

  if (errors) {
    parser.removeErrorListeners();
    parser.addErrorListener(new SimpleErrorListener(errors));
  }

  parser.buildParseTrees = true;
  return parser.oC_Cypher();
}
function parseMatch(string, errors) {
  const chars = new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.InputStream(string);
  const lexer = new _CypherLexer_js__WEBPACK_IMPORTED_MODULE_2__["default"](chars);
  const tokens = new antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.CommonTokenStream(lexer);
  const parser = new _CypherParser_js__WEBPACK_IMPORTED_MODULE_1__["default"](tokens);

  if (errors) {
    parser.removeErrorListeners();
    parser.addErrorListener(new SimpleErrorListener(errors));
  }

  parser.buildParseTrees = true;
  return parser.oC_Match();
}
function main() {
  const tree = parseCypher("MATCH (n) RETURN n");

  class Visitor extends _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_4__["default"] {
    visitOC_Match(ctx) {
      super.visitOC_Match(ctx);

      if (!ctx) {
        return null;
      }

      if (ctx.children) {
        return ctx.children.map(child => {
          if (child.children && child.children.length != 0) {
            return child.accept(this);
          } else {
            return child.getText();
          }
        });
      }

      return null;
    }

  }

  tree.accept(new Visitor());

  class Listener extends _CypherListener_js__WEBPACK_IMPORTED_MODULE_3__["default"] {
    enterOC_Match(ctx) {
      console.log("Enter match" + ctx.toString(ruleNames));
      const pattern = ctx.oC_Pattern();
      console.log("Pattern: " + pattern.toString(ruleNames));

      for (let i = 0; i < pattern.getChildCount(); i++) {
        const patternPart = pattern.oC_PatternPart(i);
        console.log("PatternPart: " + patternPart.toString(ruleNames));
      }

      console.log("Where: " + ctx.oC_Where());
    }

    exitOC_Match() {
      console.log("Exit match");
    }

  }

  const printer = new Listener();
  antlr4__WEBPACK_IMPORTED_MODULE_0___default.a.tree.ParseTreeWalker.DEFAULT.walk(printer, tree);
}


/***/ }),

/***/ "./lib/parse.js":
/*!**********************!*\
  !*** ./libs/parse.js ***!
  \**********************/
/*! exports provided: ScopeTypeEnum, Scope, Scoped, Unary, Variable, Literal, Parameter, PropertiesOrLabels, BinaryOp, NodePattern, RelationshipDetail, RelationshipPattern, PatternElement, PatternPart, Pattern, Match, Return, parsePatterns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScopeTypeEnum", function() { return ScopeTypeEnum; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Scope", function() { return Scope; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Scoped", function() { return Scoped; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Unary", function() { return Unary; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Variable", function() { return Variable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Literal", function() { return Literal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Parameter", function() { return Parameter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PropertiesOrLabels", function() { return PropertiesOrLabels; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BinaryOp", function() { return BinaryOp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NodePattern", function() { return NodePattern; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RelationshipDetail", function() { return RelationshipDetail; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RelationshipPattern", function() { return RelationshipPattern; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PatternElement", function() { return PatternElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PatternPart", function() { return PatternPart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Pattern", function() { return Pattern; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Match", function() { return Match; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Return", function() { return Return; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parsePatterns", function() { return parsePatterns; });
/* harmony import */ var _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CypherVisitor.js */ "./lib/CypherVisitor.js");
/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! util */ "./node_modules/util/util.js");
/* harmony import */ var util__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(util__WEBPACK_IMPORTED_MODULE_1__);
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }




function pretty(obj) {
  if (Array.isArray(obj)) {
    return `[${obj.map(pretty)}]`;
  }

  if (obj === null) return "null";

  try {
    return obj.toString();
  } catch (err) {//console.log("Error: "+err);
  }

  return JSON.stringify(obj);
}

const ScopeTypeEnum = {
  NODE: 1,
  LINK: 2,
  WITH: 3,
  PATTERNPART: 4,
  properties: {
    1: {
      name: "node",
      value: 1
    },
    2: {
      name: "link",
      value: 2
    },
    3: {
      name: "with",
      value: 3
    },
    4: {
      name: "patternPart",
      value: 4
    }
  }
};
class Scope {
  constructor(name) {
    this.name = name;
    this.variables = {};
  }

  variable(name) {
    return this.variables[name];
  }

  graph() {
    const graph = {
      nodes: this.nodes(),
      links: this.links()
    };
    return graph;
  }

  nodes() {
    return Object.values(this.variables).map(v => {
      let label = v.labels ? v.labels[0] : null; // take the first label only

      return {
        id: v.id,
        name: v.name,
        type: v.type,
        label: label || null,
        ...v.properties
      };
    }).filter(n => n.type == 1);
  }

  links() {
    let ret = [];
    const scoped = new Set();

    for (const v in this.variables) {
      const value = this.variables[v];

      for (const scope of value.scoped) {
        if (!scoped.has(scope)) {
          scoped.add(scope);
          ret = ret.concat(scope.links());
        }
      }
    }

    return ret;
  }

  refVariable(scoped, name) {
    if (!name) {
      throw "missing name";
    }

    name = name || null;
    let desc = this.variables[name];

    if (!desc) {
      throw `Variable ${name}: undefined`;
    }

    desc.scoped.push(scoped);
  }

  addVariable(scoped, id, name, type, labels, properties) {
    if (!id) {
      return;
    }

    name = name || null;
    labels = labels || null;
    properties = properties || null;

    if (!(type in ScopeTypeEnum.properties)) {
      const error = `For variable '${name}': variable type (${type}) invalid`;
      throw error;
    }

    let desc = this.variables[id];

    if (!desc) {
      desc = {
        scoped: [scoped],
        id: id,
        name: name,
        type: type,
        labels: labels,
        properties: properties
      };
      this.variables[id] = desc;
    } else {
      if (desc.type != type) {
        const error = `For variable '${name}': incompatible types ${type}!= ${desc.type}`;
        console.log(error);
        throw error;
      }

      if (!(scoped in desc.scoped)) desc.scoped.push(scoped);
    }
  }

  toString() {
    return `Scope(name='${this.name}', variables=[${Object.keys(this.variables)}])`;
  }

}
let global_id = 0;

Scope.next_id = function (prefix = 'id') {
  const id = `${prefix}${++global_id}`; //console.log(`Generating id: ${id}`);

  return id;
};

class Scoped {
  constructor(scope) {
    this.scope = scope;
  }

  variables() {
    return [];
  }

  addVariable(id, name, type, labels, properties) {
    this.scope.addVariable(this, id, name, type, labels, properties);
  }

  links() {
    return [];
  }

}
class Unary {
  constructor(value) {
    this.value = value;
  }

  toString() {
    return `${this.constructor.name}(${this.value})`;
  }

}
class Variable extends Unary {}
class Literal extends Unary {}
class Parameter extends Unary {}
class PropertiesOrLabels {
  constructor(propOrLabels) {
    this.propertiesOrLabels = propOrLabels;
  }

  toString() {
    return `PropertiesOrLabels(${this.propertiesOrLabels})`;
  }

}
const mapLiteral = {
  toString: function () {
    return `MapLiteral(${JSON.stringify(this)})`;
  }
};
class BinaryOp {
  constructor(op, left, right) {
    this.op = op;
    this.left = left;
    this.right = right;
  }

  toString() {
    return `${this.op}(${this.left}, ${this.right})`;
  }

}
class NodePattern {
  constructor(variable, labels, properties) {
    this.variable = variable || null;
    this.labels = labels || null;
    this.properties = properties || null;
    if (variable) this.id = variable;else this.id = Scope.next_id("node");
  }

  toString() {
    return `NodePattern(
  variable='${this.variable}',
  labels='${this.labels}',
  properties=${pretty(this.properties)})`;
  }

  toCypher() {
    let properties = this.properties ? " " + util__WEBPACK_IMPORTED_MODULE_1___default.a.inspect(this.properties) : "";
    return `(${this.variable}${properties})`;
  }

}
class RelationshipDetail {
  constructor(variable, relationshipTypes, rangeLiteral, properties) {
    this.variable = variable || null;
    this.relationshipTypes = relationshipTypes;
    this.rangeLiteral = rangeLiteral;
    this.properties = properties;
  }

  toCypher() {
    return `[${this.variable}${this.relationshipTypes.join('')}]`;
  }

  toString() {
    return `RelationshipDetail(
  variable='${this.variable},
  type=${pretty(this.relationshipTypes)}, 
  range=${this.rangeLiteral},
  properties=${pretty(this.properties)})`;
  }

}
const RelationshipEnum = {
  LEFT: 1,
  RIGHT: 2,
  BOTH: 3,
  properties: {
    1: {
      name: "left",
      value: 1,
      code: "<-"
    },
    2: {
      name: "right",
      value: 2,
      code: "->"
    },
    3: {
      name: "both",
      value: 3,
      code: "--"
    }
  }
};
class RelationshipPattern {
  constructor(left, right, detail) {
    this.left = left;
    this.right = right;

    if (left == '<') {
      this.direct = RelationshipEnum.LEFT;
    } else if (right == '>') {
      this.direct = RelationshipEnum.RIGHT;
    } else // if (left=='-' && right=='-')
      this.direct = RelationshipEnum.BOTH;

    this.detail = detail;
    if (detail && detail.variable) this.id = detail.variable;else this.id = Scope.next_id("link");
  }

  variable() {
    if (this.detail) {
      return this.detail.variable;
    }

    return null;
  }

  toCypher() {
    let detail = this.detail ? this.detail.toCypher() : "";
    return `${this.left}${detail}${this.right}`;
  }

  toString() {
    return `RelationshipPattern(
  direct='${RelationshipEnum.properties[this.direct].code}',
  detail=${pretty(this.detail)})`;
  }

} // class PatternElementChain {
//   constructor(relationshipPattern, nodePattern) {
//     this.relationshipPattern = relationshipPattern;
//     this.nodePattern = nodePattern;
//   }
//   toString() {
//     return `PatternElementChain(nodePattern='${pretty(this.relationshipPattern)}, elementChain='${pretty(this.nodePattern)}')`;
//   }
// }

class PatternElement extends Scoped {
  // There is one more nodePattern than elementChains because
  // the path starts and ends with a node.
  constructor(scope, nodePattern, chain) {
    super(scope);
    this.nodePatterns = [nodePattern];
    this.addVariable(nodePattern.id, nodePattern.variable, ScopeTypeEnum.NODE, nodePattern.labels, nodePattern.properties);
    this.elementChains = [];

    for (const link of chain) {
      // console.log(link[0]);
      this.elementChains.push(link[0]);
      const relationshipTypes = link[0].detail ? link[0].detail.relationshipTypes : null;
      const properties = link[0].detail ? link[0].detail.properties : null;
      this.addVariable(link[0].id, link[0].variable(), ScopeTypeEnum.LINK, relationshipTypes, properties);
      this.nodePatterns.push(link[1]);
      this.addVariable(link[1].id, link[1].variable, ScopeTypeEnum.NODE, link[1].labels, link[1].properties);
    }
  }

  links() {
    const ret = [];

    for (let i = 0; i < this.elementChains.length; i++) {
      const chain = this.elementChains[i];
      let link; // console.log('C ', chain);

      const relationshipTypes = chain.detail ? chain.detail.relationshipTypes : null;
      const relationshipType = relationshipTypes ? relationshipTypes[0] : null;
      const properties = chain.detail ? chain.detail.properties : null;

      if (chain.direct == RelationshipEnum.RIGHT || chain.direct == RelationshipEnum.BOTH) {
        link = {
          source: this.nodePatterns[i].id,
          target: this.nodePatterns[i + 1].id,
          name: chain.variable(),
          directed: chain.direct == RelationshipEnum.BOTH ? false : true,
          id: chain.id,
          label: relationshipType,
          ...properties
        };
      } else {
        link = {
          source: this.nodePatterns[i + 1].id,
          target: this.nodePatterns[i].id,
          name: chain.variable(),
          directed: chain.direct == RelationshipEnum.BOTH ? false : true,
          id: chain.id,
          label: relationshipType,
          ...properties
        };
      }

      ret.push(link);
    }

    return ret;
  }

  toCypher() {
    let cypher = this.nodePatterns[0].toCypher();
    let i = 0;

    while (i < this.elementChains.length) {
      cypher += this.elementChains[i].toCypher() + this.nodePatterns[i + 1].toCypher();
      i++;
    }

    return cypher;
  }

  toString() {
    return `PatternElement(
  nodePatterns='${pretty(this.nodePatterns)},
  elementChains='${pretty(this.elementChains)}')`;
  }

}
class PatternPart extends Scoped {
  constructor(scope, element, variable) {
    super(scope);
    this.element = element || null;
    this.variable = variable || null;
    this.addVariable(variable, variable, ScopeTypeEnum.PATTERNPART);
  }

  addElement(element, variable) {
    this.element = element;
    this.variable = variable || null;
    this.addVariable(variable, variable, ScopeTypeEnum.PATTERNPART);
  }

  toCypher() {
    return this.element.toCypher();
  }

  toString() {
    let ret = '';

    if (this.variable) {
      ret += `${this.variable} = `;
    }

    ret += this.element.toString();
    return `PatternPart(${ret})`;
  }

}
class Pattern {
  constructor() {
    this.parts = [];
  }

  addPart(part) {
    this.parts.push(part);
  }

  toCypher() {
    let cypher = "";

    for (const part of this.parts) {
      cypher += part.toCypher();
    }

    return cypher;
  }

  toString() {
    let ret = '';

    for (const part of this.parts) {
      if (ret.length) ret += ", ";
      ret += part.toString();
    }

    return `Pattern(${ret})`;
  }

}
class Match {
  constructor(optional, pattern, where) {
    this.optional = optional;
    this.pattern = pattern;
    this.where = where;
  }

  toString() {
    return `Match(optional=${this.optional},
  pattern=${this.pattern},
  where=${this.where})`;
  }

  toCypher() {
    return "MATCH " + this.pattern.toCypher();
  }

}
class Return {
  constructor(variables) {
    this.variables = variables;
  }

  toCypher() {
    let cypher = "RETURN " + this.variables[0];
    this.variables.slice(1).forEach(v => cypher += ", " + v);
    return cypher;
  }

}

class PatternVisitor extends _CypherVisitor_js__WEBPACK_IMPORTED_MODULE_0__["default"] {
  constructor(verbose = false) {
    super();

    _defineProperty(this, "visitOC_PropertyKeyName", this.visitOC_SymbolicName);

    _defineProperty(this, "visitOC_Literal", this.visitOC_SymbolicName);

    _defineProperty(this, "visitOC_LeftArrowHead", this.visitOC_SymbolicName);

    _defineProperty(this, "visitOC_RightArrowHead", this.visitOC_SymbolicName);

    _defineProperty(this, "visitOC_Dash", this.visitOC_SymbolicName);

    _defineProperty(this, "visitOC_XorExpression", this.visitOC_OrExpression);

    _defineProperty(this, "visitOC_AndExpression", this.visitOC_OrExpression);

    _defineProperty(this, "visitOC_AddOrSubtractExpression", this.visitOC_OrExpression);

    _defineProperty(this, "visitOC_MultiplyDivideModuloExpression", this.visitOC_OrExpression);

    _defineProperty(this, "visitOC_PowerOfExpression", this.visitOC_OrExpression);

    _defineProperty(this, "visitOC_RelTypeName", this.visitOC_Properties);

    _defineProperty(this, "visitOC_SchemaName", this.visitOC_Properties);

    this.verbose = verbose;
    this.patterns = [];
    this.matches = [];
    this.return = null;
    this.scope = new Scope("global");
    this.scopes = [this.scope];
  }

  toCypher() {
    let cypher = "";
    this.matches.forEach(match => {
      cypher += match.toCypher() + " ";
    });
    cypher += this.return.toCypher();
    return cypher;
  }

  visitOC_With(ctx) {
    const ret = super.visitOC_With(ctx).filter(w => w != ' '); //TODO create a new scope

    return ret;
  }

  visitOC_Where(ctx) {
    const ret = super.visitOC_Where(ctx).filter(w => w != ' ');
    return ret[2];
  }

  visitOC_Match(ctx) {
    this.inMatch++;
    const optional = ctx.OPTIONAL();
    const pattern = ctx.oC_Pattern().accept(this);
    const where = ctx.oC_Where();
    const match = new Match(optional !== null, pattern, where ? where.accept(this) : null);
    this.matches.push(match);
    this.inMatch--;
  }

  visitOC_Pattern(ctx) {
    const pattern = new Pattern();
    const parts = super.visitOC_Pattern(ctx).filter(w => w != ' ');

    for (const part of parts) {
      if (part instanceof PatternPart) {
        pattern.addPart(part);
      }
    }

    if (pattern.parts.length == 0) console.log(`Wrong type of return in Pattern: ${pretty(parts)}`);
    this.patterns.push(pattern);
    return pattern;
  }

  visitOC_AnonymousPatternPart(ctx) {
    return super.visitOC_AnonymousPatternPart(ctx)[0];
  }

  visitOC_PatternPart(ctx) {
    const children = super.visitOC_PatternPart(ctx).filter(w => w != ' ');
    if (this.verbose) console.log(`PatternPart: ${pretty(children)}`);

    if (children.length == 1 && children[0] instanceof PatternElement) {
      const part = new PatternPart(this.scope, children[0], null);
      return part;
    } else if (children.length === 3 && children[2] instanceof PatternElement) {
      const part = new PatternPart(this.scope, children[2], children[0].value);
      return part;
    }

    console.log(`Wrong type of return in PatternPart: ${pretty(children[0])}`);
    return null;
  }

  visitOC_PatternElement(ctx) {
    const ret = super.visitOC_PatternElement(ctx).filter(w => w != ' ');
    if (this.verbose) console.log(`PatternElement: ${pretty(ret)}`);
    if (ret.length == 0) return ret;
    if (ret.length == 1 && ret[0] instanceof PatternElement) return ret[0]; // '(' patternElement ')'
    // ret contains an array of NodePattern and PatternElementChain*

    return new PatternElement(this.scope, ret[0], ret.slice(1));
  }

  visitOC_RelationshipPattern(ctx) {
    if (this.verbose) {
      const ret = super.visitOC_RelationshipPattern(ctx).filter(w => w != ' ');
      console.log(`RelationshipPattern: ${pretty(ret)}`);
    }

    const left = ctx.oC_LeftArrowHead() ? '<' : '-';
    const right = ctx.oC_RightArrowHead() ? '>' : '-';
    const detail = ctx.oC_RelationshipDetail();
    return new RelationshipPattern(left, right, detail ? detail.accept(this) : null);
  }

  visitOC_RelationshipDetail(ctx) {
    if (this.verbose) {
      const ret = super.visitOC_RelationshipDetail(ctx).filter(w => w != ' ');
      console.log(`RelationshipDetail: ${pretty(ret)}`);
    }

    const variable = ctx.oC_Variable();
    const relationshipTypes = ctx.oC_RelationshipTypes();
    const rangeLiteral = ctx.oC_RangeLiteral();
    const properties = ctx.oC_Properties();
    return new RelationshipDetail(variable ? variable.accept(this).value : null, relationshipTypes ? relationshipTypes.accept(this) : null, rangeLiteral ? rangeLiteral.accept(this) : null, properties ? properties.accept(this) : null);
  }

  visitOC_RelationshipTypes(ctx) {
    const ret = super.visitOC_RelationshipTypes(ctx);
    return ret.slice(1);
  }

  visitOC_NodePattern(ctx) {
    if (this.verbose) {
      const ret = super.visitOC_NodePattern(ctx).filter(w => w != ' ');
      console.log(`NodePattern: ${pretty(ret)}`);
    }

    const variable = ctx.oC_Variable();
    const nodeLabels = ctx.oC_NodeLabels();
    const properties = ctx.oC_Properties();
    return new NodePattern(variable ? variable.accept(this).value : null, nodeLabels ? nodeLabels.accept(this) : null, properties ? properties.accept(this) : null);
  }

  visitOC_NodeLabel(ctx) {
    const ret = super.visitOC_NodeLabel(ctx);
    return ret[1][0];
  }

  visitOC_MapLiteral(ctx) {
    const keys = this.visit(ctx.oC_PropertyKeyName());
    const exprs = this.visit(ctx.oC_Expression());
    if (this.verbose) console.log(`MapLiteral: ${pretty([keys, exprs])}`);
    const ret = Object.create(mapLiteral);
    keys.forEach((key, i) => {
      let expr = exprs[i][0];

      if (["'", '"'].includes(expr[0])) {
        ret[key] = expr.slice(1, expr.length - 1);
      } else {
        ret[key] = Number(expr);
      }
    });
    return ret;
  }

  visitOC_Variable(ctx) {
    const v = ctx.oC_SymbolicName().accept(this);
    return new Variable(v);
  }

  visitOC_Parameter(ctx) {
    const ret = super.visitOC_Parameter(ctx).filter(w => w != ' ');
    return new Parameter(ret[1]);
  }

  visitOC_SymbolicName(ctx) {
    return ctx.getChild(0).getText();
  }

  visitTerminal(node) {
    return node.getText();
  }

  visitOC_OrExpression(ctx) {
    const ret = super.visitChildren(ctx);
    if (this.verbose) console.log(`Expression: ${pretty(ret)}`);
    if (ret.length == 1) // simplify
      return ret[0];
    return new BinaryOp(ret[1], ret[0], ret[2]);
  }

  visitOC_NotExpression(ctx) {
    const ret = super.visitChildren(ctx).filter(w => w != ' ');
    if (this.verbose) console.log(`Expression: ${pretty(ret)}`);
    if (ret.length == 1) // simplify
      return ret[0];
    return new BinaryOp(ret[0], ret[1], null);
  }

  visitOC_ComparisonExpression(ctx) {
    const ret = super.visitChildren(ctx).filter(w => w != ' ');
    if (this.verbose) console.log(`ComparisonExpression: ${pretty(ret)}`);
    if (ret.length == 1) // simplify
      return ret[0]; //console.log(`ComparisonExpression: ${pretty(ret)}`);

    return new BinaryOp(ret[1], ret[0], ret[2]);
  }

  visitOC_PropertyOrLabelsExpression(ctx) {
    const ret = super.visitChildren(ctx).filter(w => w != ' ');
    if (this.verbose) console.log(`PropertyOrLabelsExpression: ${pretty(ret)}`);
    if (ret.length == 1) // simplify
      return ret[0]; //console.log(`PropertyOrLabelsExpression: ${pretty(ret)}`);

    return new PropertiesOrLabels(ret);
  }

  visitOC_UnaryAddOrSubtractExpression(ctx) {
    const ret = super.visitChildren(ctx).filter(w => w != ' ');
    if (this.verbose) console.log(`UnaryAddOrSubtractExpression: ${pretty(ret)}`);
    if (ret.length == 1) // simplify
      return ret[0];
    return new BinaryOp(ret[0], ret[1], null);
  }

  visitOC_StringListNullOperatorExpression(ctx) {
    const ret = super.visitChildren(ctx).filter(w => w != ' ');
    if (this.verbose) console.log(`StringListNullOperatorExpression: ${pretty(ret)}`);
    if (ret.length == 1) // simplify
      return ret[0];
    return new BinaryOp(ret[0], ret[1], null);
  }

  visitOC_Atom(ctx) {
    // TODO
    const ret = super.visitChildren(ctx).filter(w => w != ' ');
    if (this.verbose) console.log(`Atom: ${pretty(ret)}`);
    if (ret.length == 1) return ret[0];
    return ret;
  }

  visitOC_Properties(ctx) {
    const ret = super.visitChildren(ctx).filter(w => w != ' ');
    return ret[0];
  }

  visitOC_Return(ctx) {
    const ret = super.visitChildren(ctx);
    const variables = ret[1];
    this.return = new Return(variables); // console.log("RETURN ", ret);
    // return ret[1];
  }

  visitOC_ProjectionItem(ctx) {
    const ret = super.visitOC_ProjectionItem(ctx); // console.log("proj ", ret[0][0].value);

    return ret[0][0].value;
  }

  visitOC_ProjectionBody(ctx) {
    const ret = super.visitOC_ProjectionBody(ctx).filter(w => w != " ");
    return ret[0];
  }

  visitOC_ProjectionItems(ctx) {
    const ret = super.visitOC_ProjectionItems(ctx).filter(w => w != " " && w != ",");
    return ret;
  }

}

function parsePatterns(tree, verbose = false) {
  const visitor = new PatternVisitor(verbose);
  tree.accept(visitor); // return {patterns: visitor.patterns, matches: visitor.matches, scopes: visitor.scopes};

  return visitor;
}

/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/BufferedTokenStream.js":
/*!***************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/BufferedTokenStream.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/src/antlr4/Token.js");
const Lexer = __webpack_require__(/*! ./Lexer */ "./node_modules/antlr4/src/antlr4/Lexer.js");
const {Interval} = __webpack_require__(/*! ./IntervalSet */ "./node_modules/antlr4/src/antlr4/IntervalSet.js");

// this is just to keep meaningful parameter types to Parser
class TokenStream {}

/**
 * This implementation of {@link TokenStream} loads tokens from a
 * {@link TokenSource} on-demand, and places the tokens in a buffer to provide
 * access to any previous token by index.
 *
 * <p>
 * This token stream ignores the value of {@link Token//getChannel}. If your
 * parser requires the token stream filter tokens to only those on a particular
 * channel, such as {@link Token//DEFAULT_CHANNEL} or
 * {@link Token//HIDDEN_CHANNEL}, use a filtering token stream such a
 * {@link CommonTokenStream}.</p>
 */
class BufferedTokenStream extends TokenStream {
	constructor(tokenSource) {

		super();
		// The {@link TokenSource} from which tokens for this stream are fetched.
		this.tokenSource = tokenSource;
		/**
		 * A collection of all tokens fetched from the token source. The list is
		 * considered a complete view of the input once {@link //fetchedEOF} is set
		 * to {@code true}.
		 */
		this.tokens = [];

		/**
		 * The index into {@link //tokens} of the current token (next token to
		 * {@link //consume}). {@link //tokens}{@code [}{@link //p}{@code ]} should
		 * be
		 * {@link //LT LT(1)}.
		 *
		 * <p>This field is set to -1 when the stream is first constructed or when
		 * {@link //setTokenSource} is called, indicating that the first token has
		 * not yet been fetched from the token source. For additional information,
		 * see the documentation of {@link IntStream} for a description of
		 * Initializing Methods.</p>
		 */
		this.index = -1;

		/**
		 * Indicates whether the {@link Token//EOF} token has been fetched from
		 * {@link //tokenSource} and added to {@link //tokens}. This field improves
		 * performance for the following cases:
		 *
		 * <ul>
		 * <li>{@link //consume}: The lookahead check in {@link //consume} to
		 * prevent
		 * consuming the EOF symbol is optimized by checking the values of
		 * {@link //fetchedEOF} and {@link //p} instead of calling {@link
		 * //LA}.</li>
		 * <li>{@link //fetch}: The check to prevent adding multiple EOF symbols
		 * into
		 * {@link //tokens} is trivial with this field.</li>
		 * <ul>
		 */
		this.fetchedEOF = false;
	}

	mark() {
		return 0;
	}

	release(marker) {
		// no resources to release
	}

	reset() {
		this.seek(0);
	}

	seek(index) {
		this.lazyInit();
		this.index = this.adjustSeekIndex(index);
	}

	get(index) {
		this.lazyInit();
		return this.tokens[index];
	}

	consume() {
		let skipEofCheck = false;
		if (this.index >= 0) {
			if (this.fetchedEOF) {
				// the last token in tokens is EOF. skip check if p indexes any
				// fetched token except the last.
				skipEofCheck = this.index < this.tokens.length - 1;
			} else {
				// no EOF token in tokens. skip check if p indexes a fetched token.
				skipEofCheck = this.index < this.tokens.length;
			}
		} else {
			// not yet initialized
			skipEofCheck = false;
		}
		if (!skipEofCheck && this.LA(1) === Token.EOF) {
			throw "cannot consume EOF";
		}
		if (this.sync(this.index + 1)) {
			this.index = this.adjustSeekIndex(this.index + 1);
		}
	}

	/**
	 * Make sure index {@code i} in tokens has a token.
	 *
	 * @return {Boolean} {@code true} if a token is located at index {@code i}, otherwise
	 * {@code false}.
	 * @see //get(int i)
	 */
	sync(i) {
		const n = i - this.tokens.length + 1; // how many more elements we need?
		if (n > 0) {
			const fetched = this.fetch(n);
			return fetched >= n;
		}
		return true;
	}

	/**
	 * Add {@code n} elements to buffer.
	 *
	 * @return {Number} The actual number of elements added to the buffer.
	 */
	fetch(n) {
		if (this.fetchedEOF) {
			return 0;
		}
		for (let i = 0; i < n; i++) {
			const t = this.tokenSource.nextToken();
			t.tokenIndex = this.tokens.length;
			this.tokens.push(t);
			if (t.type === Token.EOF) {
				this.fetchedEOF = true;
				return i + 1;
			}
		}
		return n;
	}

// Get all tokens from start..stop inclusively///
	getTokens(start, stop, types) {
		if (types === undefined) {
			types = null;
		}
		if (start < 0 || stop < 0) {
			return null;
		}
		this.lazyInit();
		const subset = [];
		if (stop >= this.tokens.length) {
			stop = this.tokens.length - 1;
		}
		for (let i = start; i < stop; i++) {
			const t = this.tokens[i];
			if (t.type === Token.EOF) {
				break;
			}
			if (types === null || types.contains(t.type)) {
				subset.push(t);
			}
		}
		return subset;
	}

	LA(i) {
		return this.LT(i).type;
	}

	LB(k) {
		if (this.index - k < 0) {
			return null;
		}
		return this.tokens[this.index - k];
	}

	LT(k) {
		this.lazyInit();
		if (k === 0) {
			return null;
		}
		if (k < 0) {
			return this.LB(-k);
		}
		const i = this.index + k - 1;
		this.sync(i);
		if (i >= this.tokens.length) { // return EOF token
			// EOF must be last token
			return this.tokens[this.tokens.length - 1];
		}
		return this.tokens[i];
	}

	/**
	 * Allowed derived classes to modify the behavior of operations which change
	 * the current stream position by adjusting the target token index of a seek
	 * operation. The default implementation simply returns {@code i}. If an
	 * exception is thrown in this method, the current stream index should not be
	 * changed.
	 *
	 * <p>For example, {@link CommonTokenStream} overrides this method to ensure
	 * that
	 * the seek target is always an on-channel token.</p>
	 *
	 * @param {Number} i The target token index.
	 * @return {Number} The adjusted target token index.
	 */
	adjustSeekIndex(i) {
		return i;
	}

	lazyInit() {
		if (this.index === -1) {
			this.setup();
		}
	}

	setup() {
		this.sync(0);
		this.index = this.adjustSeekIndex(0);
	}

// Reset this token stream by setting its token source.///
	setTokenSource(tokenSource) {
		this.tokenSource = tokenSource;
		this.tokens = [];
		this.index = -1;
		this.fetchedEOF = false;
	}

	/**
	 * Given a starting index, return the index of the next token on channel.
	 * Return i if tokens[i] is on channel. Return -1 if there are no tokens
	 * on channel between i and EOF.
	 */
	nextTokenOnChannel(i, channel) {
		this.sync(i);
		if (i >= this.tokens.length) {
			return -1;
		}
		let token = this.tokens[i];
		while (token.channel !== this.channel) {
			if (token.type === Token.EOF) {
				return -1;
			}
			i += 1;
			this.sync(i);
			token = this.tokens[i];
		}
		return i;
	}

	/**
	 * Given a starting index, return the index of the previous token on channel.
	 * Return i if tokens[i] is on channel. Return -1 if there are no tokens
	 * on channel between i and 0.
	 */
	previousTokenOnChannel(i, channel) {
		while (i >= 0 && this.tokens[i].channel !== channel) {
			i -= 1;
		}
		return i;
	}

	/**
	 * Collect all tokens on specified channel to the right of
	 * the current token up until we see a token on DEFAULT_TOKEN_CHANNEL or
	 * EOF. If channel is -1, find any non default channel token.
	 */
	getHiddenTokensToRight(tokenIndex,
			channel) {
		if (channel === undefined) {
			channel = -1;
		}
		this.lazyInit();
		if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
			throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
		}
		const nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1, Lexer.DEFAULT_TOKEN_CHANNEL);
		const from_ = tokenIndex + 1;
		// if none onchannel to right, nextOnChannel=-1 so set to = last token
		const to = nextOnChannel === -1 ? this.tokens.length - 1 : nextOnChannel;
		return this.filterForChannel(from_, to, channel);
	}

	/**
	 * Collect all tokens on specified channel to the left of
	 * the current token up until we see a token on DEFAULT_TOKEN_CHANNEL.
	 * If channel is -1, find any non default channel token.
	 */
	getHiddenTokensToLeft(tokenIndex,
			channel) {
		if (channel === undefined) {
			channel = -1;
		}
		this.lazyInit();
		if (tokenIndex < 0 || tokenIndex >= this.tokens.length) {
			throw "" + tokenIndex + " not in 0.." + this.tokens.length - 1;
		}
		const prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1, Lexer.DEFAULT_TOKEN_CHANNEL);
		if (prevOnChannel === tokenIndex - 1) {
			return null;
		}
		// if none on channel to left, prevOnChannel=-1 then from=0
		const from_ = prevOnChannel + 1;
		const to = tokenIndex - 1;
		return this.filterForChannel(from_, to, channel);
	}

	filterForChannel(left, right, channel) {
		const hidden = [];
		for (let i = left; i < right + 1; i++) {
			const t = this.tokens[i];
			if (channel === -1) {
				if (t.channel !== Lexer.DEFAULT_TOKEN_CHANNEL) {
					hidden.push(t);
				}
			} else if (t.channel === channel) {
				hidden.push(t);
			}
		}
		if (hidden.length === 0) {
			return null;
		}
		return hidden;
	}

	getSourceName() {
		return this.tokenSource.getSourceName();
	}

// Get the text of all tokens in this buffer.///
	getText(interval) {
		this.lazyInit();
		this.fill();
		if (interval === undefined || interval === null) {
			interval = new Interval(0, this.tokens.length - 1);
		}
		let start = interval.start;
		if (start instanceof Token) {
			start = start.tokenIndex;
		}
		let stop = interval.stop;
		if (stop instanceof Token) {
			stop = stop.tokenIndex;
		}
		if (start === null || stop === null || start < 0 || stop < 0) {
			return "";
		}
		if (stop >= this.tokens.length) {
			stop = this.tokens.length - 1;
		}
		let s = "";
		for (let i = start; i < stop + 1; i++) {
			const t = this.tokens[i];
			if (t.type === Token.EOF) {
				break;
			}
			s = s + t.text;
		}
		return s;
	}

// Get all tokens from lexer until EOF///
	fill() {
		this.lazyInit();
		while (this.fetch(1000) === 1000) {
			continue;
		}
	}
}


module.exports = BufferedTokenStream;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/CharStreams.js":
/*!*******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/CharStreams.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const InputStream = __webpack_require__(/*! ./InputStream */ "./node_modules/antlr4/src/antlr4/InputStream.js");
const fs = __webpack_require__(/*! fs */ "./node_modules/node-libs-browser/mock/empty.js");

/**
 * Utility functions to create InputStreams from various sources.
 *
 * All returned InputStreams support the full range of Unicode
 * up to U+10FFFF (the default behavior of InputStream only supports
 * code points up to U+FFFF).
 */
const CharStreams = {
  // Creates an InputStream from a string.
  fromString: function(str) {
    return new InputStream(str, true);
  },

  /**
   * Asynchronously creates an InputStream from a blob given the
   * encoding of the bytes in that blob (defaults to 'utf8' if
   * encoding is null).
   *
   * Invokes onLoad(result) on success, onError(error) on
   * failure.
   */
  fromBlob: function(blob, encoding, onLoad, onError) {
    const reader = new window.FileReader();
    reader.onload = function(e) {
      const is = new InputStream(e.target.result, true);
      onLoad(is);
    };
    reader.onerror = onError;
    reader.readAsText(blob, encoding);
  },

  /**
   * Creates an InputStream from a Buffer given the
   * encoding of the bytes in that buffer (defaults to 'utf8' if
   * encoding is null).
   */
  fromBuffer: function(buffer, encoding) {
    return new InputStream(buffer.toString(encoding), true);
  },

  /** Asynchronously creates an InputStream from a file on disk given
   * the encoding of the bytes in that file (defaults to 'utf8' if
   * encoding is null).
   *
   * Invokes callback(error, result) on completion.
   */
  fromPath: function(path, encoding, callback) {
    fs.readFile(path, encoding, function(err, data) {
      let is = null;
      if (data !== null) {
        is = new InputStream(data, true);
      }
      callback(err, is);
    });
  },

  /**
   * Synchronously creates an InputStream given a path to a file
   * on disk and the encoding of the bytes in that file (defaults to
   * 'utf8' if encoding is null).
   */
  fromPathSync: function(path, encoding) {
    const data = fs.readFileSync(path, encoding);
    return new InputStream(data, true);
  }
};

module.exports = CharStreams


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/CommonTokenFactory.js":
/*!**************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/CommonTokenFactory.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const CommonToken = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/src/antlr4/Token.js").CommonToken;

class TokenFactory {}

/**
 * This default implementation of {@link TokenFactory} creates
 * {@link CommonToken} objects.
 */
class CommonTokenFactory extends TokenFactory {
    constructor(copyText) {
        super();
        /**
         * Indicates whether {@link CommonToken//setText} should be called after
         * constructing tokens to explicitly set the text. This is useful for cases
         * where the input stream might not be able to provide arbitrary substrings
         * of text from the input after the lexer creates a token (e.g. the
         * implementation of {@link CharStream//getText} in
         * {@link UnbufferedCharStream} throws an
         * {@link UnsupportedOperationException}). Explicitly setting the token text
         * allows {@link Token//getText} to be called at any time regardless of the
         * input stream implementation.
         *
         * <p>
         * The default value is {@code false} to avoid the performance and memory
         * overhead of copying text for every token unless explicitly requested.</p>
         */
        this.copyText = copyText===undefined ? false : copyText;
    }

    create(source, type, text, channel, start, stop, line, column) {
        const t = new CommonToken(source, type, channel, start, stop);
        t.line = line;
        t.column = column;
        if (text !==null) {
            t.text = text;
        } else if (this.copyText && source[1] !==null) {
            t.text = source[1].getText(start,stop);
        }
        return t;
    }

    createThin(type, text) {
        const t = new CommonToken(null, type);
        t.text = text;
        return t;
    }
}

/**
 * The default {@link CommonTokenFactory} instance.
 *
 * <p>
 * This token factory does not explicitly copy token text when constructing
 * tokens.</p>
 */
CommonTokenFactory.DEFAULT = new CommonTokenFactory();

module.exports = CommonTokenFactory;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/CommonTokenStream.js":
/*!*************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/CommonTokenStream.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */


const Token = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/src/antlr4/Token.js").Token;
const BufferedTokenStream = __webpack_require__(/*! ./BufferedTokenStream */ "./node_modules/antlr4/src/antlr4/BufferedTokenStream.js");

/**
 * This class extends {@link BufferedTokenStream} with functionality to filter
 * token streams to tokens on a particular channel (tokens where
 * {@link Token//getChannel} returns a particular value).
 *
 * <p>
 * This token stream provides access to all tokens by index or when calling
 * methods like {@link //getText}. The channel filtering is only used for code
 * accessing tokens via the lookahead methods {@link //LA}, {@link //LT}, and
 * {@link //LB}.</p>
 *
 * <p>
 * By default, tokens are placed on the default channel
 * ({@link Token//DEFAULT_CHANNEL}), but may be reassigned by using the
 * {@code ->channel(HIDDEN)} lexer command, or by using an embedded action to
 * call {@link Lexer//setChannel}.
 * </p>
 *
 * <p>
 * Note: lexer rules which use the {@code ->skip} lexer command or call
 * {@link Lexer//skip} do not produce tokens at all, so input text matched by
 * such a rule will not be available as part of the token stream, regardless of
 * channel.</p>
 */
class CommonTokenStream extends BufferedTokenStream {
    constructor(lexer, channel) {
        super(lexer);
        this.channel = channel===undefined ? Token.DEFAULT_CHANNEL : channel;
    }

    adjustSeekIndex(i) {
        return this.nextTokenOnChannel(i, this.channel);
    }

    LB(k) {
        if (k===0 || this.index-k<0) {
            return null;
        }
        let i = this.index;
        let n = 1;
        // find k good tokens looking backwards
        while (n <= k) {
            // skip off-channel tokens
            i = this.previousTokenOnChannel(i - 1, this.channel);
            n += 1;
        }
        if (i < 0) {
            return null;
        }
        return this.tokens[i];
    }

    LT(k) {
        this.lazyInit();
        if (k === 0) {
            return null;
        }
        if (k < 0) {
            return this.LB(-k);
        }
        let i = this.index;
        let n = 1; // we know tokens[pos] is a good one
        // find k good tokens
        while (n < k) {
            // skip off-channel tokens, but make sure to not look past EOF
            if (this.sync(i + 1)) {
                i = this.nextTokenOnChannel(i + 1, this.channel);
            }
            n += 1;
        }
        return this.tokens[i];
    }

    // Count EOF just once.
    getNumberOfOnChannelTokens() {
        let n = 0;
        this.fill();
        for (let i =0; i< this.tokens.length;i++) {
            const t = this.tokens[i];
            if( t.channel===this.channel) {
                n += 1;
            }
            if( t.type===Token.EOF) {
                break;
            }
        }
        return n;
    }
}

module.exports = CommonTokenStream;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/FileStream.js":
/*!******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/FileStream.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const InputStream = __webpack_require__(/*! ./InputStream */ "./node_modules/antlr4/src/antlr4/InputStream.js");
const fs = __webpack_require__(/*! fs */ "./node_modules/node-libs-browser/mock/empty.js");

/**
 * This is an InputStream that is loaded from a file all at once
 * when you construct the object.
 */
class FileStream extends InputStream {
	constructor(fileName, decodeToUnicodeCodePoints) {
		const data = fs.readFileSync(fileName, "utf8");
		super(data, decodeToUnicodeCodePoints);
		this.fileName = fileName;
	}
}

module.exports = FileStream


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/InputStream.js":
/*!*******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/InputStream.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/src/antlr4/Token.js");
__webpack_require__(/*! ./polyfills/codepointat */ "./node_modules/antlr4/src/antlr4/polyfills/codepointat.js");
__webpack_require__(/*! ./polyfills/fromcodepoint */ "./node_modules/antlr4/src/antlr4/polyfills/fromcodepoint.js");

/**
 * If decodeToUnicodeCodePoints is true, the input is treated
 * as a series of Unicode code points.
 *
 * Otherwise, the input is treated as a series of 16-bit UTF-16 code
 * units.
 */
class InputStream {
	constructor(data, decodeToUnicodeCodePoints) {
		this.name = "<empty>";
		this.strdata = data;
		this.decodeToUnicodeCodePoints = decodeToUnicodeCodePoints || false;
		// _loadString - Vacuum all input from a string and then treat it like a buffer.
		this._index = 0;
		this.data = [];
		if (this.decodeToUnicodeCodePoints) {
			for (let i = 0; i < this.strdata.length; ) {
				const codePoint = this.strdata.codePointAt(i);
				this.data.push(codePoint);
				i += codePoint <= 0xFFFF ? 1 : 2;
			}
		} else {
			for (let i = 0; i < this.strdata.length; i++) {
				const codeUnit = this.strdata.charCodeAt(i);
				this.data.push(codeUnit);
			}
		}
		this._size = this.data.length;
	}

	/**
	 * Reset the stream so that it's in the same state it was
	 * when the object was created *except* the data array is not
	 * touched.
	 */
	reset() {
		this._index = 0;
	}

	consume() {
		if (this._index >= this._size) {
			// assert this.LA(1) == Token.EOF
			throw ("cannot consume EOF");
		}
		this._index += 1;
	}

	LA(offset) {
		if (offset === 0) {
			return 0; // undefined
		}
		if (offset < 0) {
			offset += 1; // e.g., translate LA(-1) to use offset=0
		}
		const pos = this._index + offset - 1;
		if (pos < 0 || pos >= this._size) { // invalid
			return Token.EOF;
		}
		return this.data[pos];
	}

	LT(offset) {
		return this.LA(offset);
	}

// mark/release do nothing; we have entire buffer
	mark() {
		return -1;
	}

	release(marker) {
	}

	/**
	 * consume() ahead until p==_index; can't just set p=_index as we must
	 * update line and column. If we seek backwards, just set p
	 */
	seek(_index) {
		if (_index <= this._index) {
			this._index = _index; // just jump; don't update stream state (line,
									// ...)
			return;
		}
		// seek forward
		this._index = Math.min(_index, this._size);
	}

	getText(start, stop) {
		if (stop >= this._size) {
			stop = this._size - 1;
		}
		if (start >= this._size) {
			return "";
		} else {
			if (this.decodeToUnicodeCodePoints) {
				let result = "";
				for (let i = start; i <= stop; i++) {
					result += String.fromCodePoint(this.data[i]);
				}
				return result;
			} else {
				return this.strdata.slice(start, stop + 1);
			}
		}
	}

	toString() {
		return this.strdata;
	}

	get index(){
		return this._index;
	}

	get size(){
		return this._size;
	}
}


module.exports = InputStream;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/IntervalSet.js":
/*!*******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/IntervalSet.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/src/antlr4/Token.js");

/* stop is not included! */
class Interval {
	constructor(start, stop) {
		this.start = start;
		this.stop = stop;
	}

	contains(item) {
		return item >= this.start && item < this.stop;
	}

	toString() {
		if(this.start===this.stop-1) {
			return this.start.toString();
		} else {
			return this.start.toString() + ".." + (this.stop-1).toString();
		}
	}

	get length(){
		return this.stop - this.start;
	}
}


class IntervalSet {
	constructor() {
		this.intervals = null;
		this.readOnly = false;
	}

	first(v) {
		if (this.intervals === null || this.intervals.length===0) {
			return Token.INVALID_TYPE;
		} else {
			return this.intervals[0].start;
		}
	}

	addOne(v) {
		this.addInterval(new Interval(v, v + 1));
	}

	addRange(l, h) {
		this.addInterval(new Interval(l, h + 1));
	}

	addInterval(v) {
		if (this.intervals === null) {
			this.intervals = [];
			this.intervals.push(v);
		} else {
			// find insert pos
			for (let k = 0; k < this.intervals.length; k++) {
				const i = this.intervals[k];
				// distinct range -> insert
				if (v.stop < i.start) {
					this.intervals.splice(k, 0, v);
					return;
				}
				// contiguous range -> adjust
				else if (v.stop === i.start) {
					this.intervals[k].start = v.start;
					return;
				}
				// overlapping range -> adjust and reduce
				else if (v.start <= i.stop) {
					this.intervals[k] = new Interval(Math.min(i.start, v.start), Math.max(i.stop, v.stop));
					this.reduce(k);
					return;
				}
			}
			// greater than any existing
			this.intervals.push(v);
		}
	}

	addSet(other) {
		if (other.intervals !== null) {
			for (let k = 0; k < other.intervals.length; k++) {
				const i = other.intervals[k];
				this.addInterval(new Interval(i.start, i.stop));
			}
		}
		return this;
	}

	reduce(k) {
		// only need to reduce if k is not the last
		if (k < this.intervalslength - 1) {
			const l = this.intervals[k];
			const r = this.intervals[k + 1];
			// if r contained in l
			if (l.stop >= r.stop) {
				this.intervals.pop(k + 1);
				this.reduce(k);
			} else if (l.stop >= r.start) {
				this.intervals[k] = new Interval(l.start, r.stop);
				this.intervals.pop(k + 1);
			}
		}
	}

	complement(start, stop) {
		const result = new IntervalSet();
		result.addInterval(new Interval(start,stop+1));
		for(let i=0; i<this.intervals.length; i++) {
			result.removeRange(this.intervals[i]);
		}
		return result;
	}

	contains(item) {
		if (this.intervals === null) {
			return false;
		} else {
			for (let k = 0; k < this.intervals.length; k++) {
				if(this.intervals[k].contains(item)) {
					return true;
				}
			}
			return false;
		}
	}

	removeRange(v) {
		if(v.start===v.stop-1) {
			this.removeOne(v.start);
		} else if (this.intervals!==null) {
			let k = 0;
			for(let n=0; n<this.intervals.length; n++) {
				const i = this.intervals[k];
				// intervals are ordered
				if (v.stop<=i.start) {
					return;
				}
				// check for including range, split it
				else if(v.start>i.start && v.stop<i.stop) {
					this.intervals[k] = new Interval(i.start, v.start);
					const x = new Interval(v.stop, i.stop);
					this.intervals.splice(k, 0, x);
					return;
				}
				// check for included range, remove it
				else if(v.start<=i.start && v.stop>=i.stop) {
					this.intervals.splice(k, 1);
					k = k - 1; // need another pass
				}
				// check for lower boundary
				else if(v.start<i.stop) {
					this.intervals[k] = new Interval(i.start, v.start);
				}
				// check for upper boundary
				else if(v.stop<i.stop) {
					this.intervals[k] = new Interval(v.stop, i.stop);
				}
				k += 1;
			}
		}
	}

	removeOne(v) {
		if (this.intervals !== null) {
			for (let k = 0; k < this.intervals.length; k++) {
				const i = this.intervals[k];
				// intervals is ordered
				if (v < i.start) {
					return;
				}
				// check for single value range
				else if (v === i.start && v === i.stop - 1) {
					this.intervals.splice(k, 1);
					return;
				}
				// check for lower boundary
				else if (v === i.start) {
					this.intervals[k] = new Interval(i.start + 1, i.stop);
					return;
				}
				// check for upper boundary
				else if (v === i.stop - 1) {
					this.intervals[k] = new Interval(i.start, i.stop - 1);
					return;
				}
				// split existing range
				else if (v < i.stop - 1) {
					const x = new Interval(i.start, v);
					i.start = v + 1;
					this.intervals.splice(k, 0, x);
					return;
				}
			}
		}
	}

	toString(literalNames, symbolicNames, elemsAreChar) {
		literalNames = literalNames || null;
		symbolicNames = symbolicNames || null;
		elemsAreChar = elemsAreChar || false;
		if (this.intervals === null) {
			return "{}";
		} else if(literalNames!==null || symbolicNames!==null) {
			return this.toTokenString(literalNames, symbolicNames);
		} else if(elemsAreChar) {
			return this.toCharString();
		} else {
			return this.toIndexString();
		}
	}

	toCharString() {
		const names = [];
		for (let i = 0; i < this.intervals.length; i++) {
			const v = this.intervals[i];
			if(v.stop===v.start+1) {
				if ( v.start===Token.EOF ) {
					names.push("<EOF>");
				} else {
					names.push("'" + String.fromCharCode(v.start) + "'");
				}
			} else {
				names.push("'" + String.fromCharCode(v.start) + "'..'" + String.fromCharCode(v.stop-1) + "'");
			}
		}
		if (names.length > 1) {
			return "{" + names.join(", ") + "}";
		} else {
			return names[0];
		}
	}

	toIndexString() {
		const names = [];
		for (let i = 0; i < this.intervals.length; i++) {
			const v = this.intervals[i];
			if(v.stop===v.start+1) {
				if ( v.start===Token.EOF ) {
					names.push("<EOF>");
				} else {
					names.push(v.start.toString());
				}
			} else {
				names.push(v.start.toString() + ".." + (v.stop-1).toString());
			}
		}
		if (names.length > 1) {
			return "{" + names.join(", ") + "}";
		} else {
			return names[0];
		}
	}

	toTokenString(literalNames, symbolicNames) {
		const names = [];
		for (let i = 0; i < this.intervals.length; i++) {
			const v = this.intervals[i];
			for (let j = v.start; j < v.stop; j++) {
				names.push(this.elementName(literalNames, symbolicNames, j));
			}
		}
		if (names.length > 1) {
			return "{" + names.join(", ") + "}";
		} else {
			return names[0];
		}
	}

	elementName(literalNames, symbolicNames, a) {
		if (a === Token.EOF) {
			return "<EOF>";
		} else if (a === Token.EPSILON) {
			return "<EPSILON>";
		} else {
			return literalNames[a] || symbolicNames[a];
		}
	}

	get length(){
		let len = 0;
		this.intervals.map(function(i) {len += i.length;});
		return len;
	}
}

module.exports = {
	Interval,
	IntervalSet
};


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/LL1Analyzer.js":
/*!*******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/LL1Analyzer.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Set, BitSet} = __webpack_require__(/*! ./Utils */ "./node_modules/antlr4/src/antlr4/Utils.js");
const {Token} = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/src/antlr4/Token.js");
const {ATNConfig} = __webpack_require__(/*! ./atn/ATNConfig */ "./node_modules/antlr4/src/antlr4/atn/ATNConfig.js");
const {IntervalSet} = __webpack_require__(/*! ./IntervalSet */ "./node_modules/antlr4/src/antlr4/IntervalSet.js");
const {RuleStopState} = __webpack_require__(/*! ./atn/ATNState */ "./node_modules/antlr4/src/antlr4/atn/ATNState.js");
const {RuleTransition, NotSetTransition, WildcardTransition, AbstractPredicateTransition} = __webpack_require__(/*! ./atn/Transition */ "./node_modules/antlr4/src/antlr4/atn/Transition.js");
const {predictionContextFromRuleContext, PredictionContext, SingletonPredictionContext} = __webpack_require__(/*! ./PredictionContext */ "./node_modules/antlr4/src/antlr4/PredictionContext.js");

class LL1Analyzer {
    constructor(atn) {
        this.atn = atn;
    }

    /**
     * Calculates the SLL(1) expected lookahead set for each outgoing transition
     * of an {@link ATNState}. The returned array has one element for each
     * outgoing transition in {@code s}. If the closure from transition
     * <em>i</em> leads to a semantic predicate before matching a symbol, the
     * element at index <em>i</em> of the result will be {@code null}.
     *
     * @param s the ATN state
     * @return the expected symbols for each outgoing transition of {@code s}.
     */
    getDecisionLookahead(s) {
        if (s === null) {
            return null;
        }
        const count = s.transitions.length;
        const look = [];
        for(let alt=0; alt< count; alt++) {
            look[alt] = new IntervalSet();
            const lookBusy = new Set();
            const seeThruPreds = false; // fail to get lookahead upon pred
            this._LOOK(s.transition(alt).target, null, PredictionContext.EMPTY,
                  look[alt], lookBusy, new BitSet(), seeThruPreds, false);
            // Wipe out lookahead for this alternative if we found nothing
            // or we had a predicate when we !seeThruPreds
            if (look[alt].length===0 || look[alt].contains(LL1Analyzer.HIT_PRED)) {
                look[alt] = null;
            }
        }
        return look;
    }

    /**
     * Compute set of tokens that can follow {@code s} in the ATN in the
     * specified {@code ctx}.
     *
     * <p>If {@code ctx} is {@code null} and the end of the rule containing
     * {@code s} is reached, {@link Token//EPSILON} is added to the result set.
     * If {@code ctx} is not {@code null} and the end of the outermost rule is
     * reached, {@link Token//EOF} is added to the result set.</p>
     *
     * @param s the ATN state
     * @param stopState the ATN state to stop at. This can be a
     * {@link BlockEndState} to detect epsilon paths through a closure.
     * @param ctx the complete parser context, or {@code null} if the context
     * should be ignored
     *
     * @return The set of tokens that can follow {@code s} in the ATN in the
     * specified {@code ctx}.
     */
    LOOK(s, stopState, ctx) {
        const r = new IntervalSet();
        const seeThruPreds = true; // ignore preds; get all lookahead
        ctx = ctx || null;
        const lookContext = ctx!==null ? predictionContextFromRuleContext(s.atn, ctx) : null;
        this._LOOK(s, stopState, lookContext, r, new Set(), new BitSet(), seeThruPreds, true);
        return r;
    }

    /**
     * Compute set of tokens that can follow {@code s} in the ATN in the
     * specified {@code ctx}.
     *
     * <p>If {@code ctx} is {@code null} and {@code stopState} or the end of the
     * rule containing {@code s} is reached, {@link Token//EPSILON} is added to
     * the result set. If {@code ctx} is not {@code null} and {@code addEOF} is
     * {@code true} and {@code stopState} or the end of the outermost rule is
     * reached, {@link Token//EOF} is added to the result set.</p>
     *
     * @param s the ATN state.
     * @param stopState the ATN state to stop at. This can be a
     * {@link BlockEndState} to detect epsilon paths through a closure.
     * @param ctx The outer context, or {@code null} if the outer context should
     * not be used.
     * @param look The result lookahead set.
     * @param lookBusy A set used for preventing epsilon closures in the ATN
     * from causing a stack overflow. Outside code should pass
     * {@code new Set<ATNConfig>} for this argument.
     * @param calledRuleStack A set used for preventing left recursion in the
     * ATN from causing a stack overflow. Outside code should pass
     * {@code new BitSet()} for this argument.
     * @param seeThruPreds {@code true} to true semantic predicates as
     * implicitly {@code true} and "see through them", otherwise {@code false}
     * to treat semantic predicates as opaque and add {@link //HIT_PRED} to the
     * result if one is encountered.
     * @param addEOF Add {@link Token//EOF} to the result if the end of the
     * outermost context is reached. This parameter has no effect if {@code ctx}
     * is {@code null}.
     */
    _LOOK(s, stopState , ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {
        const c = new ATNConfig({state:s, alt:0, context: ctx}, null);
        if (lookBusy.contains(c)) {
            return;
        }
        lookBusy.add(c);
        if (s === stopState) {
            if (ctx ===null) {
                look.addOne(Token.EPSILON);
                return;
            } else if (ctx.isEmpty() && addEOF) {
                look.addOne(Token.EOF);
                return;
            }
        }
        if (s instanceof RuleStopState ) {
            if (ctx ===null) {
                look.addOne(Token.EPSILON);
                return;
            } else if (ctx.isEmpty() && addEOF) {
                look.addOne(Token.EOF);
                return;
            }
            if (ctx !== PredictionContext.EMPTY) {
                // run thru all possible stack tops in ctx
                for(let i=0; i<ctx.length; i++) {
                    const returnState = this.atn.states[ctx.getReturnState(i)];
                    const removed = calledRuleStack.contains(returnState.ruleIndex);
                    try {
                        calledRuleStack.remove(returnState.ruleIndex);
                        this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                    } finally {
                        if (removed) {
                            calledRuleStack.add(returnState.ruleIndex);
                        }
                    }
                }
                return;
            }
        }
        for(let j=0; j<s.transitions.length; j++) {
            const t = s.transitions[j];
            if (t.constructor === RuleTransition) {
                if (calledRuleStack.contains(t.target.ruleIndex)) {
                    continue;
                }
                const newContext = SingletonPredictionContext.create(ctx, t.followState.stateNumber);
                try {
                    calledRuleStack.add(t.target.ruleIndex);
                    this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                } finally {
                    calledRuleStack.remove(t.target.ruleIndex);
                }
            } else if (t instanceof AbstractPredicateTransition ) {
                if (seeThruPreds) {
                    this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
                } else {
                    look.addOne(LL1Analyzer.HIT_PRED);
                }
            } else if( t.isEpsilon) {
                this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);
            } else if (t.constructor === WildcardTransition) {
                look.addRange( Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType );
            } else {
                let set = t.label;
                if (set !== null) {
                    if (t instanceof NotSetTransition) {
                        set = set.complement(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);
                    }
                    look.addSet(set);
                }
            }
        }
    }
}

/**
 * Special value added to the lookahead sets to indicate that we hit
 * a predicate during analysis if {@code seeThruPreds==false}.
 */
LL1Analyzer.HIT_PRED = Token.INVALID_TYPE;

module.exports = LL1Analyzer;



/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/Lexer.js":
/*!*************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/Lexer.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/src/antlr4/Token.js");
const Recognizer = __webpack_require__(/*! ./Recognizer */ "./node_modules/antlr4/src/antlr4/Recognizer.js");
const CommonTokenFactory = __webpack_require__(/*! ./CommonTokenFactory */ "./node_modules/antlr4/src/antlr4/CommonTokenFactory.js");
const {RecognitionException} = __webpack_require__(/*! ./error/Errors */ "./node_modules/antlr4/src/antlr4/error/Errors.js");
const {LexerNoViableAltException} = __webpack_require__(/*! ./error/Errors */ "./node_modules/antlr4/src/antlr4/error/Errors.js");

class TokenSource {}

/**
 * A lexer is recognizer that draws input symbols from a character stream.
 * lexer grammars result in a subclass of this object. A Lexer object
 * uses simplified match() and error recovery mechanisms in the interest of speed.
 */
class Lexer extends Recognizer {
	constructor(input) {
		super();
		this._input = input;
		this._factory = CommonTokenFactory.DEFAULT;
		this._tokenFactorySourcePair = [ this, input ];

		this._interp = null; // child classes must populate this

		/**
		 * The goal of all lexer rules/methods is to create a token object.
		 * this is an instance variable as multiple rules may collaborate to
		 * create a single token. nextToken will return this object after
		 * matching lexer rule(s). If you subclass to allow multiple token
		 * emissions, then set this to the last token to be matched or
		 * something nonnull so that the auto token emit mechanism will not
		 * emit another token.
		 */
		this._token = null;

		/**
		 * What character index in the stream did the current token start at?
		 * Needed, for example, to get the text for current token. Set at
		 * the start of nextToken.
		 */
		this._tokenStartCharIndex = -1;

		// The line on which the first character of the token resides///
		this._tokenStartLine = -1;

		// The character position of first character within the line///
		this._tokenStartColumn = -1;

		// Once we see EOF on char stream, next token will be EOF.
		// If you have DONE : EOF ; then you see DONE EOF.
		this._hitEOF = false;

		// The channel number for the current token///
		this._channel = Token.DEFAULT_CHANNEL;

		// The token type for the current token///
		this._type = Token.INVALID_TYPE;

		this._modeStack = [];
		this._mode = Lexer.DEFAULT_MODE;

		/**
		 * You can set the text for the current token to override what is in
		 * the input char buffer. Use setText() or can set this instance var.
		 */
		this._text = null;
	}

	reset() {
		// wack Lexer state variables
		if (this._input !== null) {
			this._input.seek(0); // rewind the input
		}
		this._token = null;
		this._type = Token.INVALID_TYPE;
		this._channel = Token.DEFAULT_CHANNEL;
		this._tokenStartCharIndex = -1;
		this._tokenStartColumn = -1;
		this._tokenStartLine = -1;
		this._text = null;

		this._hitEOF = false;
		this._mode = Lexer.DEFAULT_MODE;
		this._modeStack = [];

		this._interp.reset();
	}

// Return a token from this source; i.e., match a token on the char stream.
	nextToken() {
		if (this._input === null) {
			throw "nextToken requires a non-null input stream.";
		}

		/**
		 * Mark start location in char stream so unbuffered streams are
		 * guaranteed at least have text of current token
		 */
		const tokenStartMarker = this._input.mark();
		try {
			while (true) {
				if (this._hitEOF) {
					this.emitEOF();
					return this._token;
				}
				this._token = null;
				this._channel = Token.DEFAULT_CHANNEL;
				this._tokenStartCharIndex = this._input.index;
				this._tokenStartColumn = this._interp.column;
				this._tokenStartLine = this._interp.line;
				this._text = null;
				let continueOuter = false;
				while (true) {
					this._type = Token.INVALID_TYPE;
					let ttype = Lexer.SKIP;
					try {
						ttype = this._interp.match(this._input, this._mode);
					} catch (e) {
						if(e instanceof RecognitionException) {
							this.notifyListeners(e); // report error
							this.recover(e);
						} else {
							console.log(e.stack);
							throw e;
						}
					}
					if (this._input.LA(1) === Token.EOF) {
						this._hitEOF = true;
					}
					if (this._type === Token.INVALID_TYPE) {
						this._type = ttype;
					}
					if (this._type === Lexer.SKIP) {
						continueOuter = true;
						break;
					}
					if (this._type !== Lexer.MORE) {
						break;
					}
				}
				if (continueOuter) {
					continue;
				}
				if (this._token === null) {
					this.emit();
				}
				return this._token;
			}
		} finally {
			// make sure we release marker after match or
			// unbuffered char stream will keep buffering
			this._input.release(tokenStartMarker);
		}
	}

	/**
	 * Instruct the lexer to skip creating a token for current lexer rule
	 * and look for another token. nextToken() knows to keep looking when
	 * a lexer rule finishes with token set to SKIP_TOKEN. Recall that
	 * if token==null at end of any token rule, it creates one for you
	 * and emits it.
	 */
	skip() {
		this._type = Lexer.SKIP;
	}

	more() {
		this._type = Lexer.MORE;
	}

	mode(m) {
		this._mode = m;
	}

	pushMode(m) {
		if (this._interp.debug) {
			console.log("pushMode " + m);
		}
		this._modeStack.push(this._mode);
		this.mode(m);
	}

	popMode() {
		if (this._modeStack.length === 0) {
			throw "Empty Stack";
		}
		if (this._interp.debug) {
			console.log("popMode back to " + this._modeStack.slice(0, -1));
		}
		this.mode(this._modeStack.pop());
		return this._mode;
	}

	/**
	 * By default does not support multiple emits per nextToken invocation
	 * for efficiency reasons. Subclass and override this method, nextToken,
	 * and getToken (to push tokens into a list and pull from that list
	 * rather than a single variable as this implementation does).
	 */
	emitToken(token) {
		this._token = token;
	}

	/**
	 * The standard method called to automatically emit a token at the
	 * outermost lexical rule. The token object should point into the
	 * char buffer start..stop. If there is a text override in 'text',
	 * use that to set the token's text. Override this method to emit
	 * custom Token objects or provide a new factory.
	 */
	emit() {
		const t = this._factory.create(this._tokenFactorySourcePair, this._type,
				this._text, this._channel, this._tokenStartCharIndex, this
						.getCharIndex() - 1, this._tokenStartLine,
				this._tokenStartColumn);
		this.emitToken(t);
		return t;
	}

	emitEOF() {
		const cpos = this.column;
		const lpos = this.line;
		const eof = this._factory.create(this._tokenFactorySourcePair, Token.EOF,
				null, Token.DEFAULT_CHANNEL, this._input.index,
				this._input.index - 1, lpos, cpos);
		this.emitToken(eof);
		return eof;
	}

// What is the index of the current character of lookahead?///
	getCharIndex() {
		return this._input.index;
	}

	/**
	 * Return a list of all Token objects in input char stream.
	 * Forces load of all tokens. Does not include EOF token.
	 */
	getAllTokens() {
		const tokens = [];
		let t = this.nextToken();
		while (t.type !== Token.EOF) {
			tokens.push(t);
			t = this.nextToken();
		}
		return tokens;
	}

	notifyListeners(e) {
		const start = this._tokenStartCharIndex;
		const stop = this._input.index;
		const text = this._input.getText(start, stop);
		const msg = "token recognition error at: '" + this.getErrorDisplay(text) + "'";
		const listener = this.getErrorListenerDispatch();
		listener.syntaxError(this, null, this._tokenStartLine,
				this._tokenStartColumn, msg, e);
	}

	getErrorDisplay(s) {
		const d = [];
		for (let i = 0; i < s.length; i++) {
			d.push(s[i]);
		}
		return d.join('');
	}

	getErrorDisplayForChar(c) {
		if (c.charCodeAt(0) === Token.EOF) {
			return "<EOF>";
		} else if (c === '\n') {
			return "\\n";
		} else if (c === '\t') {
			return "\\t";
		} else if (c === '\r') {
			return "\\r";
		} else {
			return c;
		}
	}

	getCharErrorDisplay(c) {
		return "'" + this.getErrorDisplayForChar(c) + "'";
	}

	/**
	 * Lexers can normally match any char in it's vocabulary after matching
	 * a token, so do the easy thing and just kill a character and hope
	 * it all works out. You can instead use the rule invocation stack
	 * to do sophisticated error recovery if you are in a fragment rule.
	 */
	recover(re) {
		if (this._input.LA(1) !== Token.EOF) {
			if (re instanceof LexerNoViableAltException) {
				// skip a char and try again
				this._interp.consume(this._input);
			} else {
				// TODO: Do we lose character or line position information?
				this._input.consume();
			}
		}
	}

	get inputStream(){
		return this._input;
	}

	set inputStream(input) {
		this._input = null;
		this._tokenFactorySourcePair = [ this, this._input ];
		this.reset();
		this._input = input;
		this._tokenFactorySourcePair = [ this, this._input ];
	}

	get sourceName(){
		return this._input.sourceName;
	}

	get type(){
		return this.type;
	}

	set type(type) {
		this._type = type;
	}

	get line(){
		return this._interp.line;
	}

	set line(line) {
		this._interp.line = line;
	}

	get column(){
		return this._interp.column;
	}

	set column(column) {
		this._interp.column = column;
	}

	get text(){
		if (this._text !== null) {
			return this._text;
		} else {
			return this._interp.getText(this._input);
		}
	}

	set text(text) {
		this._text = text;
	}
}




Lexer.DEFAULT_MODE = 0;
Lexer.MORE = -2;
Lexer.SKIP = -3;

Lexer.DEFAULT_TOKEN_CHANNEL = Token.DEFAULT_CHANNEL;
Lexer.HIDDEN = Token.HIDDEN_CHANNEL;
Lexer.MIN_CHAR_VALUE = 0x0000;
Lexer.MAX_CHAR_VALUE = 0x10FFFF;

// Set the char stream and reset the lexer


module.exports = Lexer;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/Parser.js":
/*!**************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/Parser.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/src/antlr4/Token.js");
const {ParseTreeListener, TerminalNode, ErrorNode} = __webpack_require__(/*! ./tree/Tree */ "./node_modules/antlr4/src/antlr4/tree/Tree.js");
const Recognizer = __webpack_require__(/*! ./Recognizer */ "./node_modules/antlr4/src/antlr4/Recognizer.js");
const {DefaultErrorStrategy} = __webpack_require__(/*! ./error/ErrorStrategy */ "./node_modules/antlr4/src/antlr4/error/ErrorStrategy.js");
const ATNDeserializer = __webpack_require__(/*! ./atn/ATNDeserializer */ "./node_modules/antlr4/src/antlr4/atn/ATNDeserializer.js");
const ATNDeserializationOptions = __webpack_require__(/*! ./atn/ATNDeserializationOptions */ "./node_modules/antlr4/src/antlr4/atn/ATNDeserializationOptions.js");
const Lexer = __webpack_require__(/*! ./Lexer */ "./node_modules/antlr4/src/antlr4/Lexer.js");

class TraceListener extends ParseTreeListener {
	constructor(parser) {
		super();
		this.parser = parser;
	}

	enterEveryRule(ctx) {
		console.log("enter   " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
	}

	visitTerminal(node) {
		console.log("consume " + node.symbol + " rule " + this.parser.ruleNames[this.parser._ctx.ruleIndex]);
	}

	exitEveryRule(ctx) {
		console.log("exit    " + this.parser.ruleNames[ctx.ruleIndex] + ", LT(1)=" + this.parser._input.LT(1).text);
	}
}

class Parser extends Recognizer {
	/**
	 * this is all the parsing support code essentially; most of it is error
	 * recovery stuff.
	 */
	constructor(input) {
		super();
		// The input stream.
		this._input = null;
		/**
		 * The error handling strategy for the parser. The default value is a new
		 * instance of {@link DefaultErrorStrategy}.
		 */
		this._errHandler = new DefaultErrorStrategy();
		this._precedenceStack = [];
		this._precedenceStack.push(0);
		/**
		 * The {@link ParserRuleContext} object for the currently executing rule.
		 * this is always non-null during the parsing process.
		 */
		this._ctx = null;
		/**
		 * Specifies whether or not the parser should construct a parse tree during
		 * the parsing process. The default value is {@code true}.
		 */
		this.buildParseTrees = true;
		/**
		 * When {@link //setTrace}{@code (true)} is called, a reference to the
		 * {@link TraceListener} is stored here so it can be easily removed in a
		 * later call to {@link //setTrace}{@code (false)}. The listener itself is
		 * implemented as a parser listener so this field is not directly used by
		 * other parser methods.
		 */
		this._tracer = null;
		/**
		 * The list of {@link ParseTreeListener} listeners registered to receive
		 * events during the parse.
		 */
		this._parseListeners = null;
		/**
		 * The number of syntax errors reported during parsing. this value is
		 * incremented each time {@link //notifyErrorListeners} is called.
		 */
		this._syntaxErrors = 0;
		this.setInputStream(input);
	}

	// reset the parser's state
	reset() {
		if (this._input !== null) {
			this._input.seek(0);
		}
		this._errHandler.reset(this);
		this._ctx = null;
		this._syntaxErrors = 0;
		this.setTrace(false);
		this._precedenceStack = [];
		this._precedenceStack.push(0);
		if (this._interp !== null) {
			this._interp.reset();
		}
	}

	/**
	 * Match current input symbol against {@code ttype}. If the symbol type
	 * matches, {@link ANTLRErrorStrategy//reportMatch} and {@link //consume} are
	 * called to complete the match process.
	 *
	 * <p>If the symbol type does not match,
	 * {@link ANTLRErrorStrategy//recoverInline} is called on the current error
	 * strategy to attempt recovery. If {@link //getBuildParseTree} is
	 * {@code true} and the token index of the symbol returned by
	 * {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
	 * the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
	 *
	 * @param ttype the token type to match
	 * @return the matched symbol
	 * @throws RecognitionException if the current input symbol did not match
	 * {@code ttype} and the error strategy could not recover from the
	 * mismatched symbol
	 */
	match(ttype) {
		let t = this.getCurrentToken();
		if (t.type === ttype) {
			this._errHandler.reportMatch(this);
			this.consume();
		} else {
			t = this._errHandler.recoverInline(this);
			if (this.buildParseTrees && t.tokenIndex === -1) {
				// we must have conjured up a new token during single token
				// insertion
				// if it's not the current symbol
				this._ctx.addErrorNode(t);
			}
		}
		return t;
	}

	/**
	 * Match current input symbol as a wildcard. If the symbol type matches
	 * (i.e. has a value greater than 0), {@link ANTLRErrorStrategy//reportMatch}
	 * and {@link //consume} are called to complete the match process.
	 *
	 * <p>If the symbol type does not match,
	 * {@link ANTLRErrorStrategy//recoverInline} is called on the current error
	 * strategy to attempt recovery. If {@link //getBuildParseTree} is
	 * {@code true} and the token index of the symbol returned by
	 * {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to
	 * the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>
	 *
	 * @return the matched symbol
	 * @throws RecognitionException if the current input symbol did not match
	 * a wildcard and the error strategy could not recover from the mismatched
	 * symbol
	 */
	matchWildcard() {
		let t = this.getCurrentToken();
		if (t.type > 0) {
			this._errHandler.reportMatch(this);
			this.consume();
		} else {
			t = this._errHandler.recoverInline(this);
			if (this._buildParseTrees && t.tokenIndex === -1) {
				// we must have conjured up a new token during single token
				// insertion
				// if it's not the current symbol
				this._ctx.addErrorNode(t);
			}
		}
		return t;
	}

	getParseListeners() {
		return this._parseListeners || [];
	}

	/**
	 * Registers {@code listener} to receive events during the parsing process.
	 *
	 * <p>To support output-preserving grammar transformations (including but not
	 * limited to left-recursion removal, automated left-factoring, and
	 * optimized code generation), calls to listener methods during the parse
	 * may differ substantially from calls made by
	 * {@link ParseTreeWalker//DEFAULT} used after the parse is complete. In
	 * particular, rule entry and exit events may occur in a different order
	 * during the parse than after the parser. In addition, calls to certain
	 * rule entry methods may be omitted.</p>
	 *
	 * <p>With the following specific exceptions, calls to listener events are
	 * <em>deterministic</em>, i.e. for identical input the calls to listener
	 * methods will be the same.</p>
	 *
	 * <ul>
	 * <li>Alterations to the grammar used to generate code may change the
	 * behavior of the listener calls.</li>
	 * <li>Alterations to the command line options passed to ANTLR 4 when
	 * generating the parser may change the behavior of the listener calls.</li>
	 * <li>Changing the version of the ANTLR Tool used to generate the parser
	 * may change the behavior of the listener calls.</li>
	 * </ul>
	 *
	 * @param listener the listener to add
	 *
	 * @throws NullPointerException if {@code} listener is {@code null}
	 */
	addParseListener(listener) {
		if (listener === null) {
			throw "listener";
		}
		if (this._parseListeners === null) {
			this._parseListeners = [];
		}
		this._parseListeners.push(listener);
	}

	/**
	 * Remove {@code listener} from the list of parse listeners.
	 *
	 * <p>If {@code listener} is {@code null} or has not been added as a parse
	 * listener, this method does nothing.</p>
	 * @param listener the listener to remove
	 */
	removeParseListener(listener) {
		if (this._parseListeners !== null) {
			const idx = this._parseListeners.indexOf(listener);
			if (idx >= 0) {
				this._parseListeners.splice(idx, 1);
			}
			if (this._parseListeners.length === 0) {
				this._parseListeners = null;
			}
		}
	}

// Remove all parse listeners.
	removeParseListeners() {
		this._parseListeners = null;
	}

// Notify any parse listeners of an enter rule event.
	triggerEnterRuleEvent() {
		if (this._parseListeners !== null) {
			const ctx = this._ctx;
			this._parseListeners.map(function(listener) {
				listener.enterEveryRule(ctx);
				ctx.enterRule(listener);
			});
		}
	}

	/**
	 * Notify any parse listeners of an exit rule event.
	 * @see //addParseListener
	 */
	triggerExitRuleEvent() {
		if (this._parseListeners !== null) {
			// reverse order walk of listeners
			const ctx = this._ctx;
			this._parseListeners.slice(0).reverse().map(function(listener) {
				ctx.exitRule(listener);
				listener.exitEveryRule(ctx);
			});
		}
	}

	getTokenFactory() {
		return this._input.tokenSource._factory;
	}

	// Tell our token source and error strategy about a new way to create tokens.
	setTokenFactory(factory) {
		this._input.tokenSource._factory = factory;
	}

	/**
	 * The ATN with bypass alternatives is expensive to create so we create it
	 * lazily.
	 *
	 * @throws UnsupportedOperationException if the current parser does not
	 * implement the {@link //getSerializedATN()} method.
	 */
	getATNWithBypassAlts() {
		const serializedAtn = this.getSerializedATN();
		if (serializedAtn === null) {
			throw "The current parser does not support an ATN with bypass alternatives.";
		}
		let result = this.bypassAltsAtnCache[serializedAtn];
		if (result === null) {
			const deserializationOptions = new ATNDeserializationOptions();
			deserializationOptions.generateRuleBypassTransitions = true;
			result = new ATNDeserializer(deserializationOptions)
					.deserialize(serializedAtn);
			this.bypassAltsAtnCache[serializedAtn] = result;
		}
		return result;
	}

	/**
	 * The preferred method of getting a tree pattern. For example, here's a
	 * sample use:
	 *
	 * <pre>
	 * ParseTree t = parser.expr();
	 * ParseTreePattern p = parser.compileParseTreePattern("&lt;ID&gt;+0",
	 * MyParser.RULE_expr);
	 * ParseTreeMatch m = p.match(t);
	 * String id = m.get("ID");
	 * </pre>
	 */
	compileParseTreePattern(pattern, patternRuleIndex, lexer) {
		lexer = lexer || null;
		if (lexer === null) {
			if (this.getTokenStream() !== null) {
				const tokenSource = this.getTokenStream().tokenSource;
				if (tokenSource instanceof Lexer) {
					lexer = tokenSource;
				}
			}
		}
		if (lexer === null) {
			throw "Parser can't discover a lexer to use";
		}
		const m = new ParseTreePatternMatcher(lexer, this);
		return m.compile(pattern, patternRuleIndex);
	}

	getInputStream() {
		return this.getTokenStream();
	}

	setInputStream(input) {
		this.setTokenStream(input);
	}

	getTokenStream() {
		return this._input;
	}

	// Set the token stream and reset the parser.
	setTokenStream(input) {
		this._input = null;
		this.reset();
		this._input = input;
	}

	/**
	 * Match needs to return the current input symbol, which gets put
	 * into the label for the associated token ref; e.g., x=ID.
	 */
	getCurrentToken() {
		return this._input.LT(1);
	}

	notifyErrorListeners(msg, offendingToken, err) {
		offendingToken = offendingToken || null;
		err = err || null;
		if (offendingToken === null) {
			offendingToken = this.getCurrentToken();
		}
		this._syntaxErrors += 1;
		const line = offendingToken.line;
		const column = offendingToken.column;
		const listener = this.getErrorListenerDispatch();
		listener.syntaxError(this, offendingToken, line, column, msg, err);
	}

	/**
	 * Consume and return the {@linkplain //getCurrentToken current symbol}.
	 *
	 * <p>E.g., given the following input with {@code A} being the current
	 * lookahead symbol, this function moves the cursor to {@code B} and returns
	 * {@code A}.</p>
	 *
	 * <pre>
	 * A B
	 * ^
	 * </pre>
	 *
	 * If the parser is not in error recovery mode, the consumed symbol is added
	 * to the parse tree using {@link ParserRuleContext//addChild(Token)}, and
	 * {@link ParseTreeListener//visitTerminal} is called on any parse listeners.
	 * If the parser <em>is</em> in error recovery mode, the consumed symbol is
	 * added to the parse tree using
	 * {@link ParserRuleContext//addErrorNode(Token)}, and
	 * {@link ParseTreeListener//visitErrorNode} is called on any parse
	 * listeners.
	 */
	consume() {
		const o = this.getCurrentToken();
		if (o.type !== Token.EOF) {
			this.getInputStream().consume();
		}
		const hasListener = this._parseListeners !== null && this._parseListeners.length > 0;
		if (this.buildParseTrees || hasListener) {
			let node;
			if (this._errHandler.inErrorRecoveryMode(this)) {
				node = this._ctx.addErrorNode(o);
			} else {
				node = this._ctx.addTokenNode(o);
			}
			node.invokingState = this.state;
			if (hasListener) {
				this._parseListeners.map(function(listener) {
					if (node instanceof ErrorNode || (node.isErrorNode !== undefined && node.isErrorNode())) {
						listener.visitErrorNode(node);
					} else if (node instanceof TerminalNode) {
						listener.visitTerminal(node);
					}
				});
			}
		}
		return o;
	}

	addContextToParseTree() {
		// add current context to parent if we have a parent
		if (this._ctx.parentCtx !== null) {
			this._ctx.parentCtx.addChild(this._ctx);
		}
	}

	/**
	 * Always called by generated parsers upon entry to a rule. Access field
	 * {@link //_ctx} get the current context.
	 */
	enterRule(localctx, state, ruleIndex) {
		this.state = state;
		this._ctx = localctx;
		this._ctx.start = this._input.LT(1);
		if (this.buildParseTrees) {
			this.addContextToParseTree();
		}
		if (this._parseListeners !== null) {
			this.triggerEnterRuleEvent();
		}
	}

	exitRule() {
		this._ctx.stop = this._input.LT(-1);
		// trigger event on _ctx, before it reverts to parent
		if (this._parseListeners !== null) {
			this.triggerExitRuleEvent();
		}
		this.state = this._ctx.invokingState;
		this._ctx = this._ctx.parentCtx;
	}

	enterOuterAlt(localctx, altNum) {
		localctx.setAltNumber(altNum);
		// if we have new localctx, make sure we replace existing ctx
		// that is previous child of parse tree
		if (this.buildParseTrees && this._ctx !== localctx) {
			if (this._ctx.parentCtx !== null) {
				this._ctx.parentCtx.removeLastChild();
				this._ctx.parentCtx.addChild(localctx);
			}
		}
		this._ctx = localctx;
	}

	/**
	 * Get the precedence level for the top-most precedence rule.
	 *
	 * @return The precedence level for the top-most precedence rule, or -1 if
	 * the parser context is not nested within a precedence rule.
	 */
	getPrecedence() {
		if (this._precedenceStack.length === 0) {
			return -1;
		} else {
			return this._precedenceStack[this._precedenceStack.length-1];
		}
	}

	enterRecursionRule(localctx, state, ruleIndex, precedence) {
	   this.state = state;
	   this._precedenceStack.push(precedence);
	   this._ctx = localctx;
	   this._ctx.start = this._input.LT(1);
	   if (this._parseListeners !== null) {
		   this.triggerEnterRuleEvent(); // simulates rule entry for
		   									// left-recursive rules
	   }
   }

	// Like {@link //enterRule} but for recursive rules.
	pushNewRecursionContext(localctx, state, ruleIndex) {
		const previous = this._ctx;
		previous.parentCtx = localctx;
		previous.invokingState = state;
		previous.stop = this._input.LT(-1);

		this._ctx = localctx;
		this._ctx.start = previous.start;
		if (this.buildParseTrees) {
			this._ctx.addChild(previous);
		}
		if (this._parseListeners !== null) {
			this.triggerEnterRuleEvent(); // simulates rule entry for
											// left-recursive rules
		}
	}

	unrollRecursionContexts(parentCtx) {
		this._precedenceStack.pop();
		this._ctx.stop = this._input.LT(-1);
		const retCtx = this._ctx; // save current ctx (return value)
		// unroll so _ctx is as it was before call to recursive method
		if (this._parseListeners !== null) {
			while (this._ctx !== parentCtx) {
				this.triggerExitRuleEvent();
				this._ctx = this._ctx.parentCtx;
			}
		} else {
			this._ctx = parentCtx;
		}
		// hook into tree
		retCtx.parentCtx = parentCtx;
		if (this.buildParseTrees && parentCtx !== null) {
			// add return ctx into invoking rule's tree
			parentCtx.addChild(retCtx);
		}
	}

	getInvokingContext(ruleIndex) {
		let ctx = this._ctx;
		while (ctx !== null) {
			if (ctx.ruleIndex === ruleIndex) {
				return ctx;
			}
			ctx = ctx.parentCtx;
		}
		return null;
	}

	precpred(localctx, precedence) {
		return precedence >= this._precedenceStack[this._precedenceStack.length-1];
	}

	inContext(context) {
		// TODO: useful in parser?
		return false;
	}

	/**
	 * Checks whether or not {@code symbol} can follow the current state in the
	 * ATN. The behavior of this method is equivalent to the following, but is
	 * implemented such that the complete context-sensitive follow set does not
	 * need to be explicitly constructed.
	 *
	 * <pre>
	 * return getExpectedTokens().contains(symbol);
	 * </pre>
	 *
	 * @param symbol the symbol type to check
	 * @return {@code true} if {@code symbol} can follow the current state in
	 * the ATN, otherwise {@code false}.
	 */
	isExpectedToken(symbol) {
		const atn = this._interp.atn;
		let ctx = this._ctx;
		const s = atn.states[this.state];
		let following = atn.nextTokens(s);
		if (following.contains(symbol)) {
			return true;
		}
		if (!following.contains(Token.EPSILON)) {
			return false;
		}
		while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {
			const invokingState = atn.states[ctx.invokingState];
			const rt = invokingState.transitions[0];
			following = atn.nextTokens(rt.followState);
			if (following.contains(symbol)) {
				return true;
			}
			ctx = ctx.parentCtx;
		}
		if (following.contains(Token.EPSILON) && symbol === Token.EOF) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * Computes the set of input symbols which could follow the current parser
	 * state and context, as given by {@link //getState} and {@link //getContext},
	 * respectively.
	 *
	 * @see ATN//getExpectedTokens(int, RuleContext)
	 */
	getExpectedTokens() {
		return this._interp.atn.getExpectedTokens(this.state, this._ctx);
	}

	getExpectedTokensWithinCurrentRule() {
		const atn = this._interp.atn;
		const s = atn.states[this.state];
		return atn.nextTokens(s);
	}

	// Get a rule's index (i.e., {@code RULE_ruleName} field) or -1 if not found.
	getRuleIndex(ruleName) {
		const ruleIndex = this.getRuleIndexMap()[ruleName];
		if (ruleIndex !== null) {
			return ruleIndex;
		} else {
			return -1;
		}
	}

	/**
	 * Return List&lt;String&gt; of the rule names in your parser instance
	 * leading up to a call to the current rule. You could override if
	 * you want more details such as the file/line info of where
	 * in the ATN a rule is invoked.
	 *
	 * this is very useful for error messages.
	 */
	getRuleInvocationStack(p) {
		p = p || null;
		if (p === null) {
			p = this._ctx;
		}
		const stack = [];
		while (p !== null) {
			// compute what follows who invoked us
			const ruleIndex = p.ruleIndex;
			if (ruleIndex < 0) {
				stack.push("n/a");
			} else {
				stack.push(this.ruleNames[ruleIndex]);
			}
			p = p.parentCtx;
		}
		return stack;
	}

	// For debugging and other purposes.
	getDFAStrings() {
		return this._interp.decisionToDFA.toString();
	}

	// For debugging and other purposes.
	dumpDFA() {
		let seenOne = false;
		for (let i = 0; i < this._interp.decisionToDFA.length; i++) {
			const dfa = this._interp.decisionToDFA[i];
			if (dfa.states.length > 0) {
				if (seenOne) {
					console.log();
				}
				this.printer.println("Decision " + dfa.decision + ":");
				this.printer.print(dfa.toString(this.literalNames, this.symbolicNames));
				seenOne = true;
			}
		}
	}

	/*
		"			printer = function() {\r\n" +
		"				this.println = function(s) { document.getElementById('output') += s + '\\n'; }\r\n" +
		"				this.print = function(s) { document.getElementById('output') += s; }\r\n" +
		"			};\r\n" +
		*/
	getSourceName() {
		return this._input.sourceName;
	}

	/**
	 * During a parse is sometimes useful to listen in on the rule entry and exit
	 * events as well as token matches. this is for quick and dirty debugging.
	 */
	setTrace(trace) {
		if (!trace) {
			this.removeParseListener(this._tracer);
			this._tracer = null;
		} else {
			if (this._tracer !== null) {
				this.removeParseListener(this._tracer);
			}
			this._tracer = new TraceListener(this);
			this.addParseListener(this._tracer);
		}
	}
}

/**
 * this field maps from the serialized ATN string to the deserialized {@link
 * ATN} with
 * bypass alternatives.
 *
 * @see ATNDeserializationOptions//isGenerateRuleBypassTransitions()
 */
Parser.bypassAltsAtnCache = {};

module.exports = Parser;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/ParserRuleContext.js":
/*!*************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/ParserRuleContext.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const RuleContext = __webpack_require__(/*! ./RuleContext */ "./node_modules/antlr4/src/antlr4/RuleContext.js");
const Tree = __webpack_require__(/*! ./tree/Tree */ "./node_modules/antlr4/src/antlr4/tree/Tree.js");
const INVALID_INTERVAL = Tree.INVALID_INTERVAL;
const TerminalNode = Tree.TerminalNode;
const TerminalNodeImpl = Tree.TerminalNodeImpl;
const ErrorNodeImpl = Tree.ErrorNodeImpl;
const Interval = __webpack_require__(/*! ./IntervalSet */ "./node_modules/antlr4/src/antlr4/IntervalSet.js").Interval;

/**
 * A rule invocation record for parsing.
 *
 *  Contains all of the information about the current rule not stored in the
 *  RuleContext. It handles parse tree children list, Any ATN state
 *  tracing, and the default values available for rule indications:
 *  start, stop, rule index, current alt number, current
 *  ATN state.
 *
 *  Subclasses made for each rule and grammar track the parameters,
 *  return values, locals, and labels specific to that rule. These
 *  are the objects that are returned from rules.
 *
 *  Note text is not an actual field of a rule return value; it is computed
 *  from start and stop using the input stream's toString() method.  I
 *  could add a ctor to this so that we can pass in and store the input
 *  stream, but I'm not sure we want to do that.  It would seem to be undefined
 *  to get the .text property anyway if the rule matches tokens from multiple
 *  input streams.
 *
 *  I do not use getters for fields of objects that are used simply to
 *  group values such as this aggregate.  The getters/setters are there to
 *  satisfy the superclass interface.
 */
class ParserRuleContext extends RuleContext {
	constructor(parent, invokingStateNumber) {
		parent = parent || null;
		invokingStateNumber = invokingStateNumber || null;
		super(parent, invokingStateNumber);
		this.ruleIndex = -1;
		/**
		 * If we are debugging or building a parse tree for a visitor,
		 * we need to track all of the tokens and rule invocations associated
		 * with this rule's context. This is empty for parsing w/o tree constr.
		 * operation because we don't the need to track the details about
		 * how we parse this rule.
		 */
		this.children = null;
		this.start = null;
		this.stop = null;
		/**
		 * The exception that forced this rule to return. If the rule successfully
		 * completed, this is {@code null}.
		 */
		this.exception = null;
	}

	// COPY a ctx (I'm deliberately not using copy constructor)
	copyFrom(ctx) {
		// from RuleContext
		this.parentCtx = ctx.parentCtx;
		this.invokingState = ctx.invokingState;
		this.children = null;
		this.start = ctx.start;
		this.stop = ctx.stop;
		// copy any error nodes to alt label node
		if(ctx.children) {
			this.children = [];
			// reset parent pointer for any error nodes
			ctx.children.map(function(child) {
				if (child instanceof ErrorNodeImpl) {
					this.children.push(child);
					child.parentCtx = this;
				}
			}, this);
		}
	}

	// Double dispatch methods for listeners
	enterRule(listener) {
	}

	exitRule(listener) {
	}

	// Does not set parent link; other add methods do that
	addChild(child) {
		if (this.children === null) {
			this.children = [];
		}
		this.children.push(child);
		return child;
	}

	/** Used by enterOuterAlt to toss out a RuleContext previously added as
	 * we entered a rule. If we have // label, we will need to remove
	 * generic ruleContext object.
	 */
	removeLastChild() {
		if (this.children !== null) {
			this.children.pop();
		}
	}

	addTokenNode(token) {
		const node = new TerminalNodeImpl(token);
		this.addChild(node);
		node.parentCtx = this;
		return node;
	}

	addErrorNode(badToken) {
		const node = new ErrorNodeImpl(badToken);
		this.addChild(node);
		node.parentCtx = this;
		return node;
	}

	getChild(i, type) {
		type = type || null;
		if (this.children === null || i < 0 || i >= this.children.length) {
			return null;
		}
		if (type === null) {
			return this.children[i];
		} else {
			for(let j=0; j<this.children.length; j++) {
				const child = this.children[j];
				if(child instanceof type) {
					if(i===0) {
						return child;
					} else {
						i -= 1;
					}
				}
			}
			return null;
		}
	}

	getToken(ttype, i) {
		if (this.children === null || i < 0 || i >= this.children.length) {
			return null;
		}
		for(let j=0; j<this.children.length; j++) {
			const child = this.children[j];
			if (child instanceof TerminalNode) {
				if (child.symbol.type === ttype) {
					if(i===0) {
						return child;
					} else {
						i -= 1;
					}
				}
			}
		}
		return null;
	}

	getTokens(ttype ) {
		if (this.children=== null) {
			return [];
		} else {
			const tokens = [];
			for(let j=0; j<this.children.length; j++) {
				const child = this.children[j];
				if (child instanceof TerminalNode) {
					if (child.symbol.type === ttype) {
						tokens.push(child);
					}
				}
			}
			return tokens;
		}
	}

	getTypedRuleContext(ctxType, i) {
		return this.getChild(i, ctxType);
	}

	getTypedRuleContexts(ctxType) {
		if (this.children=== null) {
			return [];
		} else {
			const contexts = [];
			for(let j=0; j<this.children.length; j++) {
				const child = this.children[j];
				if (child instanceof ctxType) {
					contexts.push(child);
				}
			}
			return contexts;
		}
	}

	getChildCount() {
		if (this.children=== null) {
			return 0;
		} else {
			return this.children.length;
		}
	}

	getSourceInterval() {
		if( this.start === null || this.stop === null) {
			return INVALID_INTERVAL;
		} else {
			return new Interval(this.start.tokenIndex, this.stop.tokenIndex);
		}
	}
}

RuleContext.EMPTY = new ParserRuleContext();

class InterpreterRuleContext extends ParserRuleContext {
	constructor(parent, invokingStateNumber, ruleIndex) {
		super(parent, invokingStateNumber);
		this.ruleIndex = ruleIndex;
	}
}

module.exports = ParserRuleContext;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/PredictionContext.js":
/*!*************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/PredictionContext.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const RuleContext = __webpack_require__(/*! ./RuleContext */ "./node_modules/antlr4/src/antlr4/RuleContext.js");
const {Hash, Map, equalArrays} = __webpack_require__(/*! ./Utils */ "./node_modules/antlr4/src/antlr4/Utils.js");

class PredictionContext {

	constructor(cachedHashCode) {
		this.cachedHashCode = cachedHashCode;
	}

	/**
	 * Stores the computed hash code of this {@link PredictionContext}. The hash
	 * code is computed in parts to match the following reference algorithm.
	 *
	 * <pre>
	 * private int referenceHashCode() {
	 * int hash = {@link MurmurHash//initialize MurmurHash.initialize}({@link
	 * //INITIAL_HASH});
	 *
	 * for (int i = 0; i &lt; {@link //size()}; i++) {
	 * hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link //getParent
	 * getParent}(i));
	 * }
	 *
	 * for (int i = 0; i &lt; {@link //size()}; i++) {
	 * hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link
	 * //getReturnState getReturnState}(i));
	 * }
	 *
	 * hash = {@link MurmurHash//finish MurmurHash.finish}(hash, 2// {@link
	 * //size()});
	 * return hash;
	 * }
	 * </pre>
	 * This means only the {@link //EMPTY} context is in set.
	 */
	isEmpty() {
		return this === PredictionContext.EMPTY;
	}

	hasEmptyPath() {
		return this.getReturnState(this.length - 1) === PredictionContext.EMPTY_RETURN_STATE;
	}

	hashCode() {
		return this.cachedHashCode;
	}

	updateHashCode(hash) {
		hash.update(this.cachedHashCode);
	}
}

/**
 * Represents {@code $} in local context prediction, which means wildcard.
 * {@code//+x =//}.
 */
PredictionContext.EMPTY = null;

/**
 * Represents {@code $} in an array in full context mode, when {@code $}
 * doesn't mean wildcard: {@code $ + x = [$,x]}. Here,
 * {@code $} = {@link //EMPTY_RETURN_STATE}.
 */
PredictionContext.EMPTY_RETURN_STATE = 0x7FFFFFFF;

PredictionContext.globalNodeCount = 1;
PredictionContext.id = PredictionContext.globalNodeCount;


/*
function calculateHashString(parent, returnState) {
	return "" + parent + returnState;
}
*/

/**
 * Used to cache {@link PredictionContext} objects. Its used for the shared
 * context cash associated with contexts in DFA states. This cache
 * can be used for both lexers and parsers.
 */
class PredictionContextCache {

	constructor() {
		this.cache = new Map();
	}

	/**
	 * Add a context to the cache and return it. If the context already exists,
	 * return that one instead and do not add a new context to the cache.
	 * Protect shared cache from unsafe thread access.
	 */
	add(ctx) {
		if (ctx === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY;
		}
		const existing = this.cache.get(ctx) || null;
		if (existing !== null) {
			return existing;
		}
		this.cache.put(ctx, ctx);
		return ctx;
	}

	get(ctx) {
		return this.cache.get(ctx) || null;
	}

	get length(){
		return this.cache.length;
	}
}


class SingletonPredictionContext extends PredictionContext {

	constructor(parent, returnState) {
		let hashCode = 0;
		const hash = new Hash();
		if(parent !== null) {
			hash.update(parent, returnState);
		} else {
			hash.update(1);
		}
		hashCode = hash.finish();
		super(hashCode);
		this.parentCtx = parent;
		this.returnState = returnState;
	}

	getParent(index) {
		return this.parentCtx;
	}

	getReturnState(index) {
		return this.returnState;
	}

	equals(other) {
		if (this === other) {
			return true;
		} else if (!(other instanceof SingletonPredictionContext)) {
			return false;
		} else if (this.hashCode() !== other.hashCode()) {
			return false; // can't be same if hash is different
		} else {
			if(this.returnState !== other.returnState)
				return false;
			else if(this.parentCtx==null)
				return other.parentCtx==null
			else
				return this.parentCtx.equals(other.parentCtx);
		}
	}

	toString() {
		const up = this.parentCtx === null ? "" : this.parentCtx.toString();
		if (up.length === 0) {
			if (this.returnState === PredictionContext.EMPTY_RETURN_STATE) {
				return "$";
			} else {
				return "" + this.returnState;
			}
		} else {
			return "" + this.returnState + " " + up;
		}
	}

	get length(){
		return 1;
	}

	static create(parent, returnState) {
		if (returnState === PredictionContext.EMPTY_RETURN_STATE && parent === null) {
			// someone can pass in the bits of an array ctx that mean $
			return PredictionContext.EMPTY;
		} else {
			return new SingletonPredictionContext(parent, returnState);
		}
	}
}

class EmptyPredictionContext extends SingletonPredictionContext {

	constructor() {
		super(null, PredictionContext.EMPTY_RETURN_STATE);
	}

	isEmpty() {
		return true;
	}

	getParent(index) {
		return null;
	}

	getReturnState(index) {
		return this.returnState;
	}

	equals(other) {
		return this === other;
	}

	toString() {
		return "$";
	}
}


PredictionContext.EMPTY = new EmptyPredictionContext();

class ArrayPredictionContext extends PredictionContext {

	constructor(parents, returnStates) {
		/**
		 * Parent can be null only if full ctx mode and we make an array
		 * from {@link //EMPTY} and non-empty. We merge {@link //EMPTY} by using
		 * null parent and
		 * returnState == {@link //EMPTY_RETURN_STATE}.
		 */
		const h = new Hash();
		h.update(parents, returnStates);
		const hashCode = h.finish();
		super(hashCode);
		this.parents = parents;
		this.returnStates = returnStates;
		return this;
	}

	isEmpty() {
		// since EMPTY_RETURN_STATE can only appear in the last position, we
		// don't need to verify that size==1
		return this.returnStates[0] === PredictionContext.EMPTY_RETURN_STATE;
	}

	getParent(index) {
		return this.parents[index];
	}

	getReturnState(index) {
		return this.returnStates[index];
	}

	equals(other) {
		if (this === other) {
			return true;
		} else if (!(other instanceof ArrayPredictionContext)) {
			return false;
		} else if (this.hashCode() !== other.hashCode()) {
			return false; // can't be same if hash is different
		} else {
			return equalArrays(this.returnStates, other.returnStates) &&
				equalArrays(this.parents, other.parents);
		}
	}

	toString() {
		if (this.isEmpty()) {
			return "[]";
		} else {
			let s = "[";
			for (let i = 0; i < this.returnStates.length; i++) {
				if (i > 0) {
					s = s + ", ";
				}
				if (this.returnStates[i] === PredictionContext.EMPTY_RETURN_STATE) {
					s = s + "$";
					continue;
				}
				s = s + this.returnStates[i];
				if (this.parents[i] !== null) {
					s = s + " " + this.parents[i];
				} else {
					s = s + "null";
				}
			}
			return s + "]";
		}
	}

	get length(){
		return this.returnStates.length;
	}
}


/**
 * Convert a {@link RuleContext} tree to a {@link PredictionContext} graph.
 * Return {@link //EMPTY} if {@code outerContext} is empty or null.
 */
function predictionContextFromRuleContext(atn, outerContext) {
	if (outerContext === undefined || outerContext === null) {
		outerContext = RuleContext.EMPTY;
	}
	// if we are in RuleContext of start rule, s, then PredictionContext
	// is EMPTY. Nobody called us. (if we are empty, return empty)
	if (outerContext.parentCtx === null || outerContext === RuleContext.EMPTY) {
		return PredictionContext.EMPTY;
	}
	// If we have a parent, convert it to a PredictionContext graph
	const parent = predictionContextFromRuleContext(atn, outerContext.parentCtx);
	const state = atn.states[outerContext.invokingState];
	const transition = state.transitions[0];
	return SingletonPredictionContext.create(parent, transition.followState.stateNumber);
}
/*
function calculateListsHashString(parents, returnStates) {
	const s = "";
	parents.map(function(p) {
		s = s + p;
	});
	returnStates.map(function(r) {
		s = s + r;
	});
	return s;
}
*/
function merge(a, b, rootIsWildcard, mergeCache) {
	// share same graph if both same
	if (a === b) {
		return a;
	}
	if (a instanceof SingletonPredictionContext && b instanceof SingletonPredictionContext) {
		return mergeSingletons(a, b, rootIsWildcard, mergeCache);
	}
	// At least one of a or b is array
	// If one is $ and rootIsWildcard, return $ as// wildcard
	if (rootIsWildcard) {
		if (a instanceof EmptyPredictionContext) {
			return a;
		}
		if (b instanceof EmptyPredictionContext) {
			return b;
		}
	}
	// convert singleton so both are arrays to normalize
	if (a instanceof SingletonPredictionContext) {
		a = new ArrayPredictionContext([a.getParent()], [a.returnState]);
	}
	if (b instanceof SingletonPredictionContext) {
		b = new ArrayPredictionContext([b.getParent()], [b.returnState]);
	}
	return mergeArrays(a, b, rootIsWildcard, mergeCache);
}

/**
 * Merge two {@link SingletonPredictionContext} instances.
 *
 * <p>Stack tops equal, parents merge is same; return left graph.<br>
 * <embed src="images/SingletonMerge_SameRootSamePar.svg"
 * type="image/svg+xml"/></p>
 *
 * <p>Same stack top, parents differ; merge parents giving array node, then
 * remainders of those graphs. A new root node is created to point to the
 * merged parents.<br>
 * <embed src="images/SingletonMerge_SameRootDiffPar.svg"
 * type="image/svg+xml"/></p>
 *
 * <p>Different stack tops pointing to same parent. Make array node for the
 * root where both element in the root point to the same (original)
 * parent.<br>
 * <embed src="images/SingletonMerge_DiffRootSamePar.svg"
 * type="image/svg+xml"/></p>
 *
 * <p>Different stack tops pointing to different parents. Make array node for
 * the root where each element points to the corresponding original
 * parent.<br>
 * <embed src="images/SingletonMerge_DiffRootDiffPar.svg"
 * type="image/svg+xml"/></p>
 *
 * @param a the first {@link SingletonPredictionContext}
 * @param b the second {@link SingletonPredictionContext}
 * @param rootIsWildcard {@code true} if this is a local-context merge,
 * otherwise false to indicate a full-context merge
 * @param mergeCache
 */
function mergeSingletons(a, b, rootIsWildcard, mergeCache) {
	if (mergeCache !== null) {
		let previous = mergeCache.get(a, b);
		if (previous !== null) {
			return previous;
		}
		previous = mergeCache.get(b, a);
		if (previous !== null) {
			return previous;
		}
	}

	const rootMerge = mergeRoot(a, b, rootIsWildcard);
	if (rootMerge !== null) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, rootMerge);
		}
		return rootMerge;
	}
	if (a.returnState === b.returnState) {
		const parent = merge(a.parentCtx, b.parentCtx, rootIsWildcard, mergeCache);
		// if parent is same as existing a or b parent or reduced to a parent,
		// return it
		if (parent === a.parentCtx) {
			return a; // ax + bx = ax, if a=b
		}
		if (parent === b.parentCtx) {
			return b; // ax + bx = bx, if a=b
		}
		// else: ax + ay = a'[x,y]
		// merge parents x and y, giving array node with x,y then remainders
		// of those graphs. dup a, a' points at merged array
		// new joined parent so create new singleton pointing to it, a'
		const spc = SingletonPredictionContext.create(parent, a.returnState);
		if (mergeCache !== null) {
			mergeCache.set(a, b, spc);
		}
		return spc;
	} else { // a != b payloads differ
		// see if we can collapse parents due to $+x parents if local ctx
		let singleParent = null;
		if (a === b || (a.parentCtx !== null && a.parentCtx === b.parentCtx)) { // ax +
																				// bx =
																				// [a,b]x
			singleParent = a.parentCtx;
		}
		if (singleParent !== null) { // parents are same
			// sort payloads and use same parent
			const payloads = [ a.returnState, b.returnState ];
			if (a.returnState > b.returnState) {
				payloads[0] = b.returnState;
				payloads[1] = a.returnState;
			}
			const parents = [ singleParent, singleParent ];
			const apc = new ArrayPredictionContext(parents, payloads);
			if (mergeCache !== null) {
				mergeCache.set(a, b, apc);
			}
			return apc;
		}
		// parents differ and can't merge them. Just pack together
		// into array; can't merge.
		// ax + by = [ax,by]
		const payloads = [ a.returnState, b.returnState ];
		let parents = [ a.parentCtx, b.parentCtx ];
		if (a.returnState > b.returnState) { // sort by payload
			payloads[0] = b.returnState;
			payloads[1] = a.returnState;
			parents = [ b.parentCtx, a.parentCtx ];
		}
		const a_ = new ArrayPredictionContext(parents, payloads);
		if (mergeCache !== null) {
			mergeCache.set(a, b, a_);
		}
		return a_;
	}
}

/**
 * Handle case where at least one of {@code a} or {@code b} is
 * {@link //EMPTY}. In the following diagrams, the symbol {@code $} is used
 * to represent {@link //EMPTY}.
 *
 * <h2>Local-Context Merges</h2>
 *
 * <p>These local-context merge operations are used when {@code rootIsWildcard}
 * is true.</p>
 *
 * <p>{@link //EMPTY} is superset of any graph; return {@link //EMPTY}.<br>
 * <embed src="images/LocalMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
 *
 * <p>{@link //EMPTY} and anything is {@code //EMPTY}, so merged parent is
 * {@code //EMPTY}; return left graph.<br>
 * <embed src="images/LocalMerge_EmptyParent.svg" type="image/svg+xml"/></p>
 *
 * <p>Special case of last merge if local context.<br>
 * <embed src="images/LocalMerge_DiffRoots.svg" type="image/svg+xml"/></p>
 *
 * <h2>Full-Context Merges</h2>
 *
 * <p>These full-context merge operations are used when {@code rootIsWildcard}
 * is false.</p>
 *
 * <p><embed src="images/FullMerge_EmptyRoots.svg" type="image/svg+xml"/></p>
 *
 * <p>Must keep all contexts; {@link //EMPTY} in array is a special value (and
 * null parent).<br>
 * <embed src="images/FullMerge_EmptyRoot.svg" type="image/svg+xml"/></p>
 *
 * <p><embed src="images/FullMerge_SameRoot.svg" type="image/svg+xml"/></p>
 *
 * @param a the first {@link SingletonPredictionContext}
 * @param b the second {@link SingletonPredictionContext}
 * @param rootIsWildcard {@code true} if this is a local-context merge,
 * otherwise false to indicate a full-context merge
 */
function mergeRoot(a, b, rootIsWildcard) {
	if (rootIsWildcard) {
		if (a === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // // + b =//
		}
		if (b === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // a +// =//
		}
	} else {
		if (a === PredictionContext.EMPTY && b === PredictionContext.EMPTY) {
			return PredictionContext.EMPTY; // $ + $ = $
		} else if (a === PredictionContext.EMPTY) { // $ + x = [$,x]
			const payloads = [ b.returnState,
					PredictionContext.EMPTY_RETURN_STATE ];
			const parents = [ b.parentCtx, null ];
			return new ArrayPredictionContext(parents, payloads);
		} else if (b === PredictionContext.EMPTY) { // x + $ = [$,x] ($ is always first if present)
			const payloads = [ a.returnState, PredictionContext.EMPTY_RETURN_STATE ];
			const parents = [ a.parentCtx, null ];
			return new ArrayPredictionContext(parents, payloads);
		}
	}
	return null;
}

/**
 * Merge two {@link ArrayPredictionContext} instances.
 *
 * <p>Different tops, different parents.<br>
 * <embed src="images/ArrayMerge_DiffTopDiffPar.svg" type="image/svg+xml"/></p>
 *
 * <p>Shared top, same parents.<br>
 * <embed src="images/ArrayMerge_ShareTopSamePar.svg" type="image/svg+xml"/></p>
 *
 * <p>Shared top, different parents.<br>
 * <embed src="images/ArrayMerge_ShareTopDiffPar.svg" type="image/svg+xml"/></p>
 *
 * <p>Shared top, all shared parents.<br>
 * <embed src="images/ArrayMerge_ShareTopSharePar.svg"
 * type="image/svg+xml"/></p>
 *
 * <p>Equal tops, merge parents and reduce top to
 * {@link SingletonPredictionContext}.<br>
 * <embed src="images/ArrayMerge_EqualTop.svg" type="image/svg+xml"/></p>
 */
function mergeArrays(a, b, rootIsWildcard, mergeCache) {
	if (mergeCache !== null) {
		let previous = mergeCache.get(a, b);
		if (previous !== null) {
			return previous;
		}
		previous = mergeCache.get(b, a);
		if (previous !== null) {
			return previous;
		}
	}
	// merge sorted payloads a + b => M
	let i = 0; // walks a
	let j = 0; // walks b
	let k = 0; // walks target M array

	let mergedReturnStates = [];
	let mergedParents = [];
	// walk and merge to yield mergedParents, mergedReturnStates
	while (i < a.returnStates.length && j < b.returnStates.length) {
		const a_parent = a.parents[i];
		const b_parent = b.parents[j];
		if (a.returnStates[i] === b.returnStates[j]) {
			// same payload (stack tops are equal), must yield merged singleton
			const payload = a.returnStates[i];
			// $+$ = $
			const bothDollars = payload === PredictionContext.EMPTY_RETURN_STATE &&
					a_parent === null && b_parent === null;
			const ax_ax = (a_parent !== null && b_parent !== null && a_parent === b_parent); // ax+ax
																							// ->
																							// ax
			if (bothDollars || ax_ax) {
				mergedParents[k] = a_parent; // choose left
				mergedReturnStates[k] = payload;
			} else { // ax+ay -> a'[x,y]
				mergedParents[k] = merge(a_parent, b_parent, rootIsWildcard, mergeCache);
				mergedReturnStates[k] = payload;
			}
			i += 1; // hop over left one as usual
			j += 1; // but also skip one in right side since we merge
		} else if (a.returnStates[i] < b.returnStates[j]) { // copy a[i] to M
			mergedParents[k] = a_parent;
			mergedReturnStates[k] = a.returnStates[i];
			i += 1;
		} else { // b > a, copy b[j] to M
			mergedParents[k] = b_parent;
			mergedReturnStates[k] = b.returnStates[j];
			j += 1;
		}
		k += 1;
	}
	// copy over any payloads remaining in either array
	if (i < a.returnStates.length) {
		for (let p = i; p < a.returnStates.length; p++) {
			mergedParents[k] = a.parents[p];
			mergedReturnStates[k] = a.returnStates[p];
			k += 1;
		}
	} else {
		for (let p = j; p < b.returnStates.length; p++) {
			mergedParents[k] = b.parents[p];
			mergedReturnStates[k] = b.returnStates[p];
			k += 1;
		}
	}
	// trim merged if we combined a few that had same stack tops
	if (k < mergedParents.length) { // write index < last position; trim
		if (k === 1) { // for just one merged element, return singleton top
			const a_ = SingletonPredictionContext.create(mergedParents[0],
					mergedReturnStates[0]);
			if (mergeCache !== null) {
				mergeCache.set(a, b, a_);
			}
			return a_;
		}
		mergedParents = mergedParents.slice(0, k);
		mergedReturnStates = mergedReturnStates.slice(0, k);
	}

	const M = new ArrayPredictionContext(mergedParents, mergedReturnStates);

	// if we created same array as a or b, return that instead
	// TODO: track whether this is possible above during merge sort for speed
	if (M === a) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, a);
		}
		return a;
	}
	if (M === b) {
		if (mergeCache !== null) {
			mergeCache.set(a, b, b);
		}
		return b;
	}
	combineCommonParents(mergedParents);

	if (mergeCache !== null) {
		mergeCache.set(a, b, M);
	}
	return M;
}

/**
 * Make pass over all <em>M</em> {@code parents}; merge any {@code equals()}
 * ones.
 */
function combineCommonParents(parents) {
	const uniqueParents = new Map();

	for (let p = 0; p < parents.length; p++) {
		const parent = parents[p];
		if (!(uniqueParents.containsKey(parent))) {
			uniqueParents.put(parent, parent);
		}
	}
	for (let q = 0; q < parents.length; q++) {
		parents[q] = uniqueParents.get(parents[q]);
	}
}

function getCachedPredictionContext(context, contextCache, visited) {
	if (context.isEmpty()) {
		return context;
	}
	let existing = visited.get(context) || null;
	if (existing !== null) {
		return existing;
	}
	existing = contextCache.get(context);
	if (existing !== null) {
		visited.put(context, existing);
		return existing;
	}
	let changed = false;
	let parents = [];
	for (let i = 0; i < parents.length; i++) {
		const parent = getCachedPredictionContext(context.getParent(i), contextCache, visited);
		if (changed || parent !== context.getParent(i)) {
			if (!changed) {
				parents = [];
				for (let j = 0; j < context.length; j++) {
					parents[j] = context.getParent(j);
				}
				changed = true;
			}
			parents[i] = parent;
		}
	}
	if (!changed) {
		contextCache.add(context);
		visited.put(context, context);
		return context;
	}
	let updated = null;
	if (parents.length === 0) {
		updated = PredictionContext.EMPTY;
	} else if (parents.length === 1) {
		updated = SingletonPredictionContext.create(parents[0], context
				.getReturnState(0));
	} else {
		updated = new ArrayPredictionContext(parents, context.returnStates);
	}
	contextCache.add(updated);
	visited.put(updated, updated);
	visited.put(context, updated);

	return updated;
}

// ter's recursive version of Sam's getAllNodes()
function getAllContextNodes(context, nodes, visited) {
	if (nodes === null) {
		nodes = [];
		return getAllContextNodes(context, nodes, visited);
	} else if (visited === null) {
		visited = new Map();
		return getAllContextNodes(context, nodes, visited);
	} else {
		if (context === null || visited.containsKey(context)) {
			return nodes;
		}
		visited.put(context, context);
		nodes.push(context);
		for (let i = 0; i < context.length; i++) {
			getAllContextNodes(context.getParent(i), nodes, visited);
		}
		return nodes;
	}
}

module.exports = {
	merge,
	PredictionContext,
	PredictionContextCache,
	SingletonPredictionContext,
	predictionContextFromRuleContext,
	getCachedPredictionContext
}


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/Recognizer.js":
/*!******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/Recognizer.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/src/antlr4/Token.js");
const {ConsoleErrorListener} = __webpack_require__(/*! ./error/ErrorListener */ "./node_modules/antlr4/src/antlr4/error/ErrorListener.js");
const {ProxyErrorListener} = __webpack_require__(/*! ./error/ErrorListener */ "./node_modules/antlr4/src/antlr4/error/ErrorListener.js");

class Recognizer {
    constructor() {
        this._listeners = [ ConsoleErrorListener.INSTANCE ];
        this._interp = null;
        this._stateNumber = -1;
    }

    checkVersion(toolVersion) {
        const runtimeVersion = "4.9.1";
        if (runtimeVersion!==toolVersion) {
            console.log("ANTLR runtime and generated code versions disagree: "+runtimeVersion+"!="+toolVersion);
        }
    }

    addErrorListener(listener) {
        this._listeners.push(listener);
    }

    removeErrorListeners() {
        this._listeners = [];
    }

    getTokenTypeMap() {
        const tokenNames = this.getTokenNames();
        if (tokenNames===null) {
            throw("The current recognizer does not provide a list of token names.");
        }
        let result = this.tokenTypeMapCache[tokenNames];
        if(result===undefined) {
            result = tokenNames.reduce(function(o, k, i) { o[k] = i; });
            result.EOF = Token.EOF;
            this.tokenTypeMapCache[tokenNames] = result;
        }
        return result;
    }

    /**
     * Get a map from rule names to rule indexes.
     * <p>Used for XPath and tree pattern compilation.</p>
     */
    getRuleIndexMap() {
        const ruleNames = this.ruleNames;
        if (ruleNames===null) {
            throw("The current recognizer does not provide a list of rule names.");
        }
        let result = this.ruleIndexMapCache[ruleNames]; // todo: should it be Recognizer.ruleIndexMapCache ?
        if(result===undefined) {
            result = ruleNames.reduce(function(o, k, i) { o[k] = i; });
            this.ruleIndexMapCache[ruleNames] = result;
        }
        return result;
    }

    getTokenType(tokenName) {
        const ttype = this.getTokenTypeMap()[tokenName];
        if (ttype !==undefined) {
            return ttype;
        } else {
            return Token.INVALID_TYPE;
        }
    }

    // What is the error header, normally line/character position information?
    getErrorHeader(e) {
        const line = e.getOffendingToken().line;
        const column = e.getOffendingToken().column;
        return "line " + line + ":" + column;
    }

    /**
     * How should a token be displayed in an error message? The default
     * is to display just the text, but during development you might
     * want to have a lot of information spit out.  Override in that case
     * to use t.toString() (which, for CommonToken, dumps everything about
     * the token). This is better than forcing you to override a method in
     * your token objects because you don't have to go modify your lexer
     * so that it creates a new Java type.
     *
     * @deprecated This method is not called by the ANTLR 4 Runtime. Specific
     * implementations of {@link ANTLRErrorStrategy} may provide a similar
     * feature when necessary. For example, see
     * {@link DefaultErrorStrategy//getTokenErrorDisplay}.*/
    getTokenErrorDisplay(t) {
        if (t===null) {
            return "<no token>";
        }
        let s = t.text;
        if (s===null) {
            if (t.type===Token.EOF) {
                s = "<EOF>";
            } else {
                s = "<" + t.type + ">";
            }
        }
        s = s.replace("\n","\\n").replace("\r","\\r").replace("\t","\\t");
        return "'" + s + "'";
    }

    getErrorListenerDispatch() {
        return new ProxyErrorListener(this._listeners);
    }

    /**
     * subclass needs to override these if there are sempreds or actions
     * that the ATN interp needs to execute
     */
    sempred(localctx, ruleIndex, actionIndex) {
        return true;
    }

    precpred(localctx , precedence) {
        return true;
    }

    get state(){
        return this._stateNumber;
    }

    set state(state) {
        this._stateNumber = state;
    }
}

Recognizer.tokenTypeMapCache = {};
Recognizer.ruleIndexMapCache = {};

module.exports = Recognizer;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/RuleContext.js":
/*!*******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/RuleContext.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {RuleNode} = __webpack_require__(/*! ./tree/Tree */ "./node_modules/antlr4/src/antlr4/tree/Tree.js");
const {INVALID_INTERVAL} = __webpack_require__(/*! ./tree/Tree */ "./node_modules/antlr4/src/antlr4/tree/Tree.js");
const Trees = __webpack_require__(/*! ./tree/Trees */ "./node_modules/antlr4/src/antlr4/tree/Trees.js");

class RuleContext extends RuleNode {
	/** A rule context is a record of a single rule invocation. It knows
	 * which context invoked it, if any. If there is no parent context, then
	 * naturally the invoking state is not valid.  The parent link
	 * provides a chain upwards from the current rule invocation to the root
	 * of the invocation tree, forming a stack. We actually carry no
	 * information about the rule associated with this context (except
	 * when parsing). We keep only the state number of the invoking state from
	 * the ATN submachine that invoked this. Contrast this with the s
	 * pointer inside ParserRuleContext that tracks the current state
	 * being "executed" for the current rule.
	 *
	 * The parent contexts are useful for computing lookahead sets and
	 * getting error information.
	 *
	 * These objects are used during parsing and prediction.
	 * For the special case of parsers, we use the subclass
	 * ParserRuleContext.
	 *
	 * @see ParserRuleContext
	 */
	constructor(parent, invokingState) {
		// What context invoked this rule?
		super();
		this.parentCtx = parent || null;
		/**
		 * What state invoked the rule associated with this context?
		 * The "return address" is the followState of invokingState
		 * If parent is null, this should be -1.
		 */
		this.invokingState = invokingState || -1;
	}

	depth() {
		let n = 0;
		let p = this;
		while (p !== null) {
			p = p.parentCtx;
			n += 1;
		}
		return n;
	}

	/**
	 * A context is empty if there is no invoking state; meaning nobody call
	 * current context.
	 */
	isEmpty() {
		return this.invokingState === -1;
	}

// satisfy the ParseTree / SyntaxTree interface
	getSourceInterval() {
		return INVALID_INTERVAL;
	}

	getRuleContext() {
		return this;
	}

	getPayload() {
		return this;
	}

	/**
	 * Return the combined text of all child nodes. This method only considers
	 * tokens which have been added to the parse tree.
	 * <p>
	 * Since tokens on hidden channels (e.g. whitespace or comments) are not
	 * added to the parse trees, they will not appear in the output of this
	 * method.
	 */
	getText() {
		if (this.getChildCount() === 0) {
			return "";
		} else {
			return this.children.map(function(child) {
				return child.getText();
			}).join("");
		}
	}

	/**
	 * For rule associated with this parse tree internal node, return
	 * the outer alternative number used to match the input. Default
	 * implementation does not compute nor store this alt num. Create
	 * a subclass of ParserRuleContext with backing field and set
	 * option contextSuperClass.
	 * to set it.
	 */
	getAltNumber() {
	    // use constant value of ATN.INVALID_ALT_NUMBER to avoid circular dependency
	    return 0;
    }

	/**
	 * Set the outer alternative number for this context node. Default
	 * implementation does nothing to avoid backing field overhead for
	 * trees that don't need it.  Create
	 * a subclass of ParserRuleContext with backing field and set
	 * option contextSuperClass.
	 */
	setAltNumber(altNumber) { }

	getChild(i) {
		return null;
	}

	getChildCount() {
		return 0;
	}

	accept(visitor) {
		return visitor.visitChildren(this);
	}

	/**
	 * Print out a whole tree, not just a node, in LISP format
	 * (root child1 .. childN). Print just a node if this is a leaf.
	 */
	toStringTree(ruleNames, recog) {
		return Trees.toStringTree(this, ruleNames, recog);
	}

	toString(ruleNames, stop) {
		ruleNames = ruleNames || null;
		stop = stop || null;
		let p = this;
		let s = "[";
		while (p !== null && p !== stop) {
			if (ruleNames === null) {
				if (!p.isEmpty()) {
					s += p.invokingState;
				}
			} else {
				const ri = p.ruleIndex;
				const ruleName = (ri >= 0 && ri < ruleNames.length) ? ruleNames[ri]
						: "" + ri;
				s += ruleName;
			}
			if (p.parentCtx !== null && (ruleNames !== null || !p.parentCtx.isEmpty())) {
				s += " ";
			}
			p = p.parentCtx;
		}
		s += "]";
		return s;
	}
}

module.exports = RuleContext;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/Token.js":
/*!*************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/Token.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/**
 * A token has properties: text, type, line, character position in the line
 * (so we can ignore tabs), token channel, index, and source from which
 * we obtained this token.
 */
class Token {
	constructor() {
		this.source = null;
		this.type = null; // token type of the token
		this.channel = null; // The parser ignores everything not on DEFAULT_CHANNEL
		this.start = null; // optional; return -1 if not implemented.
		this.stop = null; // optional; return -1 if not implemented.
		this.tokenIndex = null; // from 0..n-1 of the token object in the input stream
		this.line = null; // line=1..n of the 1st character
		this.column = null; // beginning of the line at which it occurs, 0..n-1
		this._text = null; // text of the token.
	}

	getTokenSource() {
		return this.source[0];
	}

	getInputStream() {
		return this.source[1];
	}

	get text(){
		return this._text;
	}

	set text(text) {
		this._text = text;
	}
}

Token.INVALID_TYPE = 0;

/**
 * During lookahead operations, this "token" signifies we hit rule end ATN state
 * and did not follow it despite needing to.
 */
Token.EPSILON = -2;

Token.MIN_USER_TOKEN_TYPE = 1;

Token.EOF = -1;

/**
 * All tokens go to the parser (unless skip() is called in that rule)
 * on a particular "channel". The parser tunes to a particular channel
 * so that whitespace etc... can go to the parser on a "hidden" channel.
 */
Token.DEFAULT_CHANNEL = 0;

/**
 * Anything on different channel than DEFAULT_CHANNEL is not parsed
 * by parser.
 */
Token.HIDDEN_CHANNEL = 1;


class CommonToken extends Token {
	constructor(source, type, channel, start, stop) {
		super();
		this.source = source !== undefined ? source : CommonToken.EMPTY_SOURCE;
		this.type = type !== undefined ? type : null;
		this.channel = channel !== undefined ? channel : Token.DEFAULT_CHANNEL;
		this.start = start !== undefined ? start : -1;
		this.stop = stop !== undefined ? stop : -1;
		this.tokenIndex = -1;
		if (this.source[0] !== null) {
			this.line = source[0].line;
			this.column = source[0].column;
		} else {
			this.column = -1;
		}
	}

	/**
	 * Constructs a new {@link CommonToken} as a copy of another {@link Token}.
	 *
	 * <p>
	 * If {@code oldToken} is also a {@link CommonToken} instance, the newly
	 * constructed token will share a reference to the {@link //text} field and
	 * the {@link Pair} stored in {@link //source}. Otherwise, {@link //text} will
	 * be assigned the result of calling {@link //getText}, and {@link //source}
	 * will be constructed from the result of {@link Token//getTokenSource} and
	 * {@link Token//getInputStream}.</p>
	 *
	 * @param oldToken The token to copy.
	 */
	clone() {
		const t = new CommonToken(this.source, this.type, this.channel, this.start, this.stop);
		t.tokenIndex = this.tokenIndex;
		t.line = this.line;
		t.column = this.column;
		t.text = this.text;
		return t;
	}

	toString() {
		let txt = this.text;
		if (txt !== null) {
			txt = txt.replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t");
		} else {
			txt = "<no text>";
		}
		return "[@" + this.tokenIndex + "," + this.start + ":" + this.stop + "='" +
				txt + "',<" + this.type + ">" +
				(this.channel > 0 ? ",channel=" + this.channel : "") + "," +
				this.line + ":" + this.column + "]";
	}

	get text(){
		if (this._text !== null) {
			return this._text;
		}
		const input = this.getInputStream();
		if (input === null) {
			return null;
		}
		const n = input.size;
		if (this.start < n && this.stop < n) {
			return input.getText(this.start, this.stop);
		} else {
			return "<EOF>";
		}
	}

	set text(text) {
		this._text = text;
	}
}

/**
 * An empty {@link Pair} which is used as the default value of
 * {@link //source} for tokens that do not have a source.
 */
CommonToken.EMPTY_SOURCE = [ null, null ];

module.exports = {
	Token,
	CommonToken
}


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/Utils.js":
/*!*************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/Utils.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

function arrayToString(a) {
    return "[" + a.join(", ") + "]";
}

String.prototype.seed = String.prototype.seed || Math.round(Math.random() * Math.pow(2, 32));

String.prototype.hashCode = function () {
    const key = this.toString();
    let h1b, k1;

    const remainder = key.length & 3; // key.length % 4
    const bytes = key.length - remainder;
    let h1 = String.prototype.seed;
    const c1 = 0xcc9e2d51;
    const c2 = 0x1b873593;
    let i = 0;

    while (i < bytes) {
        k1 =
            ((key.charCodeAt(i) & 0xff)) |
            ((key.charCodeAt(++i) & 0xff) << 8) |
            ((key.charCodeAt(++i) & 0xff) << 16) |
            ((key.charCodeAt(++i) & 0xff) << 24);
        ++i;

        k1 = ((((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16))) & 0xffffffff;
        k1 = (k1 << 15) | (k1 >>> 17);
        k1 = ((((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16))) & 0xffffffff;

        h1 ^= k1;
        h1 = (h1 << 13) | (h1 >>> 19);
        h1b = ((((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16))) & 0xffffffff;
        h1 = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));
    }

    k1 = 0;

    switch (remainder) {
        case 3:
            k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;
        case 2:
            k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;
        case 1:
            k1 ^= (key.charCodeAt(i) & 0xff);

            k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;
            k1 = (k1 << 15) | (k1 >>> 17);
            k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;
            h1 ^= k1;
    }

    h1 ^= key.length;

    h1 ^= h1 >>> 16;
    h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;
    h1 ^= h1 >>> 13;
    h1 = ((((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16))) & 0xffffffff;
    h1 ^= h1 >>> 16;

    return h1 >>> 0;
};

function standardEqualsFunction(a, b) {
    return a ? a.equals(b) : a==b;
}

function standardHashCodeFunction(a) {
    return a ? a.hashCode() : -1;
}

class Set {
    constructor(hashFunction, equalsFunction) {
        this.data = {};
        this.hashFunction = hashFunction || standardHashCodeFunction;
        this.equalsFunction = equalsFunction || standardEqualsFunction;
    }

    add(value) {
        const hash = this.hashFunction(value);
        const key = "hash_" + hash;
        if (key in this.data) {
            const values = this.data[key];
            for (let i = 0; i < values.length; i++) {
                if (this.equalsFunction(value, values[i])) {
                    return values[i];
                }
            }
            values.push(value);
            return value;
        } else {
            this.data[key] = [value];
            return value;
        }
    }

    contains(value) {
        return this.get(value) != null;
    }

    get(value) {
        const hash = this.hashFunction(value);
        const key = "hash_" + hash;
        if (key in this.data) {
            const values = this.data[key];
            for (let i = 0; i < values.length; i++) {
                if (this.equalsFunction(value, values[i])) {
                    return values[i];
                }
            }
        }
        return null;
    }

    values() {
        let l = [];
        for (const key in this.data) {
            if (key.indexOf("hash_") === 0) {
                l = l.concat(this.data[key]);
            }
        }
        return l;
    }

    toString() {
        return arrayToString(this.values());
    }

    get length(){
        let l = 0;
        for (const key in this.data) {
            if (key.indexOf("hash_") === 0) {
                l = l + this.data[key].length;
            }
        }
        return l;
    }
}


class BitSet {
    constructor() {
        this.data = [];
    }

    add(value) {
        this.data[value] = true;
    }

    or(set) {
        const bits = this;
        Object.keys(set.data).map(function (alt) {
            bits.add(alt);
        });
    }

    remove(value) {
        delete this.data[value];
    }

    contains(value) {
        return this.data[value] === true;
    }

    values() {
        return Object.keys(this.data);
    }

    minValue() {
        return Math.min.apply(null, this.values());
    }

    hashCode() {
        const hash = new Hash();
        hash.update(this.values());
        return hash.finish();
    }

    equals(other) {
        if (!(other instanceof BitSet)) {
            return false;
        }
        return this.hashCode() === other.hashCode();
    }

    toString() {
        return "{" + this.values().join(", ") + "}";
    }

    get length(){
        return this.values().length;
    }
}


class Map {
    constructor(hashFunction, equalsFunction) {
        this.data = {};
        this.hashFunction = hashFunction || standardHashCodeFunction;
        this.equalsFunction = equalsFunction || standardEqualsFunction;
    }

    put(key, value) {
        const hashKey = "hash_" + this.hashFunction(key);
        if (hashKey in this.data) {
            const entries = this.data[hashKey];
            for (let i = 0; i < entries.length; i++) {
                const entry = entries[i];
                if (this.equalsFunction(key, entry.key)) {
                    const oldValue = entry.value;
                    entry.value = value;
                    return oldValue;
                }
            }
            entries.push({key:key, value:value});
            return value;
        } else {
            this.data[hashKey] = [{key:key, value:value}];
            return value;
        }
    }

    containsKey(key) {
        const hashKey = "hash_" + this.hashFunction(key);
        if(hashKey in this.data) {
            const entries = this.data[hashKey];
            for (let i = 0; i < entries.length; i++) {
                const entry = entries[i];
                if (this.equalsFunction(key, entry.key))
                    return true;
            }
        }
        return false;
    }

    get(key) {
        const hashKey = "hash_" + this.hashFunction(key);
        if(hashKey in this.data) {
            const entries = this.data[hashKey];
            for (let i = 0; i < entries.length; i++) {
                const entry = entries[i];
                if (this.equalsFunction(key, entry.key))
                    return entry.value;
            }
        }
        return null;
    }

    entries() {
        let l = [];
        for (const key in this.data) {
            if (key.indexOf("hash_") === 0) {
                l = l.concat(this.data[key]);
            }
        }
        return l;
    }

    getKeys() {
        return this.entries().map(function(e) {
            return e.key;
        });
    }

    getValues() {
        return this.entries().map(function(e) {
                return e.value;
        });
    }

    toString() {
        const ss = this.entries().map(function(entry) {
            return '{' + entry.key + ':' + entry.value + '}';
        });
        return '[' + ss.join(", ") + ']';
    }

    get length(){
        let l = 0;
        for (const hashKey in this.data) {
            if (hashKey.indexOf("hash_") === 0) {
                l = l + this.data[hashKey].length;
            }
        }
        return l;
    }
}


class AltDict {
    constructor() {
        this.data = {};
    }

    get(key) {
        key = "k-" + key;
        if (key in this.data) {
            return this.data[key];
        } else {
            return null;
        }
    }

    put(key, value) {
        key = "k-" + key;
        this.data[key] = value;
    }

    values() {
        const data = this.data;
        const keys = Object.keys(this.data);
        return keys.map(function (key) {
            return data[key];
        });
    }
}


class DoubleDict {
    constructor(defaultMapCtor) {
        this.defaultMapCtor = defaultMapCtor || Map;
        this.cacheMap = new this.defaultMapCtor();
    }

    get(a, b) {
        const d = this.cacheMap.get(a) || null;
        return d === null ? null : (d.get(b) || null);
    }

    set(a, b, o) {
        let d = this.cacheMap.get(a) || null;
        if (d === null) {
            d = new this.defaultMapCtor();
            this.cacheMap.put(a, d);
        }
        d.put(b, o);
    }
}

class Hash {
    constructor() {
        this.count = 0;
        this.hash = 0;
    }

    update() {
        for(let i=0;i<arguments.length;i++) {
            const value = arguments[i];
            if (value == null)
                continue;
            if(Array.isArray(value))
                this.update.apply(this, value);
            else {
                let k = 0;
                switch (typeof(value)) {
                    case 'undefined':
                    case 'function':
                        continue;
                    case 'number':
                    case 'boolean':
                        k = value;
                        break;
                    case 'string':
                        k = value.hashCode();
                        break;
                    default:
                        if(value.updateHashCode)
                            value.updateHashCode(this);
                        else
                            console.log("No updateHashCode for " + value.toString())
                        continue;
                }
                k = k * 0xCC9E2D51;
                k = (k << 15) | (k >>> (32 - 15));
                k = k * 0x1B873593;
                this.count = this.count + 1;
                let hash = this.hash ^ k;
                hash = (hash << 13) | (hash >>> (32 - 13));
                hash = hash * 5 + 0xE6546B64;
                this.hash = hash;
            }
        }
    }

    finish() {
        let hash = this.hash ^ (this.count * 4);
        hash = hash ^ (hash >>> 16);
        hash = hash * 0x85EBCA6B;
        hash = hash ^ (hash >>> 13);
        hash = hash * 0xC2B2AE35;
        hash = hash ^ (hash >>> 16);
        return hash;
    }
}

function hashStuff() {
    const hash = new Hash();
    hash.update.apply(hash, arguments);
    return hash.finish();
}


function escapeWhitespace(s, escapeSpaces) {
    s = s.replace(/\t/g, "\\t")
         .replace(/\n/g, "\\n")
         .replace(/\r/g, "\\r");
    if (escapeSpaces) {
        s = s.replace(/ /g, "\u00B7");
    }
    return s;
}

function titleCase(str) {
    return str.replace(/\w\S*/g, function (txt) {
        return txt.charAt(0).toUpperCase() + txt.substr(1);
    });
}

function equalArrays(a, b) {
    if (!Array.isArray(a) || !Array.isArray(b))
        return false;
    if (a == b)
        return true;
    if (a.length != b.length)
        return false;
    for (let i = 0; i < a.length; i++) {
        if (a[i] == b[i])
            continue;
        if (!a[i].equals || !a[i].equals(b[i]))
            return false;
    }
    return true;
}

module.exports = {
    Hash,
    Set,
    Map,
    BitSet,
    AltDict,
    DoubleDict,
    hashStuff,
    escapeWhitespace,
    arrayToString,
    titleCase,
    equalArrays
}


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ATN.js":
/*!***************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ATN.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const LL1Analyzer = __webpack_require__(/*! ./../LL1Analyzer */ "./node_modules/antlr4/src/antlr4/LL1Analyzer.js");
const {IntervalSet} = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/src/antlr4/IntervalSet.js");
const {Token} = __webpack_require__(/*! ./../Token */ "./node_modules/antlr4/src/antlr4/Token.js");

class ATN {

    constructor(grammarType , maxTokenType) {
        /**
         * Used for runtime deserialization of ATNs from strings
         * The type of the ATN.
        */
        this.grammarType = grammarType;
        // The maximum value for any symbol recognized by a transition in the ATN.
        this.maxTokenType = maxTokenType;
        this.states = [];
        /**
         * Each subrule/rule is a decision point and we must track them so we
         * can go back later and build DFA predictors for them.  This includes
         * all the rules, subrules, optional blocks, ()+, ()* etc...
         */
        this.decisionToState = [];
        // Maps from rule index to starting state number.
        this.ruleToStartState = [];
        // Maps from rule index to stop state number.
        this.ruleToStopState = null;
        this.modeNameToStartState = {};
        /**
         * For lexer ATNs, this maps the rule index to the resulting token type.
         * For parser ATNs, this maps the rule index to the generated bypass token
         * type if the {@link ATNDeserializationOptions//isGenerateRuleBypassTransitions}
         * deserialization option was specified; otherwise, this is {@code null}
         */
        this.ruleToTokenType = null;
        /**
         * For lexer ATNs, this is an array of {@link LexerAction} objects which may
         * be referenced by action transitions in the ATN
         */
        this.lexerActions = null;
        this.modeToStartState = [];
    }

    /**
     * Compute the set of valid tokens that can occur starting in state {@code s}.
     * If {@code ctx} is null, the set of tokens will not include what can follow
     * the rule surrounding {@code s}. In other words, the set will be
     * restricted to tokens reachable staying within {@code s}'s rule
     */
    nextTokensInContext(s, ctx) {
        const anal = new LL1Analyzer(this);
        return anal.LOOK(s, null, ctx);
    }

    /**
     * Compute the set of valid tokens that can occur starting in {@code s} and
     * staying in same rule. {@link Token//EPSILON} is in set if we reach end of
     * rule
     */
    nextTokensNoContext(s) {
        if (s.nextTokenWithinRule !== null ) {
            return s.nextTokenWithinRule;
        }
        s.nextTokenWithinRule = this.nextTokensInContext(s, null);
        s.nextTokenWithinRule.readOnly = true;
        return s.nextTokenWithinRule;
    }

    nextTokens(s, ctx) {
        if ( ctx===undefined ) {
            return this.nextTokensNoContext(s);
        } else {
            return this.nextTokensInContext(s, ctx);
        }
    }

    addState(state) {
        if ( state !== null ) {
            state.atn = this;
            state.stateNumber = this.states.length;
        }
        this.states.push(state);
    }

    removeState(state) {
        this.states[state.stateNumber] = null; // just free mem, don't shift states in list
    }

    defineDecisionState(s) {
        this.decisionToState.push(s);
        s.decision = this.decisionToState.length-1;
        return s.decision;
    }

    getDecisionState(decision) {
        if (this.decisionToState.length===0) {
            return null;
        } else {
            return this.decisionToState[decision];
        }
    }

    /**
     * Computes the set of input symbols which could follow ATN state number
     * {@code stateNumber} in the specified full {@code context}. This method
     * considers the complete parser context, but does not evaluate semantic
     * predicates (i.e. all predicates encountered during the calculation are
     * assumed true). If a path in the ATN exists from the starting state to the
     * {@link RuleStopState} of the outermost context without matching any
     * symbols, {@link Token//EOF} is added to the returned set.
     *
     * <p>If {@code context} is {@code null}, it is treated as
     * {@link ParserRuleContext//EMPTY}.</p>
     *
     * @param stateNumber the ATN state number
     * @param ctx the full parse context
     *
     * @return {IntervalSet} The set of potentially valid input symbols which could follow the
     * specified state in the specified context.
     *
     * @throws IllegalArgumentException if the ATN does not contain a state with
     * number {@code stateNumber}
     */
    getExpectedTokens(stateNumber, ctx ) {
        if ( stateNumber < 0 || stateNumber >= this.states.length ) {
            throw("Invalid state number.");
        }
        const s = this.states[stateNumber];
        let following = this.nextTokens(s);
        if (!following.contains(Token.EPSILON)) {
            return following;
        }
        const expected = new IntervalSet();
        expected.addSet(following);
        expected.removeOne(Token.EPSILON);
        while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {
            const invokingState = this.states[ctx.invokingState];
            const rt = invokingState.transitions[0];
            following = this.nextTokens(rt.followState);
            expected.addSet(following);
            expected.removeOne(Token.EPSILON);
            ctx = ctx.parentCtx;
        }
        if (following.contains(Token.EPSILON)) {
            expected.addOne(Token.EOF);
        }
        return expected;
    }
}

ATN.INVALID_ALT_NUMBER = 0;

module.exports = ATN;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ATNConfig.js":
/*!*********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ATNConfig.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {DecisionState} = __webpack_require__(/*! ./ATNState */ "./node_modules/antlr4/src/antlr4/atn/ATNState.js");
const {SemanticContext} = __webpack_require__(/*! ./SemanticContext */ "./node_modules/antlr4/src/antlr4/atn/SemanticContext.js");
const {Hash} = __webpack_require__(/*! ../Utils */ "./node_modules/antlr4/src/antlr4/Utils.js");


function checkParams(params, isCfg) {
	if(params===null) {
		const result = { state:null, alt:null, context:null, semanticContext:null };
		if(isCfg) {
			result.reachesIntoOuterContext = 0;
		}
		return result;
	} else {
		const props = {};
		props.state = params.state || null;
		props.alt = (params.alt === undefined) ? null : params.alt;
		props.context = params.context || null;
		props.semanticContext = params.semanticContext || null;
		if(isCfg) {
			props.reachesIntoOuterContext = params.reachesIntoOuterContext || 0;
			props.precedenceFilterSuppressed = params.precedenceFilterSuppressed || false;
		}
		return props;
	}
}

class ATNConfig {
    /**
     * @param {Object} params A tuple: (ATN state, predicted alt, syntactic, semantic context).
     * The syntactic context is a graph-structured stack node whose
     * path(s) to the root is the rule invocation(s)
     * chain used to arrive at the state.  The semantic context is
     * the tree of semantic predicates encountered before reaching
     * an ATN state
     */
    constructor(params, config) {
        this.checkContext(params, config);
        params = checkParams(params);
        config = checkParams(config, true);
        // The ATN state associated with this configuration///
        this.state = params.state!==null ? params.state : config.state;
        // What alt (or lexer rule) is predicted by this configuration///
        this.alt = params.alt!==null ? params.alt : config.alt;
        /**
         * The stack of invoking states leading to the rule/states associated
         * with this config.  We track only those contexts pushed during
         * execution of the ATN simulator
         */
        this.context = params.context!==null ? params.context : config.context;
        this.semanticContext = params.semanticContext!==null ? params.semanticContext :
            (config.semanticContext!==null ? config.semanticContext : SemanticContext.NONE);
        // TODO: make it a boolean then
        /**
         * We cannot execute predicates dependent upon local context unless
         * we know for sure we are in the correct context. Because there is
         * no way to do this efficiently, we simply cannot evaluate
         * dependent predicates unless we are in the rule that initially
         * invokes the ATN simulator.
         * closure() tracks the depth of how far we dip into the
         * outer context: depth &gt; 0.  Note that it may not be totally
         * accurate depth since I don't ever decrement
         */
        this.reachesIntoOuterContext = config.reachesIntoOuterContext;
        this.precedenceFilterSuppressed = config.precedenceFilterSuppressed;
    }

    checkContext(params, config) {
        if((params.context===null || params.context===undefined) &&
                (config===null || config.context===null || config.context===undefined)) {
            this.context = null;
        }
    }

    hashCode() {
        const hash = new Hash();
        this.updateHashCode(hash);
        return hash.finish();
    }

    updateHashCode(hash) {
        hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext);
    }

    /**
     * An ATN configuration is equal to another if both have
     * the same state, they predict the same alternative, and
     * syntactic/semantic contexts are the same
     */
    equals(other) {
        if (this === other) {
            return true;
        } else if (! (other instanceof ATNConfig)) {
            return false;
        } else {
            return this.state.stateNumber===other.state.stateNumber &&
                this.alt===other.alt &&
                (this.context===null ? other.context===null : this.context.equals(other.context)) &&
                this.semanticContext.equals(other.semanticContext) &&
                this.precedenceFilterSuppressed===other.precedenceFilterSuppressed;
        }
    }

    hashCodeForConfigSet() {
        const hash = new Hash();
        hash.update(this.state.stateNumber, this.alt, this.semanticContext);
        return hash.finish();
    }

    equalsForConfigSet(other) {
        if (this === other) {
            return true;
        } else if (! (other instanceof ATNConfig)) {
            return false;
        } else {
            return this.state.stateNumber===other.state.stateNumber &&
                this.alt===other.alt &&
                this.semanticContext.equals(other.semanticContext);
        }
    }

    toString() {
        return "(" + this.state + "," + this.alt +
            (this.context!==null ? ",[" + this.context.toString() + "]" : "") +
            (this.semanticContext !== SemanticContext.NONE ?
                    ("," + this.semanticContext.toString())
                    : "") +
            (this.reachesIntoOuterContext>0 ?
                    (",up=" + this.reachesIntoOuterContext)
                    : "") + ")";
    }
}


class LexerATNConfig extends ATNConfig {
    constructor(params, config) {
        super(params, config);

        // This is the backing field for {@link //getLexerActionExecutor}.
        const lexerActionExecutor = params.lexerActionExecutor || null;
        this.lexerActionExecutor = lexerActionExecutor || (config!==null ? config.lexerActionExecutor : null);
        this.passedThroughNonGreedyDecision = config!==null ? this.checkNonGreedyDecision(config, this.state) : false;
        this.hashCodeForConfigSet = LexerATNConfig.prototype.hashCode;
        this.equalsForConfigSet = LexerATNConfig.prototype.equals;
        return this;
    }

    updateHashCode(hash) {
        hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext, this.passedThroughNonGreedyDecision, this.lexerActionExecutor);
    }

    equals(other) {
        return this === other ||
                (other instanceof LexerATNConfig &&
                this.passedThroughNonGreedyDecision == other.passedThroughNonGreedyDecision &&
                (this.lexerActionExecutor ? this.lexerActionExecutor.equals(other.lexerActionExecutor) : !other.lexerActionExecutor) &&
                super.equals(other));
    }

    checkNonGreedyDecision(source, target) {
        return source.passedThroughNonGreedyDecision ||
            (target instanceof DecisionState) && target.nonGreedy;
    }
}


module.exports.ATNConfig = ATNConfig;
module.exports.LexerATNConfig = LexerATNConfig;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js":
/*!************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const ATN = __webpack_require__(/*! ./ATN */ "./node_modules/antlr4/src/antlr4/atn/ATN.js");
const Utils = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/src/antlr4/Utils.js");
const {SemanticContext} = __webpack_require__(/*! ./SemanticContext */ "./node_modules/antlr4/src/antlr4/atn/SemanticContext.js");
const {merge} = __webpack_require__(/*! ./../PredictionContext */ "./node_modules/antlr4/src/antlr4/PredictionContext.js");

function hashATNConfig(c) {
	return c.hashCodeForConfigSet();
}

function equalATNConfigs(a, b) {
	if ( a===b ) {
		return true;
	} else if ( a===null || b===null ) {
		return false;
	} else
       return a.equalsForConfigSet(b);
 }

/**
 * Specialized {@link Set}{@code <}{@link ATNConfig}{@code >} that can track
 * info about the set, with support for combining similar configurations using a
 * graph-structured stack
 */
class ATNConfigSet {
	constructor(fullCtx) {
		/**
		 * The reason that we need this is because we don't want the hash map to use
		 * the standard hash code and equals. We need all configurations with the
		 * same
		 * {@code (s,i,_,semctx)} to be equal. Unfortunately, this key effectively
		 * doubles
		 * the number of objects associated with ATNConfigs. The other solution is
		 * to
		 * use a hash table that lets us specify the equals/hashcode operation.
		 * All configs but hashed by (s, i, _, pi) not including context. Wiped out
		 * when we go readonly as this set becomes a DFA state
		 */
		this.configLookup = new Utils.Set(hashATNConfig, equalATNConfigs);
		/**
		 * Indicates that this configuration set is part of a full context
		 * LL prediction. It will be used to determine how to merge $. With SLL
		 * it's a wildcard whereas it is not for LL context merge
		 */
		this.fullCtx = fullCtx === undefined ? true : fullCtx;
		/**
		 * Indicates that the set of configurations is read-only. Do not
		 * allow any code to manipulate the set; DFA states will point at
		 * the sets and they must not change. This does not protect the other
		 * fields; in particular, conflictingAlts is set after
		 * we've made this readonly
		 */
		this.readOnly = false;
		// Track the elements as they are added to the set; supports get(i)///
		this.configs = [];

		// TODO: these fields make me pretty uncomfortable but nice to pack up info
		// together, saves recomputation
		// TODO: can we track conflicts as they are added to save scanning configs
		// later?
		this.uniqueAlt = 0;
		this.conflictingAlts = null;

		/**
		 * Used in parser and lexer. In lexer, it indicates we hit a pred
		 * while computing a closure operation. Don't make a DFA state from this
		 */
		this.hasSemanticContext = false;
		this.dipsIntoOuterContext = false;

		this.cachedHashCode = -1;
	}

	/**
	 * Adding a new config means merging contexts with existing configs for
	 * {@code (s, i, pi, _)}, where {@code s} is the
	 * {@link ATNConfig//state}, {@code i} is the {@link ATNConfig//alt}, and
	 * {@code pi} is the {@link ATNConfig//semanticContext}. We use
	 * {@code (s,i,pi)} as key.
	 *
	 * <p>This method updates {@link //dipsIntoOuterContext} and
	 * {@link //hasSemanticContext} when necessary.</p>
	 */
	add(config, mergeCache) {
		if (mergeCache === undefined) {
			mergeCache = null;
		}
		if (this.readOnly) {
			throw "This set is readonly";
		}
		if (config.semanticContext !== SemanticContext.NONE) {
			this.hasSemanticContext = true;
		}
		if (config.reachesIntoOuterContext > 0) {
			this.dipsIntoOuterContext = true;
		}
		const existing = this.configLookup.add(config);
		if (existing === config) {
			this.cachedHashCode = -1;
			this.configs.push(config); // track order here
			return true;
		}
		// a previous (s,i,pi,_), merge with it and save result
		const rootIsWildcard = !this.fullCtx;
		const merged = merge(existing.context, config.context, rootIsWildcard, mergeCache);
		/**
		 * no need to check for existing.context, config.context in cache
		 * since only way to create new graphs is "call rule" and here. We
		 * cache at both places
		 */
		existing.reachesIntoOuterContext = Math.max( existing.reachesIntoOuterContext, config.reachesIntoOuterContext);
		// make sure to preserve the precedence filter suppression during the merge
		if (config.precedenceFilterSuppressed) {
			existing.precedenceFilterSuppressed = true;
		}
		existing.context = merged; // replace context; no need to alt mapping
		return true;
	}

	getStates() {
		const states = new Utils.Set();
		for (let i = 0; i < this.configs.length; i++) {
			states.add(this.configs[i].state);
		}
		return states;
	}

	getPredicates() {
		const preds = [];
		for (let i = 0; i < this.configs.length; i++) {
			const c = this.configs[i].semanticContext;
			if (c !== SemanticContext.NONE) {
				preds.push(c.semanticContext);
			}
		}
		return preds;
	}

	optimizeConfigs(interpreter) {
		if (this.readOnly) {
			throw "This set is readonly";
		}
		if (this.configLookup.length === 0) {
			return;
		}
		for (let i = 0; i < this.configs.length; i++) {
			const config = this.configs[i];
			config.context = interpreter.getCachedContext(config.context);
		}
	}

	addAll(coll) {
		for (let i = 0; i < coll.length; i++) {
			this.add(coll[i]);
		}
		return false;
	}

	equals(other) {
		return this === other ||
			(other instanceof ATNConfigSet &&
			Utils.equalArrays(this.configs, other.configs) &&
			this.fullCtx === other.fullCtx &&
			this.uniqueAlt === other.uniqueAlt &&
			this.conflictingAlts === other.conflictingAlts &&
			this.hasSemanticContext === other.hasSemanticContext &&
			this.dipsIntoOuterContext === other.dipsIntoOuterContext);
	}

	hashCode() {
		const hash = new Utils.Hash();
		hash.update(this.configs);
		return hash.finish();
	}

	updateHashCode(hash) {
		if (this.readOnly) {
			if (this.cachedHashCode === -1) {
				this.cachedHashCode = this.hashCode();
			}
			hash.update(this.cachedHashCode);
		} else {
			hash.update(this.hashCode());
		}
	}

	isEmpty() {
		return this.configs.length === 0;
	}

	contains(item) {
		if (this.configLookup === null) {
			throw "This method is not implemented for readonly sets.";
		}
		return this.configLookup.contains(item);
	}

	containsFast(item) {
		if (this.configLookup === null) {
			throw "This method is not implemented for readonly sets.";
		}
		return this.configLookup.containsFast(item);
	}

	clear() {
		if (this.readOnly) {
			throw "This set is readonly";
		}
		this.configs = [];
		this.cachedHashCode = -1;
		this.configLookup = new Utils.Set();
	}

	setReadonly(readOnly) {
		this.readOnly = readOnly;
		if (readOnly) {
			this.configLookup = null; // can't mod, no need for lookup cache
		}
	}

	toString() {
		return Utils.arrayToString(this.configs) +
			(this.hasSemanticContext ? ",hasSemanticContext=" + this.hasSemanticContext : "") +
			(this.uniqueAlt !== ATN.INVALID_ALT_NUMBER ? ",uniqueAlt=" + this.uniqueAlt : "") +
			(this.conflictingAlts !== null ? ",conflictingAlts=" + this.conflictingAlts : "") +
			(this.dipsIntoOuterContext ? ",dipsIntoOuterContext" : "");
	}

	get items(){
		return this.configs;
	}

	get length(){
		return this.configs.length;
	}
}


class OrderedATNConfigSet extends ATNConfigSet {
	constructor() {
		super();
		this.configLookup = new Utils.Set();
	}
}

module.exports = {
	ATNConfigSet,
	OrderedATNConfigSet
}


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ATNDeserializationOptions.js":
/*!*************************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ATNDeserializationOptions.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

class ATNDeserializationOptions {
	constructor(copyFrom) {
		if(copyFrom===undefined) {
			copyFrom = null;
		}
		this.readOnly = false;
		this.verifyATN = copyFrom===null ? true : copyFrom.verifyATN;
		this.generateRuleBypassTransitions = copyFrom===null ? false : copyFrom.generateRuleBypassTransitions;
	}
}

ATNDeserializationOptions.defaultOptions = new ATNDeserializationOptions();
ATNDeserializationOptions.defaultOptions.readOnly = true;

//    def __setattr__(self, key, value):
//        if key!="readOnly" and self.readOnly:
//            raise Exception("The object is read only.")
//        super(type(self), self).__setattr__(key,value)

module.exports = ATNDeserializationOptions


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ATNDeserializer.js":
/*!***************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ATNDeserializer.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = __webpack_require__(/*! ./../Token */ "./node_modules/antlr4/src/antlr4/Token.js");
const ATN = __webpack_require__(/*! ./ATN */ "./node_modules/antlr4/src/antlr4/atn/ATN.js");
const ATNType = __webpack_require__(/*! ./ATNType */ "./node_modules/antlr4/src/antlr4/atn/ATNType.js");

const {
    ATNState,
    BasicState,
    DecisionState,
    BlockStartState,
    BlockEndState,
    LoopEndState,
    RuleStartState,
    RuleStopState,
    TokensStartState,
    PlusLoopbackState,
    StarLoopbackState,
    StarLoopEntryState,
    PlusBlockStartState,
    StarBlockStartState,
    BasicBlockStartState
} = __webpack_require__(/*! ./ATNState */ "./node_modules/antlr4/src/antlr4/atn/ATNState.js");

const {
    Transition,
    AtomTransition,
    SetTransition,
    NotSetTransition,
    RuleTransition,
    RangeTransition,
    ActionTransition,
    EpsilonTransition,
    WildcardTransition,
    PredicateTransition,
    PrecedencePredicateTransition
} = __webpack_require__(/*! ./Transition */ "./node_modules/antlr4/src/antlr4/atn/Transition.js")

const {IntervalSet} = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/src/antlr4/IntervalSet.js");
const ATNDeserializationOptions = __webpack_require__(/*! ./ATNDeserializationOptions */ "./node_modules/antlr4/src/antlr4/atn/ATNDeserializationOptions.js");

const {
    LexerActionType,
    LexerSkipAction,
    LexerChannelAction,
    LexerCustomAction,
    LexerMoreAction,
    LexerTypeAction,
    LexerPushModeAction,
    LexerPopModeAction,
    LexerModeAction,
} = __webpack_require__(/*! ./LexerAction */ "./node_modules/antlr4/src/antlr4/atn/LexerAction.js");

// This is the earliest supported serialized UUID.
// stick to serialized version for now, we don't need a UUID instance
const BASE_SERIALIZED_UUID = "AADB8D7E-AEEF-4415-AD2B-8204D6CF042E";

//
// This UUID indicates the serialized ATN contains two sets of
// IntervalSets, where the second set's values are encoded as
// 32-bit integers to support the full Unicode SMP range up to U+10FFFF.
//
const ADDED_UNICODE_SMP = "59627784-3BE5-417A-B9EB-8131A7286089";

// This list contains all of the currently supported UUIDs, ordered by when
// the feature first appeared in this branch.
const SUPPORTED_UUIDS = [ BASE_SERIALIZED_UUID, ADDED_UNICODE_SMP ];

const SERIALIZED_VERSION = 3;

// This is the current serialized UUID.
const SERIALIZED_UUID = ADDED_UNICODE_SMP;

function initArray( length, value) {
	const tmp = [];
	tmp[length-1] = value;
	return tmp.map(function(i) {return value;});
}

class ATNDeserializer {
    constructor(options) {

        if ( options=== undefined || options === null ) {
            options = ATNDeserializationOptions.defaultOptions;
        }
        this.deserializationOptions = options;
        this.stateFactories = null;
        this.actionFactories = null;
    }

    /**
     * Determines if a particular serialized representation of an ATN supports
     * a particular feature, identified by the {@link UUID} used for serializing
     * the ATN at the time the feature was first introduced.
     *
     * @param feature The {@link UUID} marking the first time the feature was
     * supported in the serialized ATN.
     * @param actualUuid The {@link UUID} of the actual serialized ATN which is
     * currently being deserialized.
     * @return {@code true} if the {@code actualUuid} value represents a
     * serialized ATN at or after the feature identified by {@code feature} was
     * introduced; otherwise, {@code false}.
    */
    isFeatureSupported(feature, actualUuid) {
        const idx1 = SUPPORTED_UUIDS.indexOf(feature);
        if (idx1<0) {
            return false;
        }
        const idx2 = SUPPORTED_UUIDS.indexOf(actualUuid);
        return idx2 >= idx1;
    }

    deserialize(data) {
        this.reset(data);
        this.checkVersion();
        this.checkUUID();
        const atn = this.readATN();
        this.readStates(atn);
        this.readRules(atn);
        this.readModes(atn);
        const sets = [];
        // First, deserialize sets with 16-bit arguments <= U+FFFF.
        this.readSets(atn, sets, this.readInt.bind(this));
        // Next, if the ATN was serialized with the Unicode SMP feature,
        // deserialize sets with 32-bit arguments <= U+10FFFF.
        if (this.isFeatureSupported(ADDED_UNICODE_SMP, this.uuid)) {
            this.readSets(atn, sets, this.readInt32.bind(this));
        }
        this.readEdges(atn, sets);
        this.readDecisions(atn);
        this.readLexerActions(atn);
        this.markPrecedenceDecisions(atn);
        this.verifyATN(atn);
        if (this.deserializationOptions.generateRuleBypassTransitions && atn.grammarType === ATNType.PARSER ) {
            this.generateRuleBypassTransitions(atn);
            // re-verify after modification
            this.verifyATN(atn);
        }
        return atn;
    }

    reset(data) {
        const adjust = function(c) {
            const v = c.charCodeAt(0);
            return v>1  ? v-2 : v + 65534;
        };
        const temp = data.split("").map(adjust);
        // don't adjust the first value since that's the version number
        temp[0] = data.charCodeAt(0);
        this.data = temp;
        this.pos = 0;
    }

    checkVersion() {
        const version = this.readInt();
        if ( version !== SERIALIZED_VERSION ) {
            throw ("Could not deserialize ATN with version " + version + " (expected " + SERIALIZED_VERSION + ").");
        }
    }

    checkUUID() {
        const uuid = this.readUUID();
        if (SUPPORTED_UUIDS.indexOf(uuid)<0) {
            throw ("Could not deserialize ATN with UUID: " + uuid +
                            " (expected " + SERIALIZED_UUID + " or a legacy UUID).", uuid, SERIALIZED_UUID);
        }
        this.uuid = uuid;
    }

    readATN() {
        const grammarType = this.readInt();
        const maxTokenType = this.readInt();
        return new ATN(grammarType, maxTokenType);
    }

    readStates(atn) {
        let j, pair, stateNumber;
        const  loopBackStateNumbers = [];
        const  endStateNumbers = [];
        const  nstates = this.readInt();
        for(let i=0; i<nstates; i++) {
            const  stype = this.readInt();
            // ignore bad type of states
            if (stype===ATNState.INVALID_TYPE) {
                atn.addState(null);
                continue;
            }
            let ruleIndex = this.readInt();
            if (ruleIndex === 0xFFFF) {
                ruleIndex = -1;
            }
            const  s = this.stateFactory(stype, ruleIndex);
            if (stype === ATNState.LOOP_END) { // special case
                const  loopBackStateNumber = this.readInt();
                loopBackStateNumbers.push([s, loopBackStateNumber]);
            } else if(s instanceof BlockStartState) {
                const  endStateNumber = this.readInt();
                endStateNumbers.push([s, endStateNumber]);
            }
            atn.addState(s);
        }
        // delay the assignment of loop back and end states until we know all the
        // state instances have been initialized
        for (j=0; j<loopBackStateNumbers.length; j++) {
            pair = loopBackStateNumbers[j];
            pair[0].loopBackState = atn.states[pair[1]];
        }

        for (j=0; j<endStateNumbers.length; j++) {
            pair = endStateNumbers[j];
            pair[0].endState = atn.states[pair[1]];
        }

        let numNonGreedyStates = this.readInt();
        for (j=0; j<numNonGreedyStates; j++) {
            stateNumber = this.readInt();
            atn.states[stateNumber].nonGreedy = true;
        }

        let numPrecedenceStates = this.readInt();
        for (j=0; j<numPrecedenceStates; j++) {
            stateNumber = this.readInt();
            atn.states[stateNumber].isPrecedenceRule = true;
        }
    }

    readRules(atn) {
        let i;
        const nrules = this.readInt();
        if (atn.grammarType === ATNType.LEXER ) {
            atn.ruleToTokenType = initArray(nrules, 0);
        }
        atn.ruleToStartState = initArray(nrules, 0);
        for (i=0; i<nrules; i++) {
            const s = this.readInt();
            atn.ruleToStartState[i] = atn.states[s];
            if ( atn.grammarType === ATNType.LEXER ) {
                let tokenType = this.readInt();
                if (tokenType === 0xFFFF) {
                    tokenType = Token.EOF;
                }
                atn.ruleToTokenType[i] = tokenType;
            }
        }
        atn.ruleToStopState = initArray(nrules, 0);
        for (i=0; i<atn.states.length; i++) {
            const state = atn.states[i];
            if (!(state instanceof RuleStopState)) {
                continue;
            }
            atn.ruleToStopState[state.ruleIndex] = state;
            atn.ruleToStartState[state.ruleIndex].stopState = state;
        }
    }

    readModes(atn) {
        const nmodes = this.readInt();
        for (let i=0; i<nmodes; i++) {
            let s = this.readInt();
            atn.modeToStartState.push(atn.states[s]);
        }
    }

    readSets(atn, sets, readUnicode) {
        const m = this.readInt();
        for (let i=0; i<m; i++) {
            const iset = new IntervalSet();
            sets.push(iset);
            const n = this.readInt();
            const containsEof = this.readInt();
            if (containsEof!==0) {
                iset.addOne(-1);
            }
            for (let j=0; j<n; j++) {
                const i1 = readUnicode();
                const i2 = readUnicode();
                iset.addRange(i1, i2);
            }
        }
    }

    readEdges(atn, sets) {
        let i, j, state, trans, target;
        const nedges = this.readInt();
        for (i=0; i<nedges; i++) {
            const src = this.readInt();
            const trg = this.readInt();
            const ttype = this.readInt();
            const arg1 = this.readInt();
            const arg2 = this.readInt();
            const arg3 = this.readInt();
            trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);
            const srcState = atn.states[src];
            srcState.addTransition(trans);
        }
        // edges for rule stop states can be derived, so they aren't serialized
        for (i=0; i<atn.states.length; i++) {
            state = atn.states[i];
            for (j=0; j<state.transitions.length; j++) {
                const t = state.transitions[j];
                if (!(t instanceof RuleTransition)) {
                    continue;
                }
                let outermostPrecedenceReturn = -1;
                if (atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule) {
                    if (t.precedence === 0) {
                        outermostPrecedenceReturn = t.target.ruleIndex;
                    }
                }

                trans = new EpsilonTransition(t.followState, outermostPrecedenceReturn);
                atn.ruleToStopState[t.target.ruleIndex].addTransition(trans);
            }
        }

        for (i=0; i<atn.states.length; i++) {
            state = atn.states[i];
            if (state instanceof BlockStartState) {
                // we need to know the end state to set its start state
                if (state.endState === null) {
                    throw ("IllegalState");
                }
                // block end states can only be associated to a single block start
                // state
                if ( state.endState.startState !== null) {
                    throw ("IllegalState");
                }
                state.endState.startState = state;
            }
            if (state instanceof PlusLoopbackState) {
                for (j=0; j<state.transitions.length; j++) {
                    target = state.transitions[j].target;
                    if (target instanceof PlusBlockStartState) {
                        target.loopBackState = state;
                    }
                }
            } else if (state instanceof StarLoopbackState) {
                for (j=0; j<state.transitions.length; j++) {
                    target = state.transitions[j].target;
                    if (target instanceof StarLoopEntryState) {
                        target.loopBackState = state;
                    }
                }
            }
        }
    }

    readDecisions(atn) {
        const ndecisions = this.readInt();
        for (let i=0; i<ndecisions; i++) {
            const s = this.readInt();
            const decState = atn.states[s];
            atn.decisionToState.push(decState);
            decState.decision = i;
        }
    }

    readLexerActions(atn) {
        if (atn.grammarType === ATNType.LEXER) {
            const count = this.readInt();
            atn.lexerActions = initArray(count, null);
            for (let i=0; i<count; i++) {
                const actionType = this.readInt();
                let data1 = this.readInt();
                if (data1 === 0xFFFF) {
                    data1 = -1;
                }
                let data2 = this.readInt();
                if (data2 === 0xFFFF) {
                    data2 = -1;
                }

                atn.lexerActions[i] = this.lexerActionFactory(actionType, data1, data2);
            }
        }
    }

    generateRuleBypassTransitions(atn) {
        let i;
        const count = atn.ruleToStartState.length;
        for(i=0; i<count; i++) {
            atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;
        }
        for(i=0; i<count; i++) {
            this.generateRuleBypassTransition(atn, i);
        }
    }

    generateRuleBypassTransition(atn, idx) {
        let i, state;
        const bypassStart = new BasicBlockStartState();
        bypassStart.ruleIndex = idx;
        atn.addState(bypassStart);

        const bypassStop = new BlockEndState();
        bypassStop.ruleIndex = idx;
        atn.addState(bypassStop);

        bypassStart.endState = bypassStop;
        atn.defineDecisionState(bypassStart);

        bypassStop.startState = bypassStart;

        let excludeTransition = null;
        let endState = null;

        if (atn.ruleToStartState[idx].isPrecedenceRule) {
            // wrap from the beginning of the rule to the StarLoopEntryState
            endState = null;
            for(i=0; i<atn.states.length; i++) {
                state = atn.states[i];
                if (this.stateIsEndStateFor(state, idx)) {
                    endState = state;
                    excludeTransition = state.loopBackState.transitions[0];
                    break;
                }
            }
            if (excludeTransition === null) {
                throw ("Couldn't identify final state of the precedence rule prefix section.");
            }
        } else {
            endState = atn.ruleToStopState[idx];
        }

        // all non-excluded transitions that currently target end state need to
        // target blockEnd instead
        for(i=0; i<atn.states.length; i++) {
            state = atn.states[i];
            for(let j=0; j<state.transitions.length; j++) {
                const transition = state.transitions[j];
                if (transition === excludeTransition) {
                    continue;
                }
                if (transition.target === endState) {
                    transition.target = bypassStop;
                }
            }
        }

        // all transitions leaving the rule start state need to leave blockStart
        // instead
        const ruleToStartState = atn.ruleToStartState[idx];
        const count = ruleToStartState.transitions.length;
        while ( count > 0) {
            bypassStart.addTransition(ruleToStartState.transitions[count-1]);
            ruleToStartState.transitions = ruleToStartState.transitions.slice(-1);
        }
        // link the new states
        atn.ruleToStartState[idx].addTransition(new EpsilonTransition(bypassStart));
        bypassStop.addTransition(new EpsilonTransition(endState));

        const matchState = new BasicState();
        atn.addState(matchState);
        matchState.addTransition(new AtomTransition(bypassStop, atn.ruleToTokenType[idx]));
        bypassStart.addTransition(new EpsilonTransition(matchState));
    }

    stateIsEndStateFor(state, idx) {
        if ( state.ruleIndex !== idx) {
            return null;
        }
        if (!( state instanceof StarLoopEntryState)) {
            return null;
        }
        const maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
        if (!( maybeLoopEndState instanceof LoopEndState)) {
            return null;
        }
        if (maybeLoopEndState.epsilonOnlyTransitions &&
            (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {
            return state;
        } else {
            return null;
        }
    }

    /**
     * Analyze the {@link StarLoopEntryState} states in the specified ATN to set
     * the {@link StarLoopEntryState//isPrecedenceDecision} field to the
     * correct value.
     * @param atn The ATN.
     */
    markPrecedenceDecisions(atn) {
        for(let i=0; i<atn.states.length; i++) {
            const state = atn.states[i];
            if (!( state instanceof StarLoopEntryState)) {
                continue;
            }
            // We analyze the ATN to determine if this ATN decision state is the
            // decision for the closure block that determines whether a
            // precedence rule should continue or complete.
            if ( atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {
                const maybeLoopEndState = state.transitions[state.transitions.length - 1].target;
                if (maybeLoopEndState instanceof LoopEndState) {
                    if ( maybeLoopEndState.epsilonOnlyTransitions &&
                            (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {
                        state.isPrecedenceDecision = true;
                    }
                }
            }
        }
    }

    verifyATN(atn) {
        if (!this.deserializationOptions.verifyATN) {
            return;
        }
        // verify assumptions
        for(let i=0; i<atn.states.length; i++) {
            const state = atn.states[i];
            if (state === null) {
                continue;
            }
            this.checkCondition(state.epsilonOnlyTransitions || state.transitions.length <= 1);
            if (state instanceof PlusBlockStartState) {
                this.checkCondition(state.loopBackState !== null);
            } else  if (state instanceof StarLoopEntryState) {
                this.checkCondition(state.loopBackState !== null);
                this.checkCondition(state.transitions.length === 2);
                if (state.transitions[0].target instanceof StarBlockStartState) {
                    this.checkCondition(state.transitions[1].target instanceof LoopEndState);
                    this.checkCondition(!state.nonGreedy);
                } else if (state.transitions[0].target instanceof LoopEndState) {
                    this.checkCondition(state.transitions[1].target instanceof StarBlockStartState);
                    this.checkCondition(state.nonGreedy);
                } else {
                    throw("IllegalState");
                }
            } else if (state instanceof StarLoopbackState) {
                this.checkCondition(state.transitions.length === 1);
                this.checkCondition(state.transitions[0].target instanceof StarLoopEntryState);
            } else if (state instanceof LoopEndState) {
                this.checkCondition(state.loopBackState !== null);
            } else if (state instanceof RuleStartState) {
                this.checkCondition(state.stopState !== null);
            } else if (state instanceof BlockStartState) {
                this.checkCondition(state.endState !== null);
            } else if (state instanceof BlockEndState) {
                this.checkCondition(state.startState !== null);
            } else if (state instanceof DecisionState) {
                this.checkCondition(state.transitions.length <= 1 || state.decision >= 0);
            } else {
                this.checkCondition(state.transitions.length <= 1 || (state instanceof RuleStopState));
            }
        }
    }

    checkCondition(condition, message) {
        if (!condition) {
            if (message === undefined || message===null) {
                message = "IllegalState";
            }
            throw (message);
        }
    }

    readInt() {
        return this.data[this.pos++];
    }

    readInt32() {
        const low = this.readInt();
        const high = this.readInt();
        return low | (high << 16);
    }

    readLong() {
        const low = this.readInt32();
        const high = this.readInt32();
        return (low & 0x00000000FFFFFFFF) | (high << 32);
    }

    readUUID() {
        const bb = [];
        for(let i=7;i>=0;i--) {
            const int = this.readInt();
            /* jshint bitwise: false */
            bb[(2*i)+1] = int & 0xFF;
            bb[2*i] = (int >> 8) & 0xFF;
        }
        return byteToHex[bb[0]] + byteToHex[bb[1]] +
        byteToHex[bb[2]] + byteToHex[bb[3]] + '-' +
        byteToHex[bb[4]] + byteToHex[bb[5]] + '-' +
        byteToHex[bb[6]] + byteToHex[bb[7]] + '-' +
        byteToHex[bb[8]] + byteToHex[bb[9]] + '-' +
        byteToHex[bb[10]] + byteToHex[bb[11]] +
        byteToHex[bb[12]] + byteToHex[bb[13]] +
        byteToHex[bb[14]] + byteToHex[bb[15]];
    }

    edgeFactory(atn, type, src, trg, arg1, arg2, arg3, sets) {
        const target = atn.states[trg];
        switch(type) {
        case Transition.EPSILON:
            return new EpsilonTransition(target);
        case Transition.RANGE:
            return arg3 !== 0 ? new RangeTransition(target, Token.EOF, arg2) : new RangeTransition(target, arg1, arg2);
        case Transition.RULE:
            return new RuleTransition(atn.states[arg1], arg2, arg3, target);
        case Transition.PREDICATE:
            return new PredicateTransition(target, arg1, arg2, arg3 !== 0);
        case Transition.PRECEDENCE:
            return new PrecedencePredicateTransition(target, arg1);
        case Transition.ATOM:
            return arg3 !== 0 ? new AtomTransition(target, Token.EOF) : new AtomTransition(target, arg1);
        case Transition.ACTION:
            return new ActionTransition(target, arg1, arg2, arg3 !== 0);
        case Transition.SET:
            return new SetTransition(target, sets[arg1]);
        case Transition.NOT_SET:
            return new NotSetTransition(target, sets[arg1]);
        case Transition.WILDCARD:
            return new WildcardTransition(target);
        default:
            throw "The specified transition type: " + type + " is not valid.";
        }
    }

    stateFactory(type, ruleIndex) {
        if (this.stateFactories === null) {
            const sf = [];
            sf[ATNState.INVALID_TYPE] = null;
            sf[ATNState.BASIC] = () => new BasicState();
            sf[ATNState.RULE_START] = () => new RuleStartState();
            sf[ATNState.BLOCK_START] = () => new BasicBlockStartState();
            sf[ATNState.PLUS_BLOCK_START] = () => new PlusBlockStartState();
            sf[ATNState.STAR_BLOCK_START] = () => new StarBlockStartState();
            sf[ATNState.TOKEN_START] = () => new TokensStartState();
            sf[ATNState.RULE_STOP] = () => new RuleStopState();
            sf[ATNState.BLOCK_END] = () => new BlockEndState();
            sf[ATNState.STAR_LOOP_BACK] = () => new StarLoopbackState();
            sf[ATNState.STAR_LOOP_ENTRY] = () => new StarLoopEntryState();
            sf[ATNState.PLUS_LOOP_BACK] = () => new PlusLoopbackState();
            sf[ATNState.LOOP_END] = () => new LoopEndState();
            this.stateFactories = sf;
        }
        if (type>this.stateFactories.length || this.stateFactories[type] === null) {
            throw("The specified state type " + type + " is not valid.");
        } else {
            const s = this.stateFactories[type]();
            if (s!==null) {
                s.ruleIndex = ruleIndex;
                return s;
            }
        }
    }

    lexerActionFactory(type, data1, data2) {
        if (this.actionFactories === null) {
            const af = [];
            af[LexerActionType.CHANNEL] = (data1, data2) => new LexerChannelAction(data1);
            af[LexerActionType.CUSTOM] = (data1, data2) => new LexerCustomAction(data1, data2);
            af[LexerActionType.MODE] = (data1, data2) => new LexerModeAction(data1);
            af[LexerActionType.MORE] = (data1, data2) => LexerMoreAction.INSTANCE;
            af[LexerActionType.POP_MODE] = (data1, data2) => LexerPopModeAction.INSTANCE;
            af[LexerActionType.PUSH_MODE] = (data1, data2) => new LexerPushModeAction(data1);
            af[LexerActionType.SKIP] = (data1, data2) => LexerSkipAction.INSTANCE;
            af[LexerActionType.TYPE] = (data1, data2) => new LexerTypeAction(data1);
            this.actionFactories = af;
        }
        if (type>this.actionFactories.length || this.actionFactories[type] === null) {
            throw("The specified lexer action type " + type + " is not valid.");
        } else {
            return this.actionFactories[type](data1, data2);
        }
    }
}

function createByteToHex() {
	const bth = [];
	for (let i = 0; i < 256; i++) {
		bth[i] = (i + 0x100).toString(16).substr(1).toUpperCase();
	}
	return bth;
}

const byteToHex = createByteToHex();


module.exports = ATNDeserializer;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ATNSimulator.js":
/*!************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ATNSimulator.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {DFAState} = __webpack_require__(/*! ./../dfa/DFAState */ "./node_modules/antlr4/src/antlr4/dfa/DFAState.js");
const {ATNConfigSet} = __webpack_require__(/*! ./ATNConfigSet */ "./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js");
const {getCachedPredictionContext} = __webpack_require__(/*! ./../PredictionContext */ "./node_modules/antlr4/src/antlr4/PredictionContext.js");
const {Map} = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/src/antlr4/Utils.js");

class ATNSimulator {
    constructor(atn, sharedContextCache) {
        /**
         * The context cache maps all PredictionContext objects that are ==
         * to a single cached copy. This cache is shared across all contexts
         * in all ATNConfigs in all DFA states.  We rebuild each ATNConfigSet
         * to use only cached nodes/graphs in addDFAState(). We don't want to
         * fill this during closure() since there are lots of contexts that
         * pop up but are not used ever again. It also greatly slows down closure().
         *
         * <p>This cache makes a huge difference in memory and a little bit in speed.
         * For the Java grammar on java.*, it dropped the memory requirements
         * at the end from 25M to 16M. We don't store any of the full context
         * graphs in the DFA because they are limited to local context only,
         * but apparently there's a lot of repetition there as well. We optimize
         * the config contexts before storing the config set in the DFA states
         * by literally rebuilding them with cached subgraphs only.</p>
         *
         * <p>I tried a cache for use during closure operations, that was
         * whacked after each adaptivePredict(). It cost a little bit
         * more time I think and doesn't save on the overall footprint
         * so it's not worth the complexity.</p>
         */
        this.atn = atn;
        this.sharedContextCache = sharedContextCache;
        return this;
    }

    getCachedContext(context) {
        if (this.sharedContextCache ===null) {
            return context;
        }
        const visited = new Map();
        return getCachedPredictionContext(context, this.sharedContextCache, visited);
    }
}

// Must distinguish between missing edge and edge we know leads nowhere///
ATNSimulator.ERROR = new DFAState(0x7FFFFFFF, new ATNConfigSet());


module.exports = ATNSimulator;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ATNState.js":
/*!********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ATNState.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const INITIAL_NUM_TRANSITIONS = 4;

/**
 * The following images show the relation of states and
 * {@link ATNState//transitions} for various grammar constructs.
 *
 * <ul>
 *
 * <li>Solid edges marked with an &//0949; indicate a required
 * {@link EpsilonTransition}.</li>
 *
 * <li>Dashed edges indicate locations where any transition derived from
 * {@link Transition} might appear.</li>
 *
 * <li>Dashed nodes are place holders for either a sequence of linked
 * {@link BasicState} states or the inclusion of a block representing a nested
 * construct in one of the forms below.</li>
 *
 * <li>Nodes showing multiple outgoing alternatives with a {@code ...} support
 * any number of alternatives (one or more). Nodes without the {@code ...} only
 * support the exact number of alternatives shown in the diagram.</li>
 *
 * </ul>
 *
 * <h2>Basic Blocks</h2>
 *
 * <h3>Rule</h3>
 *
 * <embed src="images/Rule.svg" type="image/svg+xml"/>
 *
 * <h3>Block of 1 or more alternatives</h3>
 *
 * <embed src="images/Block.svg" type="image/svg+xml"/>
 *
 * <h2>Greedy Loops</h2>
 *
 * <h3>Greedy Closure: {@code (...)*}</h3>
 *
 * <embed src="images/ClosureGreedy.svg" type="image/svg+xml"/>
 *
 * <h3>Greedy Positive Closure: {@code (...)+}</h3>
 *
 * <embed src="images/PositiveClosureGreedy.svg" type="image/svg+xml"/>
 *
 * <h3>Greedy Optional: {@code (...)?}</h3>
 *
 * <embed src="images/OptionalGreedy.svg" type="image/svg+xml"/>
 *
 * <h2>Non-Greedy Loops</h2>
 *
 * <h3>Non-Greedy Closure: {@code (...)*?}</h3>
 *
 * <embed src="images/ClosureNonGreedy.svg" type="image/svg+xml"/>
 *
 * <h3>Non-Greedy Positive Closure: {@code (...)+?}</h3>
 *
 * <embed src="images/PositiveClosureNonGreedy.svg" type="image/svg+xml"/>
 *
 * <h3>Non-Greedy Optional: {@code (...)??}</h3>
 *
 * <embed src="images/OptionalNonGreedy.svg" type="image/svg+xml"/>
 */
class ATNState {
    constructor() {
        // Which ATN are we in?
        this.atn = null;
        this.stateNumber = ATNState.INVALID_STATE_NUMBER;
        this.stateType = null;
        this.ruleIndex = 0; // at runtime, we don't have Rule objects
        this.epsilonOnlyTransitions = false;
        // Track the transitions emanating from this ATN state.
        this.transitions = [];
        // Used to cache lookahead during parsing, not used during construction
        this.nextTokenWithinRule = null;
    }

    toString() {
        return this.stateNumber;
    }

    equals(other) {
        if (other instanceof ATNState) {
            return this.stateNumber===other.stateNumber;
        } else {
            return false;
        }
    }

    isNonGreedyExitState() {
        return false;
    }

    addTransition(trans, index) {
        if(index===undefined) {
            index = -1;
        }
        if (this.transitions.length===0) {
            this.epsilonOnlyTransitions = trans.isEpsilon;
        } else if(this.epsilonOnlyTransitions !== trans.isEpsilon) {
            this.epsilonOnlyTransitions = false;
        }
        if (index===-1) {
            this.transitions.push(trans);
        } else {
            this.transitions.splice(index, 1, trans);
        }
    }
}

// constants for serialization
ATNState.INVALID_TYPE = 0;
ATNState.BASIC = 1;
ATNState.RULE_START = 2;
ATNState.BLOCK_START = 3;
ATNState.PLUS_BLOCK_START = 4;
ATNState.STAR_BLOCK_START = 5;
ATNState.TOKEN_START = 6;
ATNState.RULE_STOP = 7;
ATNState.BLOCK_END = 8;
ATNState.STAR_LOOP_BACK = 9;
ATNState.STAR_LOOP_ENTRY = 10;
ATNState.PLUS_LOOP_BACK = 11;
ATNState.LOOP_END = 12;

ATNState.serializationNames = [
            "INVALID",
            "BASIC",
            "RULE_START",
            "BLOCK_START",
            "PLUS_BLOCK_START",
            "STAR_BLOCK_START",
            "TOKEN_START",
            "RULE_STOP",
            "BLOCK_END",
            "STAR_LOOP_BACK",
            "STAR_LOOP_ENTRY",
            "PLUS_LOOP_BACK",
            "LOOP_END" ];

ATNState.INVALID_STATE_NUMBER = -1;


class BasicState extends ATNState {
    constructor() {
        super();
        this.stateType = ATNState.BASIC;
    }
}

class DecisionState extends ATNState {
    constructor() {
        super();
        this.decision = -1;
        this.nonGreedy = false;
        return this;
    }
}

/**
 *  The start of a regular {@code (...)} block
 */
class BlockStartState extends DecisionState {
    constructor() {
        super();
        this.endState = null;
        return this;
    }
}

class BasicBlockStartState extends BlockStartState {
    constructor() {
        super();
        this.stateType = ATNState.BLOCK_START;
        return this;
    }
}

/**
 * Terminal node of a simple {@code (a|b|c)} block
 */
class BlockEndState extends ATNState {
    constructor() {
        super();
        this.stateType = ATNState.BLOCK_END;
        this.startState = null;
        return this;
    }
}

/**
 * The last node in the ATN for a rule, unless that rule is the start symbol.
 * In that case, there is one transition to EOF. Later, we might encode
 * references to all calls to this rule to compute FOLLOW sets for
 * error handling
 */
class RuleStopState extends ATNState {
    constructor() {
        super();
        this.stateType = ATNState.RULE_STOP;
        return this;
    }
}

class RuleStartState extends ATNState {
    constructor() {
        super();
        this.stateType = ATNState.RULE_START;
        this.stopState = null;
        this.isPrecedenceRule = false;
        return this;
    }
}

/**
 * Decision state for {@code A+} and {@code (A|B)+}.  It has two transitions:
 * one to the loop back to start of the block and one to exit.
 */
class PlusLoopbackState extends DecisionState {
    constructor() {
        super();
        this.stateType = ATNState.PLUS_LOOP_BACK;
        return this;
    }
}

/**
 * Start of {@code (A|B|...)+} loop. Technically a decision state, but
 * we don't use for code generation; somebody might need it, so I'm defining
 * it for completeness. In reality, the {@link PlusLoopbackState} node is the
 * real decision-making note for {@code A+}
 */
class PlusBlockStartState extends BlockStartState {
    constructor() {
        super();
        this.stateType = ATNState.PLUS_BLOCK_START;
        this.loopBackState = null;
        return this;
    }
}

/**
 * The block that begins a closure loop
 */
class StarBlockStartState extends BlockStartState {
    constructor() {
        super();
        this.stateType = ATNState.STAR_BLOCK_START;
        return this;
    }
}

class StarLoopbackState extends ATNState {
    constructor() {
        super();
        this.stateType = ATNState.STAR_LOOP_BACK;
        return this;
    }
}

class StarLoopEntryState extends DecisionState {
    constructor() {
        super();
        this.stateType = ATNState.STAR_LOOP_ENTRY;
        this.loopBackState = null;
        // Indicates whether this state can benefit from a precedence DFA during SLL decision making.
        this.isPrecedenceDecision = null;
        return this;
    }
}

/**
 * Mark the end of a * or + loop
 */
class LoopEndState extends ATNState {
    constructor() {
        super();
        this.stateType = ATNState.LOOP_END;
        this.loopBackState = null;
        return this;
    }
}

/**
 * The Tokens rule start state linking to each lexer rule start state
 */
class TokensStartState extends DecisionState {
    constructor() {
        super();
        this.stateType = ATNState.TOKEN_START;
        return this;
    }
}

module.exports = {
    ATNState,
    BasicState,
    DecisionState,
    BlockStartState,
    BlockEndState,
    LoopEndState,
    RuleStartState,
    RuleStopState,
    TokensStartState,
    PlusLoopbackState,
    StarLoopbackState,
    StarLoopEntryState,
    PlusBlockStartState,
    StarBlockStartState,
    BasicBlockStartState
}


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ATNType.js":
/*!*******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ATNType.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/**
 * Represents the type of recognizer an ATN applies to
 */
module.exports = {
    LEXER: 0,
    PARSER: 1
};



/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/LexerATNSimulator.js":
/*!*****************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/LexerATNSimulator.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = __webpack_require__(/*! ./../Token */ "./node_modules/antlr4/src/antlr4/Token.js");
const Lexer = __webpack_require__(/*! ./../Lexer */ "./node_modules/antlr4/src/antlr4/Lexer.js");
const ATN = __webpack_require__(/*! ./ATN */ "./node_modules/antlr4/src/antlr4/atn/ATN.js");
const ATNSimulator = __webpack_require__(/*! ./ATNSimulator */ "./node_modules/antlr4/src/antlr4/atn/ATNSimulator.js");
const {DFAState} = __webpack_require__(/*! ./../dfa/DFAState */ "./node_modules/antlr4/src/antlr4/dfa/DFAState.js");
const {OrderedATNConfigSet} = __webpack_require__(/*! ./ATNConfigSet */ "./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js");
const {PredictionContext} = __webpack_require__(/*! ./../PredictionContext */ "./node_modules/antlr4/src/antlr4/PredictionContext.js");
const {SingletonPredictionContext} = __webpack_require__(/*! ./../PredictionContext */ "./node_modules/antlr4/src/antlr4/PredictionContext.js");
const {RuleStopState} = __webpack_require__(/*! ./ATNState */ "./node_modules/antlr4/src/antlr4/atn/ATNState.js");
const {LexerATNConfig} = __webpack_require__(/*! ./ATNConfig */ "./node_modules/antlr4/src/antlr4/atn/ATNConfig.js");
const {Transition} = __webpack_require__(/*! ./Transition */ "./node_modules/antlr4/src/antlr4/atn/Transition.js");
const LexerActionExecutor = __webpack_require__(/*! ./LexerActionExecutor */ "./node_modules/antlr4/src/antlr4/atn/LexerActionExecutor.js");
const {LexerNoViableAltException} = __webpack_require__(/*! ./../error/Errors */ "./node_modules/antlr4/src/antlr4/error/Errors.js");

function resetSimState(sim) {
	sim.index = -1;
	sim.line = 0;
	sim.column = -1;
	sim.dfaState = null;
}

class SimState {
	constructor() {
		resetSimState(this);
	}

	reset() {
		resetSimState(this);
	}
}

class LexerATNSimulator extends ATNSimulator {
	/**
	 * When we hit an accept state in either the DFA or the ATN, we
	 * have to notify the character stream to start buffering characters
	 * via {@link IntStream//mark} and record the current state. The current sim state
	 * includes the current index into the input, the current line,
	 * and current character position in that line. Note that the Lexer is
	 * tracking the starting line and characterization of the token. These
	 * variables track the "state" of the simulator when it hits an accept state.
	 *
	 * <p>We track these variables separately for the DFA and ATN simulation
	 * because the DFA simulation often has to fail over to the ATN
	 * simulation. If the ATN simulation fails, we need the DFA to fall
	 * back to its previously accepted state, if any. If the ATN succeeds,
	 * then the ATN does the accept and the DFA simulator that invoked it
	 * can simply return the predicted token type.</p>
	 */
	constructor(recog, atn, decisionToDFA, sharedContextCache) {
		super(atn, sharedContextCache);
		this.decisionToDFA = decisionToDFA;
		this.recog = recog;
		/**
		 * The current token's starting index into the character stream.
		 * Shared across DFA to ATN simulation in case the ATN fails and the
		 * DFA did not have a previous accept state. In this case, we use the
		 * ATN-generated exception object
		 */
		this.startIndex = -1;
		// line number 1..n within the input///
		this.line = 1;
		/**
		 * The index of the character relative to the beginning of the line
		 * 0..n-1
		 */
		this.column = 0;
		this.mode = Lexer.DEFAULT_MODE;
		/**
		 * Used during DFA/ATN exec to record the most recent accept configuration
		 * info
		 */
		this.prevAccept = new SimState();
	}

	copyState(simulator) {
		this.column = simulator.column;
		this.line = simulator.line;
		this.mode = simulator.mode;
		this.startIndex = simulator.startIndex;
	}

	match(input, mode) {
		this.match_calls += 1;
		this.mode = mode;
		const mark = input.mark();
		try {
			this.startIndex = input.index;
			this.prevAccept.reset();
			const dfa = this.decisionToDFA[mode];
			if (dfa.s0 === null) {
				return this.matchATN(input);
			} else {
				return this.execATN(input, dfa.s0);
			}
		} finally {
			input.release(mark);
		}
	}

	reset() {
		this.prevAccept.reset();
		this.startIndex = -1;
		this.line = 1;
		this.column = 0;
		this.mode = Lexer.DEFAULT_MODE;
	}

	matchATN(input) {
		const startState = this.atn.modeToStartState[this.mode];

		if (LexerATNSimulator.debug) {
			console.log("matchATN mode " + this.mode + " start: " + startState);
		}
		const old_mode = this.mode;
		const s0_closure = this.computeStartState(input, startState);
		const suppressEdge = s0_closure.hasSemanticContext;
		s0_closure.hasSemanticContext = false;

		const next = this.addDFAState(s0_closure);
		if (!suppressEdge) {
			this.decisionToDFA[this.mode].s0 = next;
		}

		const predict = this.execATN(input, next);

		if (LexerATNSimulator.debug) {
			console.log("DFA after matchATN: " + this.decisionToDFA[old_mode].toLexerString());
		}
		return predict;
	}

	execATN(input, ds0) {
		if (LexerATNSimulator.debug) {
			console.log("start state closure=" + ds0.configs);
		}
		if (ds0.isAcceptState) {
			// allow zero-length tokens
			this.captureSimState(this.prevAccept, input, ds0);
		}
		let t = input.LA(1);
		let s = ds0; // s is current/from DFA state

		while (true) { // while more work
			if (LexerATNSimulator.debug) {
				console.log("execATN loop starting closure: " + s.configs);
			}

			/**
			 * As we move src->trg, src->trg, we keep track of the previous trg to
			 * avoid looking up the DFA state again, which is expensive.
			 * If the previous target was already part of the DFA, we might
			 * be able to avoid doing a reach operation upon t. If s!=null,
			 * it means that semantic predicates didn't prevent us from
			 * creating a DFA state. Once we know s!=null, we check to see if
			 * the DFA state has an edge already for t. If so, we can just reuse
			 * it's configuration set; there's no point in re-computing it.
			 * This is kind of like doing DFA simulation within the ATN
			 * simulation because DFA simulation is really just a way to avoid
			 * computing reach/closure sets. Technically, once we know that
			 * we have a previously added DFA state, we could jump over to
			 * the DFA simulator. But, that would mean popping back and forth
			 * a lot and making things more complicated algorithmically.
			 * This optimization makes a lot of sense for loops within DFA.
			 * A character will take us back to an existing DFA state
			 * that already has lots of edges out of it. e.g., .* in comments.
			 * print("Target for:" + str(s) + " and:" + str(t))
			 */
			let target = this.getExistingTargetState(s, t);
			// print("Existing:" + str(target))
			if (target === null) {
				target = this.computeTargetState(input, s, t);
				// print("Computed:" + str(target))
			}
			if (target === ATNSimulator.ERROR) {
				break;
			}
			// If this is a consumable input element, make sure to consume before
			// capturing the accept state so the input index, line, and char
			// position accurately reflect the state of the interpreter at the
			// end of the token.
			if (t !== Token.EOF) {
				this.consume(input);
			}
			if (target.isAcceptState) {
				this.captureSimState(this.prevAccept, input, target);
				if (t === Token.EOF) {
					break;
				}
			}
			t = input.LA(1);
			s = target; // flip; current DFA target becomes new src/from state
		}
		return this.failOrAccept(this.prevAccept, input, s.configs, t);
	}

	/**
	 * Get an existing target state for an edge in the DFA. If the target state
	 * for the edge has not yet been computed or is otherwise not available,
	 * this method returns {@code null}.
	 *
	 * @param s The current DFA state
	 * @param t The next input symbol
	 * @return The existing target DFA state for the given input symbol
	 * {@code t}, or {@code null} if the target state for this edge is not
	 * already cached
	 */
	getExistingTargetState(s, t) {
		if (s.edges === null || t < LexerATNSimulator.MIN_DFA_EDGE || t > LexerATNSimulator.MAX_DFA_EDGE) {
			return null;
		}

		let target = s.edges[t - LexerATNSimulator.MIN_DFA_EDGE];
		if(target===undefined) {
			target = null;
		}
		if (LexerATNSimulator.debug && target !== null) {
			console.log("reuse state " + s.stateNumber + " edge to " + target.stateNumber);
		}
		return target;
	}

	/**
	 * Compute a target state for an edge in the DFA, and attempt to add the
	 * computed state and corresponding edge to the DFA.
	 *
	 * @param input The input stream
	 * @param s The current DFA state
	 * @param t The next input symbol
	 *
	 * @return The computed target DFA state for the given input symbol
	 * {@code t}. If {@code t} does not lead to a valid DFA state, this method
	 * returns {@link //ERROR}.
	 */
	computeTargetState(input, s, t) {
		const reach = new OrderedATNConfigSet();
		// if we don't find an existing DFA state
		// Fill reach starting from closure, following t transitions
		this.getReachableConfigSet(input, s.configs, reach, t);

		if (reach.items.length === 0) { // we got nowhere on t from s
			if (!reach.hasSemanticContext) {
				// we got nowhere on t, don't throw out this knowledge; it'd
				// cause a failover from DFA later.
				this.addDFAEdge(s, t, ATNSimulator.ERROR);
			}
			// stop when we can't match any more char
			return ATNSimulator.ERROR;
		}
		// Add an edge from s to target DFA found/created for reach
		return this.addDFAEdge(s, t, null, reach);
	}

	failOrAccept(prevAccept, input, reach, t) {
		if (this.prevAccept.dfaState !== null) {
			const lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;
			this.accept(input, lexerActionExecutor, this.startIndex,
					prevAccept.index, prevAccept.line, prevAccept.column);
			return prevAccept.dfaState.prediction;
		} else {
			// if no accept and EOF is first char, return EOF
			if (t === Token.EOF && input.index === this.startIndex) {
				return Token.EOF;
			}
			throw new LexerNoViableAltException(this.recog, input, this.startIndex, reach);
		}
	}

	/**
	 * Given a starting configuration set, figure out all ATN configurations
	 * we can reach upon input {@code t}. Parameter {@code reach} is a return
	 * parameter.
	 */
	getReachableConfigSet(input, closure,
			reach, t) {
		// this is used to skip processing for configs which have a lower priority
		// than a config that already reached an accept state for the same rule
		let skipAlt = ATN.INVALID_ALT_NUMBER;
		for (let i = 0; i < closure.items.length; i++) {
			const cfg = closure.items[i];
			const currentAltReachedAcceptState = (cfg.alt === skipAlt);
			if (currentAltReachedAcceptState && cfg.passedThroughNonGreedyDecision) {
				continue;
			}
			if (LexerATNSimulator.debug) {
				console.log("testing %s at %s\n", this.getTokenName(t), cfg
						.toString(this.recog, true));
			}
			for (let j = 0; j < cfg.state.transitions.length; j++) {
				const trans = cfg.state.transitions[j]; // for each transition
				const target = this.getReachableTarget(trans, t);
				if (target !== null) {
					let lexerActionExecutor = cfg.lexerActionExecutor;
					if (lexerActionExecutor !== null) {
						lexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);
					}
					const treatEofAsEpsilon = (t === Token.EOF);
					const config = new LexerATNConfig({state:target, lexerActionExecutor:lexerActionExecutor}, cfg);
					if (this.closure(input, config, reach,
							currentAltReachedAcceptState, true, treatEofAsEpsilon)) {
						// any remaining configs for this alt have a lower priority
						// than the one that just reached an accept state.
						skipAlt = cfg.alt;
					}
				}
			}
		}
	}

	accept(input, lexerActionExecutor,
			   startIndex, index, line, charPos) {
		   if (LexerATNSimulator.debug) {
			   console.log("ACTION %s\n", lexerActionExecutor);
		   }
		   // seek to after last char in token
		   input.seek(index);
		   this.line = line;
		   this.column = charPos;
		   if (lexerActionExecutor !== null && this.recog !== null) {
			   lexerActionExecutor.execute(this.recog, input, startIndex);
		   }
	   }

	getReachableTarget(trans, t) {
		if (trans.matches(t, 0, Lexer.MAX_CHAR_VALUE)) {
			return trans.target;
		} else {
			return null;
		}
	}

	computeStartState(input, p) {
		const initialContext = PredictionContext.EMPTY;
		const configs = new OrderedATNConfigSet();
		for (let i = 0; i < p.transitions.length; i++) {
			const target = p.transitions[i].target;
			const cfg = new LexerATNConfig({state:target, alt:i+1, context:initialContext}, null);
			this.closure(input, cfg, configs, false, false, false);
		}
		return configs;
	}

	/**
	 * Since the alternatives within any lexer decision are ordered by
	 * preference, this method stops pursuing the closure as soon as an accept
	 * state is reached. After the first accept state is reached by depth-first
	 * search from {@code config}, all other (potentially reachable) states for
	 * this rule would have a lower priority.
	 *
	 * @return {Boolean} {@code true} if an accept state is reached, otherwise
	 * {@code false}.
	 */
	closure(input, config, configs,
			currentAltReachedAcceptState, speculative, treatEofAsEpsilon) {
		let cfg = null;
		if (LexerATNSimulator.debug) {
			console.log("closure(" + config.toString(this.recog, true) + ")");
		}
		if (config.state instanceof RuleStopState) {
			if (LexerATNSimulator.debug) {
				if (this.recog !== null) {
					console.log("closure at %s rule stop %s\n", this.recog.ruleNames[config.state.ruleIndex], config);
				} else {
					console.log("closure at rule stop %s\n", config);
				}
			}
			if (config.context === null || config.context.hasEmptyPath()) {
				if (config.context === null || config.context.isEmpty()) {
					configs.add(config);
					return true;
				} else {
					configs.add(new LexerATNConfig({ state:config.state, context:PredictionContext.EMPTY}, config));
					currentAltReachedAcceptState = true;
				}
			}
			if (config.context !== null && !config.context.isEmpty()) {
				for (let i = 0; i < config.context.length; i++) {
					if (config.context.getReturnState(i) !== PredictionContext.EMPTY_RETURN_STATE) {
						const newContext = config.context.getParent(i); // "pop" return state
						const returnState = this.atn.states[config.context.getReturnState(i)];
						cfg = new LexerATNConfig({ state:returnState, context:newContext }, config);
						currentAltReachedAcceptState = this.closure(input, cfg,
								configs, currentAltReachedAcceptState, speculative,
								treatEofAsEpsilon);
					}
				}
			}
			return currentAltReachedAcceptState;
		}
		// optimization
		if (!config.state.epsilonOnlyTransitions) {
			if (!currentAltReachedAcceptState || !config.passedThroughNonGreedyDecision) {
				configs.add(config);
			}
		}
		for (let j = 0; j < config.state.transitions.length; j++) {
			const trans = config.state.transitions[j];
			cfg = this.getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon);
			if (cfg !== null) {
				currentAltReachedAcceptState = this.closure(input, cfg, configs,
						currentAltReachedAcceptState, speculative, treatEofAsEpsilon);
			}
		}
		return currentAltReachedAcceptState;
	}

	// side-effect: can alter configs.hasSemanticContext
	getEpsilonTarget(input, config, trans,
			configs, speculative, treatEofAsEpsilon) {
		let cfg = null;
		if (trans.serializationType === Transition.RULE) {
			const newContext = SingletonPredictionContext.create(config.context, trans.followState.stateNumber);
			cfg = new LexerATNConfig( { state:trans.target, context:newContext}, config);
		} else if (trans.serializationType === Transition.PRECEDENCE) {
			throw "Precedence predicates are not supported in lexers.";
		} else if (trans.serializationType === Transition.PREDICATE) {
			// Track traversing semantic predicates. If we traverse,
			// we cannot add a DFA state for this "reach" computation
			// because the DFA would not test the predicate again in the
			// future. Rather than creating collections of semantic predicates
			// like v3 and testing them on prediction, v4 will test them on the
			// fly all the time using the ATN not the DFA. This is slower but
			// semantically it's not used that often. One of the key elements to
			// this predicate mechanism is not adding DFA states that see
			// predicates immediately afterwards in the ATN. For example,

			// a : ID {p1}? | ID {p2}? ;

			// should create the start state for rule 'a' (to save start state
			// competition), but should not create target of ID state. The
			// collection of ATN states the following ID references includes
			// states reached by traversing predicates. Since this is when we
			// test them, we cannot cash the DFA state target of ID.

			if (LexerATNSimulator.debug) {
				console.log("EVAL rule " + trans.ruleIndex + ":" + trans.predIndex);
			}
			configs.hasSemanticContext = true;
			if (this.evaluatePredicate(input, trans.ruleIndex, trans.predIndex, speculative)) {
				cfg = new LexerATNConfig({ state:trans.target}, config);
			}
		} else if (trans.serializationType === Transition.ACTION) {
			if (config.context === null || config.context.hasEmptyPath()) {
				// execute actions anywhere in the start rule for a token.
				//
				// TODO: if the entry rule is invoked recursively, some
				// actions may be executed during the recursive call. The
				// problem can appear when hasEmptyPath() is true but
				// isEmpty() is false. In this case, the config needs to be
				// split into two contexts - one with just the empty path
				// and another with everything but the empty path.
				// Unfortunately, the current algorithm does not allow
				// getEpsilonTarget to return two configurations, so
				// additional modifications are needed before we can support
				// the split operation.
				const lexerActionExecutor = LexerActionExecutor.append(config.lexerActionExecutor,
						this.atn.lexerActions[trans.actionIndex]);
				cfg = new LexerATNConfig({ state:trans.target, lexerActionExecutor:lexerActionExecutor }, config);
			} else {
				// ignore actions in referenced rules
				cfg = new LexerATNConfig( { state:trans.target}, config);
			}
		} else if (trans.serializationType === Transition.EPSILON) {
			cfg = new LexerATNConfig({ state:trans.target}, config);
		} else if (trans.serializationType === Transition.ATOM ||
					trans.serializationType === Transition.RANGE ||
					trans.serializationType === Transition.SET) {
			if (treatEofAsEpsilon) {
				if (trans.matches(Token.EOF, 0, Lexer.MAX_CHAR_VALUE)) {
					cfg = new LexerATNConfig( { state:trans.target }, config);
				}
			}
		}
		return cfg;
	}

	/**
	 * Evaluate a predicate specified in the lexer.
	 *
	 * <p>If {@code speculative} is {@code true}, this method was called before
	 * {@link //consume} for the matched character. This method should call
	 * {@link //consume} before evaluating the predicate to ensure position
	 * sensitive values, including {@link Lexer//getText}, {@link Lexer//getLine},
	 * and {@link Lexer//getcolumn}, properly reflect the current
	 * lexer state. This method should restore {@code input} and the simulator
	 * to the original state before returning (i.e. undo the actions made by the
	 * call to {@link //consume}.</p>
	 *
	 * @param input The input stream.
	 * @param ruleIndex The rule containing the predicate.
	 * @param predIndex The index of the predicate within the rule.
	 * @param speculative {@code true} if the current index in {@code input} is
	 * one character before the predicate's location.
	 *
	 * @return {@code true} if the specified predicate evaluates to
	 * {@code true}.
	 */
	evaluatePredicate(input, ruleIndex,
			predIndex, speculative) {
		// assume true if no recognizer was provided
		if (this.recog === null) {
			return true;
		}
		if (!speculative) {
			return this.recog.sempred(null, ruleIndex, predIndex);
		}
		const savedcolumn = this.column;
		const savedLine = this.line;
		const index = input.index;
		const marker = input.mark();
		try {
			this.consume(input);
			return this.recog.sempred(null, ruleIndex, predIndex);
		} finally {
			this.column = savedcolumn;
			this.line = savedLine;
			input.seek(index);
			input.release(marker);
		}
	}

	captureSimState(settings, input, dfaState) {
		settings.index = input.index;
		settings.line = this.line;
		settings.column = this.column;
		settings.dfaState = dfaState;
	}

	addDFAEdge(from_, tk, to, cfgs) {
		if (to === undefined) {
			to = null;
		}
		if (cfgs === undefined) {
			cfgs = null;
		}
		if (to === null && cfgs !== null) {
			// leading to this call, ATNConfigSet.hasSemanticContext is used as a
			// marker indicating dynamic predicate evaluation makes this edge
			// dependent on the specific input sequence, so the static edge in the
			// DFA should be omitted. The target DFAState is still created since
			// execATN has the ability to resynchronize with the DFA state cache
			// following the predicate evaluation step.
			//
			// TJP notes: next time through the DFA, we see a pred again and eval.
			// If that gets us to a previously created (but dangling) DFA
			// state, we can continue in pure DFA mode from there.
			// /
			const suppressEdge = cfgs.hasSemanticContext;
			cfgs.hasSemanticContext = false;

			to = this.addDFAState(cfgs);

			if (suppressEdge) {
				return to;
			}
		}
		// add the edge
		if (tk < LexerATNSimulator.MIN_DFA_EDGE || tk > LexerATNSimulator.MAX_DFA_EDGE) {
			// Only track edges within the DFA bounds
			return to;
		}
		if (LexerATNSimulator.debug) {
			console.log("EDGE " + from_ + " -> " + to + " upon " + tk);
		}
		if (from_.edges === null) {
			// make room for tokens 1..n and -1 masquerading as index 0
			from_.edges = [];
		}
		from_.edges[tk - LexerATNSimulator.MIN_DFA_EDGE] = to; // connect

		return to;
	}

	/**
	 * Add a new DFA state if there isn't one with this set of
	 * configurations already. This method also detects the first
	 * configuration containing an ATN rule stop state. Later, when
	 * traversing the DFA, we will know which rule to accept.
	 */
	addDFAState(configs) {
		const proposed = new DFAState(null, configs);
		let firstConfigWithRuleStopState = null;
		for (let i = 0; i < configs.items.length; i++) {
			const cfg = configs.items[i];
			if (cfg.state instanceof RuleStopState) {
				firstConfigWithRuleStopState = cfg;
				break;
			}
		}
		if (firstConfigWithRuleStopState !== null) {
			proposed.isAcceptState = true;
			proposed.lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;
			proposed.prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];
		}
		const dfa = this.decisionToDFA[this.mode];
		const existing = dfa.states.get(proposed);
		if (existing!==null) {
			return existing;
		}
		const newState = proposed;
		newState.stateNumber = dfa.states.length;
		configs.setReadonly(true);
		newState.configs = configs;
		dfa.states.add(newState);
		return newState;
	}

	getDFA(mode) {
		return this.decisionToDFA[mode];
	}

// Get the text matched so far for the current token.
	getText(input) {
		// index is first lookahead char, don't include.
		return input.getText(this.startIndex, input.index - 1);
	}

	consume(input) {
		const curChar = input.LA(1);
		if (curChar === "\n".charCodeAt(0)) {
			this.line += 1;
			this.column = 0;
		} else {
			this.column += 1;
		}
		input.consume();
	}

	getTokenName(tt) {
		if (tt === -1) {
			return "EOF";
		} else {
			return "'" + String.fromCharCode(tt) + "'";
		}
	}
}

LexerATNSimulator.debug = false;
LexerATNSimulator.dfa_debug = false;

LexerATNSimulator.MIN_DFA_EDGE = 0;
LexerATNSimulator.MAX_DFA_EDGE = 127; // forces unicode to stay in ATN

LexerATNSimulator.match_calls = 0;

module.exports = LexerATNSimulator;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/LexerAction.js":
/*!***********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/LexerAction.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const LexerActionType = {
    // The type of a {@link LexerChannelAction} action.
    CHANNEL: 0,
    // The type of a {@link LexerCustomAction} action
    CUSTOM: 1,
    // The type of a {@link LexerModeAction} action.
    MODE: 2,
    //The type of a {@link LexerMoreAction} action.
    MORE: 3,
    //The type of a {@link LexerPopModeAction} action.
    POP_MODE: 4,
    //The type of a {@link LexerPushModeAction} action.
    PUSH_MODE: 5,
    //The type of a {@link LexerSkipAction} action.
    SKIP: 6,
    //The type of a {@link LexerTypeAction} action.
    TYPE: 7
}

class LexerAction {
    constructor(action) {
        this.actionType = action;
        this.isPositionDependent = false;
    }

    hashCode() {
        const hash = new Hash();
        this.updateHashCode(hash);
        return hash.finish()
    }

    updateHashCode(hash) {
        hash.update(this.actionType);
    }

    equals(other) {
        return this === other;
    }
}


/**
 * Implements the {@code skip} lexer action by calling {@link Lexer//skip}.
 *
 * <p>The {@code skip} command does not have any parameters, so this action is
 * implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
 */
class LexerSkipAction extends LexerAction {
    constructor() {
        super(LexerActionType.SKIP);
    }

    execute(lexer) {
        lexer.skip();
    }

    toString() {
        return "skip";
    }
}

// Provides a singleton instance of this parameterless lexer action.
LexerSkipAction.INSTANCE = new LexerSkipAction();

/**
 * Implements the {@code type} lexer action by calling {@link Lexer//setType}
 * with the assigned type
 */
class LexerTypeAction extends LexerAction {
    constructor(type) {
        super(LexerActionType.TYPE);
        this.type = type;
    }

    execute(lexer) {
        lexer.type = this.type;
    }

    updateHashCode(hash) {
        hash.update(this.actionType, this.type);
    }

    equals(other) {
        if(this === other) {
            return true;
        } else if (! (other instanceof LexerTypeAction)) {
            return false;
        } else {
            return this.type === other.type;
        }
    }

    toString() {
        return "type(" + this.type + ")";
    }
}


/**
 * Implements the {@code pushMode} lexer action by calling
 * {@link Lexer//pushMode} with the assigned mode
 */
class LexerPushModeAction extends LexerAction {
    constructor(mode) {
        super(LexerActionType.PUSH_MODE);
        this.mode = mode;
    }

    /**
     * <p>This action is implemented by calling {@link Lexer//pushMode} with the
     * value provided by {@link //getMode}.</p>
     */
    execute(lexer) {
        lexer.pushMode(this.mode);
    }

    updateHashCode(hash) {
        hash.update(this.actionType, this.mode);
    }

    equals(other) {
        if (this === other) {
            return true;
        } else if (! (other instanceof LexerPushModeAction)) {
            return false;
        } else {
            return this.mode === other.mode;
        }
    }

    toString() {
        return "pushMode(" + this.mode + ")";
    }
}

/**
 * Implements the {@code popMode} lexer action by calling {@link Lexer//popMode}.
 *
 * <p>The {@code popMode} command does not have any parameters, so this action is
 * implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
 */
class LexerPopModeAction extends LexerAction {
    constructor() {
        super(LexerActionType.POP_MODE);
    }

    /**
     * <p>This action is implemented by calling {@link Lexer//popMode}.</p>
     */
    execute(lexer) {
        lexer.popMode();
    }

    toString() {
        return "popMode";
    }
}

LexerPopModeAction.INSTANCE = new LexerPopModeAction();

/**
 * Implements the {@code more} lexer action by calling {@link Lexer//more}.
 *
 * <p>The {@code more} command does not have any parameters, so this action is
 * implemented as a singleton instance exposed by {@link //INSTANCE}.</p>
 */
class LexerMoreAction extends LexerAction {
    constructor() {
        super(LexerActionType.MORE);
    }

    /**
     * <p>This action is implemented by calling {@link Lexer//popMode}.</p>
     */
    execute(lexer) {
        lexer.more();
    }

    toString() {
        return "more";
    }
}

LexerMoreAction.INSTANCE = new LexerMoreAction();


/**
 * Implements the {@code mode} lexer action by calling {@link Lexer//mode} with
 * the assigned mode
 */
class LexerModeAction extends LexerAction {
    constructor(mode) {
        super(LexerActionType.MODE);
        this.mode = mode;
    }

    /**
     * <p>This action is implemented by calling {@link Lexer//mode} with the
     * value provided by {@link //getMode}.</p>
     */
    execute(lexer) {
        lexer.mode(this.mode);
    }

    updateHashCode(hash) {
        hash.update(this.actionType, this.mode);
    }

    equals(other) {
        if (this === other) {
            return true;
        } else if (! (other instanceof LexerModeAction)) {
            return false;
        } else {
            return this.mode === other.mode;
        }
    }

    toString() {
        return "mode(" + this.mode + ")";
    }
}

/**
 * Executes a custom lexer action by calling {@link Recognizer//action} with the
 * rule and action indexes assigned to the custom action. The implementation of
 * a custom action is added to the generated code for the lexer in an override
 * of {@link Recognizer//action} when the grammar is compiled.
 *
 * <p>This class may represent embedded actions created with the <code>{...}</code>
 * syntax in ANTLR 4, as well as actions created for lexer commands where the
 * command argument could not be evaluated when the grammar was compiled.</p>
 */
class LexerCustomAction extends LexerAction {
    /**
     * Constructs a custom lexer action with the specified rule and action
     * indexes.
     *
     * @param ruleIndex The rule index to use for calls to
     * {@link Recognizer//action}.
     * @param actionIndex The action index to use for calls to
     * {@link Recognizer//action}.
     */
    constructor(ruleIndex, actionIndex) {
        super(LexerActionType.CUSTOM);
        this.ruleIndex = ruleIndex;
        this.actionIndex = actionIndex;
        this.isPositionDependent = true;
    }

    /**
     * <p>Custom actions are implemented by calling {@link Lexer//action} with the
     * appropriate rule and action indexes.</p>
     */
    execute(lexer) {
        lexer.action(null, this.ruleIndex, this.actionIndex);
    }

    updateHashCode(hash) {
        hash.update(this.actionType, this.ruleIndex, this.actionIndex);
    }

    equals(other) {
        if (this === other) {
            return true;
        } else if (! (other instanceof LexerCustomAction)) {
            return false;
        } else {
            return this.ruleIndex === other.ruleIndex && this.actionIndex === other.actionIndex;
        }
    }
}

/**
 * Implements the {@code channel} lexer action by calling
 * {@link Lexer//setChannel} with the assigned channel.
 * Constructs a new {@code channel} action with the specified channel value.
 * @param channel The channel value to pass to {@link Lexer//setChannel}
 */
class LexerChannelAction extends LexerAction {
    constructor(channel) {
        super(LexerActionType.CHANNEL);
        this.channel = channel;
    }

    /**
     * <p>This action is implemented by calling {@link Lexer//setChannel} with the
     * value provided by {@link //getChannel}.</p>
     */
    execute(lexer) {
        lexer._channel = this.channel;
    }

    updateHashCode(hash) {
        hash.update(this.actionType, this.channel);
    }

    equals(other) {
        if (this === other) {
            return true;
        } else if (! (other instanceof LexerChannelAction)) {
            return false;
        } else {
            return this.channel === other.channel;
        }
    }

    toString() {
        return "channel(" + this.channel + ")";
    }
}


/**
 * This implementation of {@link LexerAction} is used for tracking input offsets
 * for position-dependent actions within a {@link LexerActionExecutor}.
 *
 * <p>This action is not serialized as part of the ATN, and is only required for
 * position-dependent lexer actions which appear at a location other than the
 * end of a rule. For more information about DFA optimizations employed for
 * lexer actions, see {@link LexerActionExecutor//append} and
 * {@link LexerActionExecutor//fixOffsetBeforeMatch}.</p>
 *
 * Constructs a new indexed custom action by associating a character offset
 * with a {@link LexerAction}.
 *
 * <p>Note: This class is only required for lexer actions for which
 * {@link LexerAction//isPositionDependent} returns {@code true}.</p>
 *
 * @param offset The offset into the input {@link CharStream}, relative to
 * the token start index, at which the specified lexer action should be
 * executed.
 * @param action The lexer action to execute at a particular offset in the
 * input {@link CharStream}.
 */
class LexerIndexedCustomAction extends LexerAction {
    constructor(offset, action) {
        super(action.actionType);
        this.offset = offset;
        this.action = action;
        this.isPositionDependent = true;
    }

    /**
     * <p>This method calls {@link //execute} on the result of {@link //getAction}
     * using the provided {@code lexer}.</p>
     */
    execute(lexer) {
        // assume the input stream position was properly set by the calling code
        this.action.execute(lexer);
    }

    updateHashCode(hash) {
        hash.update(this.actionType, this.offset, this.action);
    }

    equals(other) {
        if (this === other) {
            return true;
        } else if (! (other instanceof LexerIndexedCustomAction)) {
            return false;
        } else {
            return this.offset === other.offset && this.action === other.action;
        }
    }
}

module.exports = {
    LexerActionType,
    LexerSkipAction,
    LexerChannelAction,
    LexerCustomAction,
    LexerIndexedCustomAction,
    LexerMoreAction,
    LexerTypeAction,
    LexerPushModeAction,
    LexerPopModeAction,
    LexerModeAction
}


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/LexerActionExecutor.js":
/*!*******************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/LexerActionExecutor.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {hashStuff} = __webpack_require__(/*! ../Utils */ "./node_modules/antlr4/src/antlr4/Utils.js");
const {LexerIndexedCustomAction} = __webpack_require__(/*! ./LexerAction */ "./node_modules/antlr4/src/antlr4/atn/LexerAction.js");

class LexerActionExecutor {
	/**
	 * Represents an executor for a sequence of lexer actions which traversed during
	 * the matching operation of a lexer rule (token).
	 *
	 * <p>The executor tracks position information for position-dependent lexer actions
	 * efficiently, ensuring that actions appearing only at the end of the rule do
	 * not cause bloating of the {@link DFA} created for the lexer.</p>
	 */
	constructor(lexerActions) {
		this.lexerActions = lexerActions === null ? [] : lexerActions;
		/**
		 * Caches the result of {@link //hashCode} since the hash code is an element
		 * of the performance-critical {@link LexerATNConfig//hashCode} operation
		 */
		this.cachedHashCode = hashStuff(lexerActions); // "".join([str(la) for la in
		// lexerActions]))
		return this;
	}

	/**
	 * Creates a {@link LexerActionExecutor} which encodes the current offset
	 * for position-dependent lexer actions.
	 *
	 * <p>Normally, when the executor encounters lexer actions where
	 * {@link LexerAction//isPositionDependent} returns {@code true}, it calls
	 * {@link IntStream//seek} on the input {@link CharStream} to set the input
	 * position to the <em>end</em> of the current token. This behavior provides
	 * for efficient DFA representation of lexer actions which appear at the end
	 * of a lexer rule, even when the lexer rule matches a variable number of
	 * characters.</p>
	 *
	 * <p>Prior to traversing a match transition in the ATN, the current offset
	 * from the token start index is assigned to all position-dependent lexer
	 * actions which have not already been assigned a fixed offset. By storing
	 * the offsets relative to the token start index, the DFA representation of
	 * lexer actions which appear in the middle of tokens remains efficient due
	 * to sharing among tokens of the same length, regardless of their absolute
	 * position in the input stream.</p>
	 *
	 * <p>If the current executor already has offsets assigned to all
	 * position-dependent lexer actions, the method returns {@code this}.</p>
	 *
	 * @param offset The current offset to assign to all position-dependent
	 * lexer actions which do not already have offsets assigned.
	 *
	 * @return {LexerActionExecutor} A {@link LexerActionExecutor} which stores input stream offsets
	 * for all position-dependent lexer actions.
	 */
	fixOffsetBeforeMatch(offset) {
		let updatedLexerActions = null;
		for (let i = 0; i < this.lexerActions.length; i++) {
			if (this.lexerActions[i].isPositionDependent &&
					!(this.lexerActions[i] instanceof LexerIndexedCustomAction)) {
				if (updatedLexerActions === null) {
					updatedLexerActions = this.lexerActions.concat([]);
				}
				updatedLexerActions[i] = new LexerIndexedCustomAction(offset,
						this.lexerActions[i]);
			}
		}
		if (updatedLexerActions === null) {
			return this;
		} else {
			return new LexerActionExecutor(updatedLexerActions);
		}
	}

	/**
	 * Execute the actions encapsulated by this executor within the context of a
	 * particular {@link Lexer}.
	 *
	 * <p>This method calls {@link IntStream//seek} to set the position of the
	 * {@code input} {@link CharStream} prior to calling
	 * {@link LexerAction//execute} on a position-dependent action. Before the
	 * method returns, the input position will be restored to the same position
	 * it was in when the method was invoked.</p>
	 *
	 * @param lexer The lexer instance.
	 * @param input The input stream which is the source for the current token.
	 * When this method is called, the current {@link IntStream//index} for
	 * {@code input} should be the start of the following token, i.e. 1
	 * character past the end of the current token.
	 * @param startIndex The token start index. This value may be passed to
	 * {@link IntStream//seek} to set the {@code input} position to the beginning
	 * of the token.
	 */
	execute(lexer, input, startIndex) {
		let requiresSeek = false;
		const stopIndex = input.index;
		try {
			for (let i = 0; i < this.lexerActions.length; i++) {
				let lexerAction = this.lexerActions[i];
				if (lexerAction instanceof LexerIndexedCustomAction) {
					const offset = lexerAction.offset;
					input.seek(startIndex + offset);
					lexerAction = lexerAction.action;
					requiresSeek = (startIndex + offset) !== stopIndex;
				} else if (lexerAction.isPositionDependent) {
					input.seek(stopIndex);
					requiresSeek = false;
				}
				lexerAction.execute(lexer);
			}
		} finally {
			if (requiresSeek) {
				input.seek(stopIndex);
			}
		}
	}

	hashCode() {
		return this.cachedHashCode;
	}

	updateHashCode(hash) {
		hash.update(this.cachedHashCode);
	}

	equals(other) {
		if (this === other) {
			return true;
		} else if (!(other instanceof LexerActionExecutor)) {
			return false;
		} else if (this.cachedHashCode != other.cachedHashCode) {
			return false;
		} else if (this.lexerActions.length != other.lexerActions.length) {
			return false;
		} else {
			const numActions = this.lexerActions.length
			for (let idx = 0; idx < numActions; ++idx) {
				if (!this.lexerActions[idx].equals(other.lexerActions[idx])) {
					return false;
				}
			}
			return true;
		}
	}

	/**
	 * Creates a {@link LexerActionExecutor} which executes the actions for
	 * the input {@code lexerActionExecutor} followed by a specified
	 * {@code lexerAction}.
	 *
	 * @param lexerActionExecutor The executor for actions already traversed by
	 * the lexer while matching a token within a particular
	 * {@link LexerATNConfig}. If this is {@code null}, the method behaves as
	 * though it were an empty executor.
	 * @param lexerAction The lexer action to execute after the actions
	 * specified in {@code lexerActionExecutor}.
	 *
	 * @return {LexerActionExecutor} A {@link LexerActionExecutor} for executing the combine actions
	 * of {@code lexerActionExecutor} and {@code lexerAction}.
	 */
	static append(lexerActionExecutor, lexerAction) {
		if (lexerActionExecutor === null) {
			return new LexerActionExecutor([ lexerAction ]);
		}
		const lexerActions = lexerActionExecutor.lexerActions.concat([ lexerAction ]);
		return new LexerActionExecutor(lexerActions);
	}
}


module.exports = LexerActionExecutor;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/ParserATNSimulator.js":
/*!******************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/ParserATNSimulator.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const Utils = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/src/antlr4/Utils.js");
const {Set, BitSet, DoubleDict} = Utils;

const ATN = __webpack_require__(/*! ./ATN */ "./node_modules/antlr4/src/antlr4/atn/ATN.js");
const {ATNState, RuleStopState} = __webpack_require__(/*! ./ATNState */ "./node_modules/antlr4/src/antlr4/atn/ATNState.js");

const {ATNConfig} = __webpack_require__(/*! ./ATNConfig */ "./node_modules/antlr4/src/antlr4/atn/ATNConfig.js");
const {ATNConfigSet} = __webpack_require__(/*! ./ATNConfigSet */ "./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js");
const {Token} = __webpack_require__(/*! ./../Token */ "./node_modules/antlr4/src/antlr4/Token.js");
const {DFAState, PredPrediction} = __webpack_require__(/*! ./../dfa/DFAState */ "./node_modules/antlr4/src/antlr4/dfa/DFAState.js");
const ATNSimulator = __webpack_require__(/*! ./ATNSimulator */ "./node_modules/antlr4/src/antlr4/atn/ATNSimulator.js");
const PredictionMode = __webpack_require__(/*! ./PredictionMode */ "./node_modules/antlr4/src/antlr4/atn/PredictionMode.js");
const RuleContext = __webpack_require__(/*! ./../RuleContext */ "./node_modules/antlr4/src/antlr4/RuleContext.js");
const ParserRuleContext = __webpack_require__(/*! ./../ParserRuleContext */ "./node_modules/antlr4/src/antlr4/ParserRuleContext.js");
const {SemanticContext} = __webpack_require__(/*! ./SemanticContext */ "./node_modules/antlr4/src/antlr4/atn/SemanticContext.js");
const {PredictionContext} = __webpack_require__(/*! ./../PredictionContext */ "./node_modules/antlr4/src/antlr4/PredictionContext.js");
const {Interval} = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/src/antlr4/IntervalSet.js");
const {Transition, SetTransition, NotSetTransition, RuleTransition, ActionTransition} = __webpack_require__(/*! ./Transition */ "./node_modules/antlr4/src/antlr4/atn/Transition.js");
const {NoViableAltException} = __webpack_require__(/*! ./../error/Errors */ "./node_modules/antlr4/src/antlr4/error/Errors.js");
const {SingletonPredictionContext, predictionContextFromRuleContext} = __webpack_require__(/*! ./../PredictionContext */ "./node_modules/antlr4/src/antlr4/PredictionContext.js");


/**
 * The embodiment of the adaptive LL(*), ALL(*), parsing strategy.
 *
 * <p>
 * The basic complexity of the adaptive strategy makes it harder to understand.
 * We begin with ATN simulation to build paths in a DFA. Subsequent prediction
 * requests go through the DFA first. If they reach a state without an edge for
 * the current symbol, the algorithm fails over to the ATN simulation to
 * complete the DFA path for the current input (until it finds a conflict state
 * or uniquely predicting state).</p>
 *
 * <p>
 * All of that is done without using the outer context because we want to create
 * a DFA that is not dependent upon the rule invocation stack when we do a
 * prediction. One DFA works in all contexts. We avoid using context not
 * necessarily because it's slower, although it can be, but because of the DFA
 * caching problem. The closure routine only considers the rule invocation stack
 * created during prediction beginning in the decision rule. For example, if
 * prediction occurs without invoking another rule's ATN, there are no context
 * stacks in the configurations. When lack of context leads to a conflict, we
 * don't know if it's an ambiguity or a weakness in the strong LL(*) parsing
 * strategy (versus full LL(*)).</p>
 *
 * <p>
 * When SLL yields a configuration set with conflict, we rewind the input and
 * retry the ATN simulation, this time using full outer context without adding
 * to the DFA. Configuration context stacks will be the full invocation stacks
 * from the start rule. If we get a conflict using full context, then we can
 * definitively say we have a true ambiguity for that input sequence. If we
 * don't get a conflict, it implies that the decision is sensitive to the outer
 * context. (It is not context-sensitive in the sense of context-sensitive
 * grammars.)</p>
 *
 * <p>
 * The next time we reach this DFA state with an SLL conflict, through DFA
 * simulation, we will again retry the ATN simulation using full context mode.
 * This is slow because we can't save the results and have to "interpret" the
 * ATN each time we get that input.</p>
 *
 * <p>
 * <strong>CACHING FULL CONTEXT PREDICTIONS</strong></p>
 *
 * <p>
 * We could cache results from full context to predicted alternative easily and
 * that saves a lot of time but doesn't work in presence of predicates. The set
 * of visible predicates from the ATN start state changes depending on the
 * context, because closure can fall off the end of a rule. I tried to cache
 * tuples (stack context, semantic context, predicted alt) but it was slower
 * than interpreting and much more complicated. Also required a huge amount of
 * memory. The goal is not to create the world's fastest parser anyway. I'd like
 * to keep this algorithm simple. By launching multiple threads, we can improve
 * the speed of parsing across a large number of files.</p>
 *
 * <p>
 * There is no strict ordering between the amount of input used by SLL vs LL,
 * which makes it really hard to build a cache for full context. Let's say that
 * we have input A B C that leads to an SLL conflict with full context X. That
 * implies that using X we might only use A B but we could also use A B C D to
 * resolve conflict. Input A B C D could predict alternative 1 in one position
 * in the input and A B C E could predict alternative 2 in another position in
 * input. The conflicting SLL configurations could still be non-unique in the
 * full context prediction, which would lead us to requiring more input than the
 * original A B C.	To make a	prediction cache work, we have to track	the exact
 * input	used during the previous prediction. That amounts to a cache that maps
 * X to a specific DFA for that context.</p>
 *
 * <p>
 * Something should be done for left-recursive expression predictions. They are
 * likely LL(1) + pred eval. Easier to do the whole SLL unless error and retry
 * with full LL thing Sam does.</p>
 *
 * <p>
 * <strong>AVOIDING FULL CONTEXT PREDICTION</strong></p>
 *
 * <p>
 * We avoid doing full context retry when the outer context is empty, we did not
 * dip into the outer context by falling off the end of the decision state rule,
 * or when we force SLL mode.</p>
 *
 * <p>
 * As an example of the not dip into outer context case, consider as super
 * constructor calls versus function calls. One grammar might look like
 * this:</p>
 *
 * <pre>
 * ctorBody
 *   : '{' superCall? stat* '}'
 *   ;
 * </pre>
 *
 * <p>
 * Or, you might see something like</p>
 *
 * <pre>
 * stat
 *   : superCall ';'
 *   | expression ';'
 *   | ...
 *   ;
 * </pre>
 *
 * <p>
 * In both cases I believe that no closure operations will dip into the outer
 * context. In the first case ctorBody in the worst case will stop at the '}'.
 * In the 2nd case it should stop at the ';'. Both cases should stay within the
 * entry rule and not dip into the outer context.</p>
 *
 * <p>
 * <strong>PREDICATES</strong></p>
 *
 * <p>
 * Predicates are always evaluated if present in either SLL or LL both. SLL and
 * LL simulation deals with predicates differently. SLL collects predicates as
 * it performs closure operations like ANTLR v3 did. It delays predicate
 * evaluation until it reaches and accept state. This allows us to cache the SLL
 * ATN simulation whereas, if we had evaluated predicates on-the-fly during
 * closure, the DFA state configuration sets would be different and we couldn't
 * build up a suitable DFA.</p>
 *
 * <p>
 * When building a DFA accept state during ATN simulation, we evaluate any
 * predicates and return the sole semantically valid alternative. If there is
 * more than 1 alternative, we report an ambiguity. If there are 0 alternatives,
 * we throw an exception. Alternatives without predicates act like they have
 * true predicates. The simple way to think about it is to strip away all
 * alternatives with false predicates and choose the minimum alternative that
 * remains.</p>
 *
 * <p>
 * When we start in the DFA and reach an accept state that's predicated, we test
 * those and return the minimum semantically viable alternative. If no
 * alternatives are viable, we throw an exception.</p>
 *
 * <p>
 * During full LL ATN simulation, closure always evaluates predicates and
 * on-the-fly. This is crucial to reducing the configuration set size during
 * closure. It hits a landmine when parsing with the Java grammar, for example,
 * without this on-the-fly evaluation.</p>
 *
 * <p>
 * <strong>SHARING DFA</strong></p>
 *
 * <p>
 * All instances of the same parser share the same decision DFAs through a
 * static field. Each instance gets its own ATN simulator but they share the
 * same {@link //decisionToDFA} field. They also share a
 * {@link PredictionContextCache} object that makes sure that all
 * {@link PredictionContext} objects are shared among the DFA states. This makes
 * a big size difference.</p>
 *
 * <p>
 * <strong>THREAD SAFETY</strong></p>
 *
 * <p>
 * The {@link ParserATNSimulator} locks on the {@link //decisionToDFA} field when
 * it adds a new DFA object to that array. {@link //addDFAEdge}
 * locks on the DFA for the current decision when setting the
 * {@link DFAState//edges} field. {@link //addDFAState} locks on
 * the DFA for the current decision when looking up a DFA state to see if it
 * already exists. We must make sure that all requests to add DFA states that
 * are equivalent result in the same shared DFA object. This is because lots of
 * threads will be trying to update the DFA at once. The
 * {@link //addDFAState} method also locks inside the DFA lock
 * but this time on the shared context cache when it rebuilds the
 * configurations' {@link PredictionContext} objects using cached
 * subgraphs/nodes. No other locking occurs, even during DFA simulation. This is
 * safe as long as we can guarantee that all threads referencing
 * {@code s.edge[t]} get the same physical target {@link DFAState}, or
 * {@code null}. Once into the DFA, the DFA simulation does not reference the
 * {@link DFA//states} map. It follows the {@link DFAState//edges} field to new
 * targets. The DFA simulator will either find {@link DFAState//edges} to be
 * {@code null}, to be non-{@code null} and {@code dfa.edges[t]} null, or
 * {@code dfa.edges[t]} to be non-null. The
 * {@link //addDFAEdge} method could be racing to set the field
 * but in either case the DFA simulator works; if {@code null}, and requests ATN
 * simulation. It could also race trying to get {@code dfa.edges[t]}, but either
 * way it will work because it's not doing a test and set operation.</p>
 *
 * <p>
 * <strong>Starting with SLL then failing to combined SLL/LL (Two-Stage
 * Parsing)</strong></p>
 *
 * <p>
 * Sam pointed out that if SLL does not give a syntax error, then there is no
 * point in doing full LL, which is slower. We only have to try LL if we get a
 * syntax error. For maximum speed, Sam starts the parser set to pure SLL
 * mode with the {@link BailErrorStrategy}:</p>
 *
 * <pre>
 * parser.{@link Parser//getInterpreter() getInterpreter()}.{@link //setPredictionMode setPredictionMode}{@code (}{@link PredictionMode//SLL}{@code )};
 * parser.{@link Parser//setErrorHandler setErrorHandler}(new {@link BailErrorStrategy}());
 * </pre>
 *
 * <p>
 * If it does not get a syntax error, then we're done. If it does get a syntax
 * error, we need to retry with the combined SLL/LL strategy.</p>
 *
 * <p>
 * The reason this works is as follows. If there are no SLL conflicts, then the
 * grammar is SLL (at least for that input set). If there is an SLL conflict,
 * the full LL analysis must yield a set of viable alternatives which is a
 * subset of the alternatives reported by SLL. If the LL set is a singleton,
 * then the grammar is LL but not SLL. If the LL set is the same size as the SLL
 * set, the decision is SLL. If the LL set has size &gt; 1, then that decision
 * is truly ambiguous on the current input. If the LL set is smaller, then the
 * SLL conflict resolution might choose an alternative that the full LL would
 * rule out as a possibility based upon better context information. If that's
 * the case, then the SLL parse will definitely get an error because the full LL
 * analysis says it's not viable. If SLL conflict resolution chooses an
 * alternative within the LL set, them both SLL and LL would choose the same
 * alternative because they both choose the minimum of multiple conflicting
 * alternatives.</p>
 *
 * <p>
 * Let's say we have a set of SLL conflicting alternatives {@code {1, 2, 3}} and
 * a smaller LL set called <em>s</em>. If <em>s</em> is {@code {2, 3}}, then SLL
 * parsing will get an error because SLL will pursue alternative 1. If
 * <em>s</em> is {@code {1, 2}} or {@code {1, 3}} then both SLL and LL will
 * choose the same alternative because alternative one is the minimum of either
 * set. If <em>s</em> is {@code {2}} or {@code {3}} then SLL will get a syntax
 * error. If <em>s</em> is {@code {1}} then SLL will succeed.</p>
 *
 * <p>
 * Of course, if the input is invalid, then we will get an error for sure in
 * both SLL and LL parsing. Erroneous input will therefore require 2 passes over
 * the input.</p>
 */
class ParserATNSimulator extends ATNSimulator {
    constructor(parser, atn, decisionToDFA, sharedContextCache) {
        super(atn, sharedContextCache);
        this.parser = parser;
        this.decisionToDFA = decisionToDFA;
        // SLL, LL, or LL + exact ambig detection?//
        this.predictionMode = PredictionMode.LL;
        // LAME globals to avoid parameters!!!!! I need these down deep in predTransition
        this._input = null;
        this._startIndex = 0;
        this._outerContext = null;
        this._dfa = null;
        /**
         * Each prediction operation uses a cache for merge of prediction contexts.
         *  Don't keep around as it wastes huge amounts of memory. DoubleKeyMap
         *  isn't synchronized but we're ok since two threads shouldn't reuse same
         *  parser/atnsim object because it can only handle one input at a time.
         *  This maps graphs a and b to merged result c. (a,b)&rarr;c. We can avoid
         *  the merge if we ever see a and b again.  Note that (b,a)&rarr;c should
         *  also be examined during cache lookup.
         */
        this.mergeCache = null;
        this.debug = false;
        this.debug_closure = false;
        this.debug_add = false;
        this.debug_list_atn_decisions = false;
        this.dfa_debug = false;
        this.retry_debug = false;
    }

    reset() {}

    adaptivePredict(input, decision, outerContext) {
        if (this.debug || this.debug_list_atn_decisions) {
            console.log("adaptivePredict decision " + decision +
                                   " exec LA(1)==" + this.getLookaheadName(input) +
                                   " line " + input.LT(1).line + ":" +
                                   input.LT(1).column);
        }
        this._input = input;
        this._startIndex = input.index;
        this._outerContext = outerContext;

        const dfa = this.decisionToDFA[decision];
        this._dfa = dfa;
        const m = input.mark();
        const index = input.index;

        // Now we are certain to have a specific decision's DFA
        // But, do we still need an initial state?
        try {
            let s0;
            if (dfa.precedenceDfa) {
                // the start state for a precedence DFA depends on the current
                // parser precedence, and is provided by a DFA method.
                s0 = dfa.getPrecedenceStartState(this.parser.getPrecedence());
            } else {
                // the start state for a "regular" DFA is just s0
                s0 = dfa.s0;
            }
            if (s0===null) {
                if (outerContext===null) {
                    outerContext = RuleContext.EMPTY;
                }
                if (this.debug || this.debug_list_atn_decisions) {
                    console.log("predictATN decision " + dfa.decision +
                                       " exec LA(1)==" + this.getLookaheadName(input) +
                                       ", outerContext=" + outerContext.toString(this.parser.ruleNames));
                }

                const fullCtx = false;
                let s0_closure = this.computeStartState(dfa.atnStartState, RuleContext.EMPTY, fullCtx);

                if( dfa.precedenceDfa) {
                    // If this is a precedence DFA, we use applyPrecedenceFilter
                    // to convert the computed start state to a precedence start
                    // state. We then use DFA.setPrecedenceStartState to set the
                    // appropriate start state for the precedence level rather
                    // than simply setting DFA.s0.
                    //
                    dfa.s0.configs = s0_closure; // not used for prediction but useful to know start configs anyway
                    s0_closure = this.applyPrecedenceFilter(s0_closure);
                    s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));
                    dfa.setPrecedenceStartState(this.parser.getPrecedence(), s0);
                } else {
                    s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));
                    dfa.s0 = s0;
                }
            }
            const alt = this.execATN(dfa, s0, input, index, outerContext);
            if (this.debug) {
                console.log("DFA after predictATN: " + dfa.toString(this.parser.literalNames));
            }
            return alt;
        } finally {
            this._dfa = null;
            this.mergeCache = null; // wack cache after each prediction
            input.seek(index);
            input.release(m);
        }
    }

    /**
     * Performs ATN simulation to compute a predicted alternative based
     *  upon the remaining input, but also updates the DFA cache to avoid
     *  having to traverse the ATN again for the same input sequence.
     *
     * There are some key conditions we're looking for after computing a new
     * set of ATN configs (proposed DFA state):
     *       if the set is empty, there is no viable alternative for current symbol
     *       does the state uniquely predict an alternative?
     *       does the state have a conflict that would prevent us from
     *         putting it on the work list?
     *
     * We also have some key operations to do:
     *       add an edge from previous DFA state to potentially new DFA state, D,
     *         upon current symbol but only if adding to work list, which means in all
     *         cases except no viable alternative (and possibly non-greedy decisions?)
     *       collecting predicates and adding semantic context to DFA accept states
     *       adding rule context to context-sensitive DFA accept states
     *       consuming an input symbol
     *       reporting a conflict
     *       reporting an ambiguity
     *       reporting a context sensitivity
     *       reporting insufficient predicates
     *
     * cover these cases:
     *    dead end
     *    single alt
     *    single alt + preds
     *    conflict
     *    conflict + preds
     *
     */
    execATN(dfa, s0, input, startIndex, outerContext ) {
        if (this.debug || this.debug_list_atn_decisions) {
            console.log("execATN decision " + dfa.decision +
                    " exec LA(1)==" + this.getLookaheadName(input) +
                    " line " + input.LT(1).line + ":" + input.LT(1).column);
        }
        let alt;
        let previousD = s0;

        if (this.debug) {
            console.log("s0 = " + s0);
        }
        let t = input.LA(1);
        while(true) { // while more work
            let D = this.getExistingTargetState(previousD, t);
            if(D===null) {
                D = this.computeTargetState(dfa, previousD, t);
            }
            if(D===ATNSimulator.ERROR) {
                // if any configs in previous dipped into outer context, that
                // means that input up to t actually finished entry rule
                // at least for SLL decision. Full LL doesn't dip into outer
                // so don't need special case.
                // We will get an error no matter what so delay until after
                // decision; better error message. Also, no reachable target
                // ATN states in SLL implies LL will also get nowhere.
                // If conflict in states that dip out, choose min since we
                // will get error no matter what.
                const e = this.noViableAlt(input, outerContext, previousD.configs, startIndex);
                input.seek(startIndex);
                alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previousD.configs, outerContext);
                if(alt!==ATN.INVALID_ALT_NUMBER) {
                    return alt;
                } else {
                    throw e;
                }
            }
            if(D.requiresFullContext && this.predictionMode !== PredictionMode.SLL) {
                // IF PREDS, MIGHT RESOLVE TO SINGLE ALT => SLL (or syntax error)
                let conflictingAlts = null;
                if (D.predicates!==null) {
                    if (this.debug) {
                        console.log("DFA state has preds in DFA sim LL failover");
                    }
                    const conflictIndex = input.index;
                    if(conflictIndex !== startIndex) {
                        input.seek(startIndex);
                    }
                    conflictingAlts = this.evalSemanticContext(D.predicates, outerContext, true);
                    if (conflictingAlts.length===1) {
                        if(this.debug) {
                            console.log("Full LL avoided");
                        }
                        return conflictingAlts.minValue();
                    }
                    if (conflictIndex !== startIndex) {
                        // restore the index so reporting the fallback to full
                        // context occurs with the index at the correct spot
                        input.seek(conflictIndex);
                    }
                }
                if (this.dfa_debug) {
                    console.log("ctx sensitive state " + outerContext +" in " + D);
                }
                const fullCtx = true;
                const s0_closure = this.computeStartState(dfa.atnStartState, outerContext, fullCtx);
                this.reportAttemptingFullContext(dfa, conflictingAlts, D.configs, startIndex, input.index);
                alt = this.execATNWithFullContext(dfa, D, s0_closure, input, startIndex, outerContext);
                return alt;
            }
            if (D.isAcceptState) {
                if (D.predicates===null) {
                    return D.prediction;
                }
                const stopIndex = input.index;
                input.seek(startIndex);
                const alts = this.evalSemanticContext(D.predicates, outerContext, true);
                if (alts.length===0) {
                    throw this.noViableAlt(input, outerContext, D.configs, startIndex);
                } else if (alts.length===1) {
                    return alts.minValue();
                } else {
                    // report ambiguity after predicate evaluation to make sure the correct set of ambig alts is reported.
                    this.reportAmbiguity(dfa, D, startIndex, stopIndex, false, alts, D.configs);
                    return alts.minValue();
                }
            }
            previousD = D;

            if (t !== Token.EOF) {
                input.consume();
                t = input.LA(1);
            }
        }
    }

    /**
     * Get an existing target state for an edge in the DFA. If the target state
     * for the edge has not yet been computed or is otherwise not available,
     * this method returns {@code null}.
     *
     * @param previousD The current DFA state
     * @param t The next input symbol
     * @return The existing target DFA state for the given input symbol
     * {@code t}, or {@code null} if the target state for this edge is not
     * already cached
     */
    getExistingTargetState(previousD, t) {
        const edges = previousD.edges;
        if (edges===null) {
            return null;
        } else {
            return edges[t + 1] || null;
        }
    }

    /**
     * Compute a target state for an edge in the DFA, and attempt to add the
     * computed state and corresponding edge to the DFA.
     *
     * @param dfa The DFA
     * @param previousD The current DFA state
     * @param t The next input symbol
     *
     * @return The computed target DFA state for the given input symbol
     * {@code t}. If {@code t} does not lead to a valid DFA state, this method
     * returns {@link //ERROR
     */
    computeTargetState(dfa, previousD, t) {
       const reach = this.computeReachSet(previousD.configs, t, false);
        if(reach===null) {
            this.addDFAEdge(dfa, previousD, t, ATNSimulator.ERROR);
            return ATNSimulator.ERROR;
        }
        // create new target state; we'll add to DFA after it's complete
        let D = new DFAState(null, reach);

        const predictedAlt = this.getUniqueAlt(reach);

        if (this.debug) {
            const altSubSets = PredictionMode.getConflictingAltSubsets(reach);
            console.log("SLL altSubSets=" + Utils.arrayToString(altSubSets) +
                        ", previous=" + previousD.configs +
                        ", configs=" + reach +
                        ", predict=" + predictedAlt +
                        ", allSubsetsConflict=" +
                        PredictionMode.allSubsetsConflict(altSubSets) + ", conflictingAlts=" +
                        this.getConflictingAlts(reach));
        }
        if (predictedAlt!==ATN.INVALID_ALT_NUMBER) {
            // NO CONFLICT, UNIQUELY PREDICTED ALT
            D.isAcceptState = true;
            D.configs.uniqueAlt = predictedAlt;
            D.prediction = predictedAlt;
        } else if (PredictionMode.hasSLLConflictTerminatingPrediction(this.predictionMode, reach)) {
            // MORE THAN ONE VIABLE ALTERNATIVE
            D.configs.conflictingAlts = this.getConflictingAlts(reach);
            D.requiresFullContext = true;
            // in SLL-only mode, we will stop at this state and return the minimum alt
            D.isAcceptState = true;
            D.prediction = D.configs.conflictingAlts.minValue();
        }
        if (D.isAcceptState && D.configs.hasSemanticContext) {
            this.predicateDFAState(D, this.atn.getDecisionState(dfa.decision));
            if( D.predicates!==null) {
                D.prediction = ATN.INVALID_ALT_NUMBER;
            }
        }
        // all adds to dfa are done after we've created full D state
        D = this.addDFAEdge(dfa, previousD, t, D);
        return D;
    }

    predicateDFAState(dfaState, decisionState) {
        // We need to test all predicates, even in DFA states that
        // uniquely predict alternative.
        const nalts = decisionState.transitions.length;
        // Update DFA so reach becomes accept state with (predicate,alt)
        // pairs if preds found for conflicting alts
        const altsToCollectPredsFrom = this.getConflictingAltsOrUniqueAlt(dfaState.configs);
        const altToPred = this.getPredsForAmbigAlts(altsToCollectPredsFrom, dfaState.configs, nalts);
        if (altToPred!==null) {
            dfaState.predicates = this.getPredicatePredictions(altsToCollectPredsFrom, altToPred);
            dfaState.prediction = ATN.INVALID_ALT_NUMBER; // make sure we use preds
        } else {
            // There are preds in configs but they might go away
            // when OR'd together like {p}? || NONE == NONE. If neither
            // alt has preds, resolve to min alt
            dfaState.prediction = altsToCollectPredsFrom.minValue();
        }
    }

// comes back with reach.uniqueAlt set to a valid alt
    execATNWithFullContext(dfa, D, // how far we got before failing over
                                         s0,
                                         input,
                                         startIndex,
                                         outerContext) {
        if (this.debug || this.debug_list_atn_decisions) {
            console.log("execATNWithFullContext "+s0);
        }
        const fullCtx = true;
        let foundExactAmbig = false;
        let reach = null;
        let previous = s0;
        input.seek(startIndex);
        let t = input.LA(1);
        let predictedAlt = -1;
        while (true) { // while more work
            reach = this.computeReachSet(previous, t, fullCtx);
            if (reach===null) {
                // if any configs in previous dipped into outer context, that
                // means that input up to t actually finished entry rule
                // at least for LL decision. Full LL doesn't dip into outer
                // so don't need special case.
                // We will get an error no matter what so delay until after
                // decision; better error message. Also, no reachable target
                // ATN states in SLL implies LL will also get nowhere.
                // If conflict in states that dip out, choose min since we
                // will get error no matter what.
                const e = this.noViableAlt(input, outerContext, previous, startIndex);
                input.seek(startIndex);
                const alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previous, outerContext);
                if(alt!==ATN.INVALID_ALT_NUMBER) {
                    return alt;
                } else {
                    throw e;
                }
            }
            const altSubSets = PredictionMode.getConflictingAltSubsets(reach);
            if(this.debug) {
                console.log("LL altSubSets=" + altSubSets + ", predict=" +
                      PredictionMode.getUniqueAlt(altSubSets) + ", resolvesToJustOneViableAlt=" +
                      PredictionMode.resolvesToJustOneViableAlt(altSubSets));
            }
            reach.uniqueAlt = this.getUniqueAlt(reach);
            // unique prediction?
            if(reach.uniqueAlt!==ATN.INVALID_ALT_NUMBER) {
                predictedAlt = reach.uniqueAlt;
                break;
            } else if (this.predictionMode !== PredictionMode.LL_EXACT_AMBIG_DETECTION) {
                predictedAlt = PredictionMode.resolvesToJustOneViableAlt(altSubSets);
                if(predictedAlt !== ATN.INVALID_ALT_NUMBER) {
                    break;
                }
            } else {
                // In exact ambiguity mode, we never try to terminate early.
                // Just keeps scarfing until we know what the conflict is
                if (PredictionMode.allSubsetsConflict(altSubSets) && PredictionMode.allSubsetsEqual(altSubSets)) {
                    foundExactAmbig = true;
                    predictedAlt = PredictionMode.getSingleViableAlt(altSubSets);
                    break;
                }
                // else there are multiple non-conflicting subsets or
                // we're not sure what the ambiguity is yet.
                // So, keep going.
            }
            previous = reach;
            if( t !== Token.EOF) {
                input.consume();
                t = input.LA(1);
            }
        }
        // If the configuration set uniquely predicts an alternative,
        // without conflict, then we know that it's a full LL decision
        // not SLL.
        if (reach.uniqueAlt !== ATN.INVALID_ALT_NUMBER ) {
            this.reportContextSensitivity(dfa, predictedAlt, reach, startIndex, input.index);
            return predictedAlt;
        }
        // We do not check predicates here because we have checked them
        // on-the-fly when doing full context prediction.

        //
        // In non-exact ambiguity detection mode, we might	actually be able to
        // detect an exact ambiguity, but I'm not going to spend the cycles
        // needed to check. We only emit ambiguity warnings in exact ambiguity
        // mode.
        //
        // For example, we might know that we have conflicting configurations.
        // But, that does not mean that there is no way forward without a
        // conflict. It's possible to have nonconflicting alt subsets as in:

        // altSubSets=[{1, 2}, {1, 2}, {1}, {1, 2}]

        // from
        //
        //    [(17,1,[5 $]), (13,1,[5 10 $]), (21,1,[5 10 $]), (11,1,[$]),
        //     (13,2,[5 10 $]), (21,2,[5 10 $]), (11,2,[$])]
        //
        // In this case, (17,1,[5 $]) indicates there is some next sequence that
        // would resolve this without conflict to alternative 1. Any other viable
        // next sequence, however, is associated with a conflict.  We stop
        // looking for input because no amount of further lookahead will alter
        // the fact that we should predict alternative 1.  We just can't say for
        // sure that there is an ambiguity without looking further.

        this.reportAmbiguity(dfa, D, startIndex, input.index, foundExactAmbig, null, reach);

        return predictedAlt;
    }

    computeReachSet(closure, t, fullCtx) {
        if (this.debug) {
            console.log("in computeReachSet, starting closure: " + closure);
        }
        if( this.mergeCache===null) {
            this.mergeCache = new DoubleDict();
        }
        const intermediate = new ATNConfigSet(fullCtx);

        // Configurations already in a rule stop state indicate reaching the end
        // of the decision rule (local context) or end of the start rule (full
        // context). Once reached, these configurations are never updated by a
        // closure operation, so they are handled separately for the performance
        // advantage of having a smaller intermediate set when calling closure.
        //
        // For full-context reach operations, separate handling is required to
        // ensure that the alternative matching the longest overall sequence is
        // chosen when multiple such configurations can match the input.

        let skippedStopStates = null;

        // First figure out where we can reach on input t
        for (let i=0; i<closure.items.length;i++) {
            const c = closure.items[i];
            if(this.debug_add) {
                console.log("testing " + this.getTokenName(t) + " at " + c);
            }
            if (c.state instanceof RuleStopState) {
                if (fullCtx || t === Token.EOF) {
                    if (skippedStopStates===null) {
                        skippedStopStates = [];
                    }
                    skippedStopStates.push(c);
                    if(this.debug_add) {
                        console.log("added " + c + " to skippedStopStates");
                    }
                }
                continue;
            }
            for(let j=0;j<c.state.transitions.length;j++) {
                const trans = c.state.transitions[j];
                const target = this.getReachableTarget(trans, t);
                if (target!==null) {
                    const cfg = new ATNConfig({state:target}, c);
                    intermediate.add(cfg, this.mergeCache);
                    if(this.debug_add) {
                        console.log("added " + cfg + " to intermediate");
                    }
                }
            }
        }
        // Now figure out where the reach operation can take us...
        let reach = null;

        // This block optimizes the reach operation for intermediate sets which
        // trivially indicate a termination state for the overall
        // adaptivePredict operation.
        //
        // The conditions assume that intermediate
        // contains all configurations relevant to the reach set, but this
        // condition is not true when one or more configurations have been
        // withheld in skippedStopStates, or when the current symbol is EOF.
        //
        if (skippedStopStates===null && t!==Token.EOF) {
            if (intermediate.items.length===1) {
                // Don't pursue the closure if there is just one state.
                // It can only have one alternative; just add to result
                // Also don't pursue the closure if there is unique alternative
                // among the configurations.
                reach = intermediate;
            } else if (this.getUniqueAlt(intermediate)!==ATN.INVALID_ALT_NUMBER) {
                // Also don't pursue the closure if there is unique alternative
                // among the configurations.
                reach = intermediate;
            }
        }
        // If the reach set could not be trivially determined, perform a closure
        // operation on the intermediate set to compute its initial value.
        //
        if (reach===null) {
            reach = new ATNConfigSet(fullCtx);
            const closureBusy = new Set();
            const treatEofAsEpsilon = t === Token.EOF;
            for (let k=0; k<intermediate.items.length;k++) {
                this.closure(intermediate.items[k], reach, closureBusy, false, fullCtx, treatEofAsEpsilon);
            }
        }
        if (t === Token.EOF) {
            // After consuming EOF no additional input is possible, so we are
            // only interested in configurations which reached the end of the
            // decision rule (local context) or end of the start rule (full
            // context). Update reach to contain only these configurations. This
            // handles both explicit EOF transitions in the grammar and implicit
            // EOF transitions following the end of the decision or start rule.
            //
            // When reach==intermediate, no closure operation was performed. In
            // this case, removeAllConfigsNotInRuleStopState needs to check for
            // reachable rule stop states as well as configurations already in
            // a rule stop state.
            //
            // This is handled before the configurations in skippedStopStates,
            // because any configurations potentially added from that list are
            // already guaranteed to meet this condition whether or not it's
            // required.
            //
            reach = this.removeAllConfigsNotInRuleStopState(reach, reach === intermediate);
        }
        // If skippedStopStates!==null, then it contains at least one
        // configuration. For full-context reach operations, these
        // configurations reached the end of the start rule, in which case we
        // only add them back to reach if no configuration during the current
        // closure operation reached such a state. This ensures adaptivePredict
        // chooses an alternative matching the longest overall sequence when
        // multiple alternatives are viable.
        //
        if (skippedStopStates!==null && ( (! fullCtx) || (! PredictionMode.hasConfigInRuleStopState(reach)))) {
            for (let l=0; l<skippedStopStates.length;l++) {
                reach.add(skippedStopStates[l], this.mergeCache);
            }
        }
        if (reach.items.length===0) {
            return null;
        } else {
            return reach;
        }
    }

    /**
     * Return a configuration set containing only the configurations from
     * {@code configs} which are in a {@link RuleStopState}. If all
     * configurations in {@code configs} are already in a rule stop state, this
     * method simply returns {@code configs}.
     *
     * <p>When {@code lookToEndOfRule} is true, this method uses
     * {@link ATN//nextTokens} for each configuration in {@code configs} which is
     * not already in a rule stop state to see if a rule stop state is reachable
     * from the configuration via epsilon-only transitions.</p>
     *
     * @param configs the configuration set to update
     * @param lookToEndOfRule when true, this method checks for rule stop states
     * reachable by epsilon-only transitions from each configuration in
     * {@code configs}.
     *
     * @return {@code configs} if all configurations in {@code configs} are in a
     * rule stop state, otherwise return a new configuration set containing only
     * the configurations from {@code configs} which are in a rule stop state
     */
    removeAllConfigsNotInRuleStopState(configs, lookToEndOfRule) {
        if (PredictionMode.allConfigsInRuleStopStates(configs)) {
            return configs;
        }
        const result = new ATNConfigSet(configs.fullCtx);
        for(let i=0; i<configs.items.length;i++) {
            const config = configs.items[i];
            if (config.state instanceof RuleStopState) {
                result.add(config, this.mergeCache);
                continue;
            }
            if (lookToEndOfRule && config.state.epsilonOnlyTransitions) {
                const nextTokens = this.atn.nextTokens(config.state);
                if (nextTokens.contains(Token.EPSILON)) {
                    const endOfRuleState = this.atn.ruleToStopState[config.state.ruleIndex];
                    result.add(new ATNConfig({state:endOfRuleState}, config), this.mergeCache);
                }
            }
        }
        return result;
    }

    computeStartState(p, ctx, fullCtx) {
        // always at least the implicit call to start rule
        const initialContext = predictionContextFromRuleContext(this.atn, ctx);
        const configs = new ATNConfigSet(fullCtx);
        for(let i=0;i<p.transitions.length;i++) {
            const target = p.transitions[i].target;
            const c = new ATNConfig({ state:target, alt:i+1, context:initialContext }, null);
            const closureBusy = new Set();
            this.closure(c, configs, closureBusy, true, fullCtx, false);
        }
        return configs;
    }

    /**
     * This method transforms the start state computed by
     * {@link //computeStartState} to the special start state used by a
     * precedence DFA for a particular precedence value. The transformation
     * process applies the following changes to the start state's configuration
     * set.
     *
     * <ol>
     * <li>Evaluate the precedence predicates for each configuration using
     * {@link SemanticContext//evalPrecedence}.</li>
     * <li>Remove all configurations which predict an alternative greater than
     * 1, for which another configuration that predicts alternative 1 is in the
     * same ATN state with the same prediction context. This transformation is
     * valid for the following reasons:
     * <ul>
     * <li>The closure block cannot contain any epsilon transitions which bypass
     * the body of the closure, so all states reachable via alternative 1 are
     * part of the precedence alternatives of the transformed left-recursive
     * rule.</li>
     * <li>The "primary" portion of a left recursive rule cannot contain an
     * epsilon transition, so the only way an alternative other than 1 can exist
     * in a state that is also reachable via alternative 1 is by nesting calls
     * to the left-recursive rule, with the outer calls not being at the
     * preferred precedence level.</li>
     * </ul>
     * </li>
     * </ol>
     *
     * <p>
     * The prediction context must be considered by this filter to address
     * situations like the following.
     * </p>
     * <code>
     * <pre>
     * grammar TA;
     * prog: statement* EOF;
     * statement: letterA | statement letterA 'b' ;
     * letterA: 'a';
     * </pre>
     * </code>
     * <p>
     * If the above grammar, the ATN state immediately before the token
     * reference {@code 'a'} in {@code letterA} is reachable from the left edge
     * of both the primary and closure blocks of the left-recursive rule
     * {@code statement}. The prediction context associated with each of these
     * configurations distinguishes between them, and prevents the alternative
     * which stepped out to {@code prog} (and then back in to {@code statement}
     * from being eliminated by the filter.
     * </p>
     *
     * @param configs The configuration set computed by
     * {@link //computeStartState} as the start state for the DFA.
     * @return The transformed configuration set representing the start state
     * for a precedence DFA at a particular precedence level (determined by
     * calling {@link Parser//getPrecedence})
     */
    applyPrecedenceFilter(configs) {
        let config;
        const statesFromAlt1 = [];
        const configSet = new ATNConfigSet(configs.fullCtx);
        for(let i=0; i<configs.items.length; i++) {
            config = configs.items[i];
            // handle alt 1 first
            if (config.alt !== 1) {
                continue;
            }
            const updatedContext = config.semanticContext.evalPrecedence(this.parser, this._outerContext);
            if (updatedContext===null) {
                // the configuration was eliminated
                continue;
            }
            statesFromAlt1[config.state.stateNumber] = config.context;
            if (updatedContext !== config.semanticContext) {
                configSet.add(new ATNConfig({semanticContext:updatedContext}, config), this.mergeCache);
            } else {
                configSet.add(config, this.mergeCache);
            }
        }
        for(let i=0; i<configs.items.length; i++) {
            config = configs.items[i];
            if (config.alt === 1) {
                // already handled
                continue;
            }
            // In the future, this elimination step could be updated to also
            // filter the prediction context for alternatives predicting alt>1
            // (basically a graph subtraction algorithm).
            if (!config.precedenceFilterSuppressed) {
                const context = statesFromAlt1[config.state.stateNumber] || null;
                if (context!==null && context.equals(config.context)) {
                    // eliminated
                    continue;
                }
            }
            configSet.add(config, this.mergeCache);
        }
        return configSet;
    }

    getReachableTarget(trans, ttype) {
        if (trans.matches(ttype, 0, this.atn.maxTokenType)) {
            return trans.target;
        } else {
            return null;
        }
    }

    getPredsForAmbigAlts(ambigAlts, configs, nalts) {
        // REACH=[1|1|[]|0:0, 1|2|[]|0:1]
        // altToPred starts as an array of all null contexts. The entry at index i
        // corresponds to alternative i. altToPred[i] may have one of three values:
        //   1. null: no ATNConfig c is found such that c.alt==i
        //   2. SemanticContext.NONE: At least one ATNConfig c exists such that
        //      c.alt==i and c.semanticContext==SemanticContext.NONE. In other words,
        //      alt i has at least one unpredicated config.
        //   3. Non-NONE Semantic Context: There exists at least one, and for all
        //      ATNConfig c such that c.alt==i, c.semanticContext!=SemanticContext.NONE.
        //
        // From this, it is clear that NONE||anything==NONE.
        //
        let altToPred = [];
        for(let i=0;i<configs.items.length;i++) {
            const c = configs.items[i];
            if(ambigAlts.contains( c.alt )) {
                altToPred[c.alt] = SemanticContext.orContext(altToPred[c.alt] || null, c.semanticContext);
            }
        }
        let nPredAlts = 0;
        for (let i =1;i< nalts+1;i++) {
            const pred = altToPred[i] || null;
            if (pred===null) {
                altToPred[i] = SemanticContext.NONE;
            } else if (pred !== SemanticContext.NONE) {
                nPredAlts += 1;
            }
        }
        // nonambig alts are null in altToPred
        if (nPredAlts===0) {
            altToPred = null;
        }
        if (this.debug) {
            console.log("getPredsForAmbigAlts result " + Utils.arrayToString(altToPred));
        }
        return altToPred;
    }

    getPredicatePredictions(ambigAlts, altToPred) {
        const pairs = [];
        let containsPredicate = false;
        for (let i=1; i<altToPred.length;i++) {
            const pred = altToPred[i];
            // unpredicated is indicated by SemanticContext.NONE
            if( ambigAlts!==null && ambigAlts.contains( i )) {
                pairs.push(new PredPrediction(pred, i));
            }
            if (pred !== SemanticContext.NONE) {
                containsPredicate = true;
            }
        }
        if (! containsPredicate) {
            return null;
        }
        return pairs;
    }

    /**
     * This method is used to improve the localization of error messages by
     * choosing an alternative rather than throwing a
     * {@link NoViableAltException} in particular prediction scenarios where the
     * {@link //ERROR} state was reached during ATN simulation.
     *
     * <p>
     * The default implementation of this method uses the following
     * algorithm to identify an ATN configuration which successfully parsed the
     * decision entry rule. Choosing such an alternative ensures that the
     * {@link ParserRuleContext} returned by the calling rule will be complete
     * and valid, and the syntax error will be reported later at a more
     * localized location.</p>
     *
     * <ul>
     * <li>If a syntactically valid path or paths reach the end of the decision rule and
     * they are semantically valid if predicated, return the min associated alt.</li>
     * <li>Else, if a semantically invalid but syntactically valid path exist
     * or paths exist, return the minimum associated alt.
     * </li>
     * <li>Otherwise, return {@link ATN//INVALID_ALT_NUMBER}.</li>
     * </ul>
     *
     * <p>
     * In some scenarios, the algorithm described above could predict an
     * alternative which will result in a {@link FailedPredicateException} in
     * the parser. Specifically, this could occur if the <em>only</em> configuration
     * capable of successfully parsing to the end of the decision rule is
     * blocked by a semantic predicate. By choosing this alternative within
     * {@link //adaptivePredict} instead of throwing a
     * {@link NoViableAltException}, the resulting
     * {@link FailedPredicateException} in the parser will identify the specific
     * predicate which is preventing the parser from successfully parsing the
     * decision rule, which helps developers identify and correct logic errors
     * in semantic predicates.
     * </p>
     *
     * @param configs The ATN configurations which were valid immediately before
     * the {@link //ERROR} state was reached
     * @param outerContext The is the \gamma_0 initial parser context from the paper
     * or the parser stack at the instant before prediction commences.
     *
     * @return The value to return from {@link //adaptivePredict}, or
     * {@link ATN//INVALID_ALT_NUMBER} if a suitable alternative was not
     * identified and {@link //adaptivePredict} should report an error instead
     */
    getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(configs, outerContext) {
        const cfgs = this.splitAccordingToSemanticValidity(configs, outerContext);
        const semValidConfigs = cfgs[0];
        const semInvalidConfigs = cfgs[1];
        let alt = this.getAltThatFinishedDecisionEntryRule(semValidConfigs);
        if (alt!==ATN.INVALID_ALT_NUMBER) { // semantically/syntactically viable path exists
            return alt;
        }
        // Is there a syntactically valid path with a failed pred?
        if (semInvalidConfigs.items.length>0) {
            alt = this.getAltThatFinishedDecisionEntryRule(semInvalidConfigs);
            if (alt!==ATN.INVALID_ALT_NUMBER) { // syntactically viable path exists
                return alt;
            }
        }
        return ATN.INVALID_ALT_NUMBER;
    }

    getAltThatFinishedDecisionEntryRule(configs) {
        const alts = [];
        for(let i=0;i<configs.items.length; i++) {
            const c = configs.items[i];
            if (c.reachesIntoOuterContext>0 || ((c.state instanceof RuleStopState) && c.context.hasEmptyPath())) {
                if(alts.indexOf(c.alt)<0) {
                    alts.push(c.alt);
                }
            }
        }
        if (alts.length===0) {
            return ATN.INVALID_ALT_NUMBER;
        } else {
            return Math.min.apply(null, alts);
        }
    }

    /**
     * Walk the list of configurations and split them according to
     * those that have preds evaluating to true/false.  If no pred, assume
     * true pred and include in succeeded set.  Returns Pair of sets.
     *
     * Create a new set so as not to alter the incoming parameter.
     *
     * Assumption: the input stream has been restored to the starting point
     * prediction, which is where predicates need to evaluate.*/
    splitAccordingToSemanticValidity( configs, outerContext) {
        const succeeded = new ATNConfigSet(configs.fullCtx);
        const failed = new ATNConfigSet(configs.fullCtx);
        for(let i=0;i<configs.items.length; i++) {
            const c = configs.items[i];
            if (c.semanticContext !== SemanticContext.NONE) {
                const predicateEvaluationResult = c.semanticContext.evaluate(this.parser, outerContext);
                if (predicateEvaluationResult) {
                    succeeded.add(c);
                } else {
                    failed.add(c);
                }
            } else {
                succeeded.add(c);
            }
        }
        return [succeeded, failed];
    }

    /**
     * Look through a list of predicate/alt pairs, returning alts for the
     * pairs that win. A {@code NONE} predicate indicates an alt containing an
     * unpredicated config which behaves as "always true." If !complete
     * then we stop at the first predicate that evaluates to true. This
     * includes pairs with null predicates.
     */
    evalSemanticContext(predPredictions, outerContext, complete) {
        const predictions = new BitSet();
        for(let i=0;i<predPredictions.length;i++) {
            const pair = predPredictions[i];
            if (pair.pred === SemanticContext.NONE) {
                predictions.add(pair.alt);
                if (! complete) {
                    break;
                }
                continue;
            }
            const predicateEvaluationResult = pair.pred.evaluate(this.parser, outerContext);
            if (this.debug || this.dfa_debug) {
                console.log("eval pred " + pair + "=" + predicateEvaluationResult);
            }
            if (predicateEvaluationResult) {
                if (this.debug || this.dfa_debug) {
                    console.log("PREDICT " + pair.alt);
                }
                predictions.add(pair.alt);
                if (! complete) {
                    break;
                }
            }
        }
        return predictions;
    }

// TODO: If we are doing predicates, there is no point in pursuing
//     closure operations if we reach a DFA state that uniquely predicts
//     alternative. We will not be caching that DFA state and it is a
//     waste to pursue the closure. Might have to advance when we do
//     ambig detection thought :(
//
    closure(config, configs, closureBusy, collectPredicates, fullCtx, treatEofAsEpsilon) {
        const initialDepth = 0;
        this.closureCheckingStopState(config, configs, closureBusy, collectPredicates,
                                 fullCtx, initialDepth, treatEofAsEpsilon);
    }

    closureCheckingStopState(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
        if (this.debug || this.debug_closure) {
            console.log("closure(" + config.toString(this.parser,true) + ")");
            // console.log("configs(" + configs.toString() + ")");
            if(config.reachesIntoOuterContext>50) {
                throw "problem";
            }
        }
        if (config.state instanceof RuleStopState) {
            // We hit rule end. If we have context info, use it
            // run thru all possible stack tops in ctx
            if (! config.context.isEmpty()) {
                for (let i =0; i<config.context.length; i++) {
                    if (config.context.getReturnState(i) === PredictionContext.EMPTY_RETURN_STATE) {
                        if (fullCtx) {
                            configs.add(new ATNConfig({state:config.state, context:PredictionContext.EMPTY}, config), this.mergeCache);
                            continue;
                        } else {
                            // we have no context info, just chase follow links (if greedy)
                            if (this.debug) {
                                console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
                            }
                            this.closure_(config, configs, closureBusy, collectPredicates,
                                     fullCtx, depth, treatEofAsEpsilon);
                        }
                        continue;
                    }
                    const returnState = this.atn.states[config.context.getReturnState(i)];
                    const newContext = config.context.getParent(i); // "pop" return state
                    const parms = {state:returnState, alt:config.alt, context:newContext, semanticContext:config.semanticContext};
                    const c = new ATNConfig(parms, null);
                    // While we have context to pop back from, we may have
                    // gotten that context AFTER having falling off a rule.
                    // Make sure we track that we are now out of context.
                    c.reachesIntoOuterContext = config.reachesIntoOuterContext;
                    this.closureCheckingStopState(c, configs, closureBusy, collectPredicates, fullCtx, depth - 1, treatEofAsEpsilon);
                }
                return;
            } else if( fullCtx) {
                // reached end of start rule
                configs.add(config, this.mergeCache);
                return;
            } else {
                // else if we have no context info, just chase follow links (if greedy)
                if (this.debug) {
                    console.log("FALLING off rule " + this.getRuleName(config.state.ruleIndex));
                }
            }
        }
        this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);
    }

    // Do the actual work of walking epsilon edges//
    closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {
        const p = config.state;
        // optimization
        if (! p.epsilonOnlyTransitions) {
            configs.add(config, this.mergeCache);
            // make sure to not return here, because EOF transitions can act as
            // both epsilon transitions and non-epsilon transitions.
        }
        for(let i = 0;i<p.transitions.length; i++) {
            if(i==0 && this.canDropLoopEntryEdgeInLeftRecursiveRule(config))
                continue;

            const t = p.transitions[i];
            const continueCollecting = collectPredicates && !(t instanceof ActionTransition);
            const c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, fullCtx, treatEofAsEpsilon);
            if (c!==null) {
                let newDepth = depth;
                if ( config.state instanceof RuleStopState) {
                    // target fell off end of rule; mark resulting c as having dipped into outer context
                    // We can't get here if incoming config was rule stop and we had context
                    // track how far we dip into outer context.  Might
                    // come in handy and we avoid evaluating context dependent
                    // preds if this is > 0.
                    if (this._dfa !== null && this._dfa.precedenceDfa) {
                        if (t.outermostPrecedenceReturn === this._dfa.atnStartState.ruleIndex) {
                            c.precedenceFilterSuppressed = true;
                        }
                    }

                    c.reachesIntoOuterContext += 1;
                    if (closureBusy.add(c)!==c) {
                        // avoid infinite recursion for right-recursive rules
                        continue;
                    }
                    configs.dipsIntoOuterContext = true; // TODO: can remove? only care when we add to set per middle of this method
                    newDepth -= 1;
                    if (this.debug) {
                        console.log("dips into outer ctx: " + c);
                    }
                } else {
                    if (!t.isEpsilon && closureBusy.add(c)!==c){
                        // avoid infinite recursion for EOF* and EOF+
                        continue;
                    }
                    if (t instanceof RuleTransition) {
                        // latch when newDepth goes negative - once we step out of the entry context we can't return
                        if (newDepth >= 0) {
                            newDepth += 1;
                        }
                    }
                }
                this.closureCheckingStopState(c, configs, closureBusy, continueCollecting, fullCtx, newDepth, treatEofAsEpsilon);
            }
        }
    }

    canDropLoopEntryEdgeInLeftRecursiveRule(config) {
        // return False
        const p = config.state;
        // First check to see if we are in StarLoopEntryState generated during
        // left-recursion elimination. For efficiency, also check if
        // the context has an empty stack case. If so, it would mean
        // global FOLLOW so we can't perform optimization
        // Are we the special loop entry/exit state? or SLL wildcard
        if(p.stateType != ATNState.STAR_LOOP_ENTRY)
            return false;
        if(p.stateType != ATNState.STAR_LOOP_ENTRY || !p.isPrecedenceDecision ||
               config.context.isEmpty() || config.context.hasEmptyPath())
            return false;

        // Require all return states to return back to the same rule that p is in.
        const numCtxs = config.context.length;
        for(let i=0; i<numCtxs; i++) { // for each stack context
            const returnState = this.atn.states[config.context.getReturnState(i)];
            if (returnState.ruleIndex != p.ruleIndex)
                return false;
        }

        const decisionStartState = p.transitions[0].target;
        const blockEndStateNum = decisionStartState.endState.stateNumber;
        const blockEndState = this.atn.states[blockEndStateNum];

        // Verify that the top of each stack context leads to loop entry/exit
        // state through epsilon edges and w/o leaving rule.
        for(let i=0; i<numCtxs; i++) { // for each stack context
            const returnStateNumber = config.context.getReturnState(i);
            const returnState = this.atn.states[returnStateNumber];
            // all states must have single outgoing epsilon edge
            if (returnState.transitions.length != 1 || !returnState.transitions[0].isEpsilon)
                return false;

            // Look for prefix op case like 'not expr', (' type ')' expr
            const returnStateTarget = returnState.transitions[0].target;
            if ( returnState.stateType == ATNState.BLOCK_END && returnStateTarget == p )
                continue;

            // Look for 'expr op expr' or case where expr's return state is block end
            // of (...)* internal block; the block end points to loop back
            // which points to p but we don't need to check that
            if ( returnState == blockEndState )
                continue;

            // Look for ternary expr ? expr : expr. The return state points at block end,
            // which points at loop entry state
            if ( returnStateTarget == blockEndState )
                continue;

            // Look for complex prefix 'between expr and expr' case where 2nd expr's
            // return state points at block end state of (...)* internal block
            if (returnStateTarget.stateType == ATNState.BLOCK_END && returnStateTarget.transitions.length == 1
                    && returnStateTarget.transitions[0].isEpsilon && returnStateTarget.transitions[0].target == p)
                continue;

            // anything else ain't conforming
            return false;
        }
        return true;
    }

    getRuleName(index) {
        if (this.parser!==null && index>=0) {
            return this.parser.ruleNames[index];
        } else {
            return "<rule " + index + ">";
        }
    }

    getEpsilonTarget(config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon) {
        switch(t.serializationType) {
        case Transition.RULE:
            return this.ruleTransition(config, t);
        case Transition.PRECEDENCE:
            return this.precedenceTransition(config, t, collectPredicates, inContext, fullCtx);
        case Transition.PREDICATE:
            return this.predTransition(config, t, collectPredicates, inContext, fullCtx);
        case Transition.ACTION:
            return this.actionTransition(config, t);
        case Transition.EPSILON:
            return new ATNConfig({state:t.target}, config);
        case Transition.ATOM:
        case Transition.RANGE:
        case Transition.SET:
            // EOF transitions act like epsilon transitions after the first EOF
            // transition is traversed
            if (treatEofAsEpsilon) {
                if (t.matches(Token.EOF, 0, 1)) {
                    return new ATNConfig({state: t.target}, config);
                }
            }
            return null;
        default:
            return null;
        }
    }

    actionTransition(config, t) {
        if (this.debug) {
            const index = t.actionIndex==-1 ? 65535 : t.actionIndex;
            console.log("ACTION edge " + t.ruleIndex + ":" + index);
        }
        return new ATNConfig({state:t.target}, config);
    }

    precedenceTransition(config, pt, collectPredicates, inContext, fullCtx) {
        if (this.debug) {
            console.log("PRED (collectPredicates=" + collectPredicates + ") " +
                    pt.precedence + ">=_p, ctx dependent=true");
            if (this.parser!==null) {
                console.log("context surrounding pred is " + Utils.arrayToString(this.parser.getRuleInvocationStack()));
            }
        }
        let c = null;
        if (collectPredicates && inContext) {
            if (fullCtx) {
                // In full context mode, we can evaluate predicates on-the-fly
                // during closure, which dramatically reduces the size of
                // the config sets. It also obviates the need to test predicates
                // later during conflict resolution.
                const currentPosition = this._input.index;
                this._input.seek(this._startIndex);
                const predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
                this._input.seek(currentPosition);
                if (predSucceeds) {
                    c = new ATNConfig({state:pt.target}, config); // no pred context
                }
            } else {
                const newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());
                c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);
            }
        } else {
            c = new ATNConfig({state:pt.target}, config);
        }
        if (this.debug) {
            console.log("config from pred transition=" + c);
        }
        return c;
    }

    predTransition(config, pt, collectPredicates, inContext, fullCtx) {
        if (this.debug) {
            console.log("PRED (collectPredicates=" + collectPredicates + ") " + pt.ruleIndex +
                    ":" + pt.predIndex + ", ctx dependent=" + pt.isCtxDependent);
            if (this.parser!==null) {
                console.log("context surrounding pred is " + Utils.arrayToString(this.parser.getRuleInvocationStack()));
            }
        }
        let c = null;
        if (collectPredicates && ((pt.isCtxDependent && inContext) || ! pt.isCtxDependent)) {
            if (fullCtx) {
                // In full context mode, we can evaluate predicates on-the-fly
                // during closure, which dramatically reduces the size of
                // the config sets. It also obviates the need to test predicates
                // later during conflict resolution.
                const currentPosition = this._input.index;
                this._input.seek(this._startIndex);
                const predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);
                this._input.seek(currentPosition);
                if (predSucceeds) {
                    c = new ATNConfig({state:pt.target}, config); // no pred context
                }
            } else {
                const newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());
                c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);
            }
        } else {
            c = new ATNConfig({state:pt.target}, config);
        }
        if (this.debug) {
            console.log("config from pred transition=" + c);
        }
        return c;
    }

    ruleTransition(config, t) {
        if (this.debug) {
            console.log("CALL rule " + this.getRuleName(t.target.ruleIndex) + ", ctx=" + config.context);
        }
        const returnState = t.followState;
        const newContext = SingletonPredictionContext.create(config.context, returnState.stateNumber);
        return new ATNConfig({state:t.target, context:newContext}, config );
    }

    getConflictingAlts(configs) {
        const altsets = PredictionMode.getConflictingAltSubsets(configs);
        return PredictionMode.getAlts(altsets);
    }

    /**
     * Sam pointed out a problem with the previous definition, v3, of
     * ambiguous states. If we have another state associated with conflicting
     * alternatives, we should keep going. For example, the following grammar
     *
     * s : (ID | ID ID?) ';' ;
     *
     * When the ATN simulation reaches the state before ';', it has a DFA
     * state that looks like: [12|1|[], 6|2|[], 12|2|[]]. Naturally
     * 12|1|[] and 12|2|[] conflict, but we cannot stop processing this node
     * because alternative to has another way to continue, via [6|2|[]].
     * The key is that we have a single state that has config's only associated
     * with a single alternative, 2, and crucially the state transitions
     * among the configurations are all non-epsilon transitions. That means
     * we don't consider any conflicts that include alternative 2. So, we
     * ignore the conflict between alts 1 and 2. We ignore a set of
     * conflicting alts when there is an intersection with an alternative
     * associated with a single alt state in the state&rarr;config-list map.
     *
     * It's also the case that we might have two conflicting configurations but
     * also a 3rd nonconflicting configuration for a different alternative:
     * [1|1|[], 1|2|[], 8|3|[]]. This can come about from grammar:
     *
     * a : A | A | A B ;
     *
     * After matching input A, we reach the stop state for rule A, state 1.
     * State 8 is the state right before B. Clearly alternatives 1 and 2
     * conflict and no amount of further lookahead will separate the two.
     * However, alternative 3 will be able to continue and so we do not
     * stop working on this state. In the previous example, we're concerned
     * with states associated with the conflicting alternatives. Here alt
     * 3 is not associated with the conflicting configs, but since we can continue
     * looking for input reasonably, I don't declare the state done. We
     * ignore a set of conflicting alts when we have an alternative
     * that we still need to pursue
     */
    getConflictingAltsOrUniqueAlt(configs) {
        let conflictingAlts = null;
        if (configs.uniqueAlt!== ATN.INVALID_ALT_NUMBER) {
            conflictingAlts = new BitSet();
            conflictingAlts.add(configs.uniqueAlt);
        } else {
            conflictingAlts = configs.conflictingAlts;
        }
        return conflictingAlts;
    }

    getTokenName(t) {
        if (t===Token.EOF) {
            return "EOF";
        }
        if( this.parser!==null && this.parser.literalNames!==null) {
            if (t >= this.parser.literalNames.length && t >= this.parser.symbolicNames.length) {
                console.log("" + t + " ttype out of range: " + this.parser.literalNames);
                console.log("" + this.parser.getInputStream().getTokens());
            } else {
                const name = this.parser.literalNames[t] || this.parser.symbolicNames[t];
                return name + "<" + t + ">";
            }
        }
        return "" + t;
    }

    getLookaheadName(input) {
        return this.getTokenName(input.LA(1));
    }

    /**
     * Used for debugging in adaptivePredict around execATN but I cut
     * it out for clarity now that alg. works well. We can leave this
     * "dead" code for a bit
     */
    dumpDeadEndConfigs(nvae) {
        console.log("dead end configs: ");
        const decs = nvae.getDeadEndConfigs();
        for(let i=0; i<decs.length; i++) {
            const c = decs[i];
            let trans = "no edges";
            if (c.state.transitions.length>0) {
                const t = c.state.transitions[0];
                if (t instanceof AtomTransition) {
                    trans = "Atom "+ this.getTokenName(t.label);
                } else if (t instanceof SetTransition) {
                    const neg = (t instanceof NotSetTransition);
                    trans = (neg ? "~" : "") + "Set " + t.set;
                }
            }
            console.error(c.toString(this.parser, true) + ":" + trans);
        }
    }

    noViableAlt(input, outerContext, configs, startIndex) {
        return new NoViableAltException(this.parser, input, input.get(startIndex), input.LT(1), configs, outerContext);
    }

    getUniqueAlt(configs) {
        let alt = ATN.INVALID_ALT_NUMBER;
        for(let i=0;i<configs.items.length;i++) {
            const c = configs.items[i];
            if (alt === ATN.INVALID_ALT_NUMBER) {
                alt = c.alt // found first alt
            } else if( c.alt!==alt) {
                return ATN.INVALID_ALT_NUMBER;
            }
        }
        return alt;
    }

    /**
     * Add an edge to the DFA, if possible. This method calls
     * {@link //addDFAState} to ensure the {@code to} state is present in the
     * DFA. If {@code from} is {@code null}, or if {@code t} is outside the
     * range of edges that can be represented in the DFA tables, this method
     * returns without adding the edge to the DFA.
     *
     * <p>If {@code to} is {@code null}, this method returns {@code null}.
     * Otherwise, this method returns the {@link DFAState} returned by calling
     * {@link //addDFAState} for the {@code to} state.</p>
     *
     * @param dfa The DFA
     * @param from_ The source state for the edge
     * @param t The input symbol
     * @param to The target state for the edge
     *
     * @return If {@code to} is {@code null}, this method returns {@code null};
     * otherwise this method returns the result of calling {@link //addDFAState}
     * on {@code to}
     */
    addDFAEdge(dfa, from_, t, to) {
        if( this.debug) {
            console.log("EDGE " + from_ + " -> " + to + " upon " + this.getTokenName(t));
        }
        if (to===null) {
            return null;
        }
        to = this.addDFAState(dfa, to); // used existing if possible not incoming
        if (from_===null || t < -1 || t > this.atn.maxTokenType) {
            return to;
        }
        if (from_.edges===null) {
            from_.edges = [];
        }
        from_.edges[t+1] = to; // connect

        if (this.debug) {
            const literalNames = this.parser===null ? null : this.parser.literalNames;
            const symbolicNames = this.parser===null ? null : this.parser.symbolicNames;
            console.log("DFA=\n" + dfa.toString(literalNames, symbolicNames));
        }
        return to;
    }

    /**
     * Add state {@code D} to the DFA if it is not already present, and return
     * the actual instance stored in the DFA. If a state equivalent to {@code D}
     * is already in the DFA, the existing state is returned. Otherwise this
     * method returns {@code D} after adding it to the DFA.
     *
     * <p>If {@code D} is {@link //ERROR}, this method returns {@link //ERROR} and
     * does not change the DFA.</p>
     *
     * @param dfa The dfa
     * @param D The DFA state to add
     * @return The state stored in the DFA. This will be either the existing
     * state if {@code D} is already in the DFA, or {@code D} itself if the
     * state was not already present
     */
    addDFAState(dfa, D) {
        if (D == ATNSimulator.ERROR) {
            return D;
        }
        const existing = dfa.states.get(D);
        if(existing!==null) {
            return existing;
        }
        D.stateNumber = dfa.states.length;
        if (! D.configs.readOnly) {
            D.configs.optimizeConfigs(this);
            D.configs.setReadonly(true);
        }
        dfa.states.add(D);
        if (this.debug) {
            console.log("adding new DFA state: " + D);
        }
        return D;
    }

    reportAttemptingFullContext(dfa, conflictingAlts, configs, startIndex, stopIndex) {
        if (this.debug || this.retry_debug) {
            const interval = new Interval(startIndex, stopIndex + 1);
            console.log("reportAttemptingFullContext decision=" + dfa.decision + ":" + configs +
                               ", input=" + this.parser.getTokenStream().getText(interval));
        }
        if (this.parser!==null) {
            this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser, dfa, startIndex, stopIndex, conflictingAlts, configs);
        }
    }

    reportContextSensitivity(dfa, prediction, configs, startIndex, stopIndex) {
        if (this.debug || this.retry_debug) {
            const interval = new Interval(startIndex, stopIndex + 1);
            console.log("reportContextSensitivity decision=" + dfa.decision + ":" + configs +
                               ", input=" + this.parser.getTokenStream().getText(interval));
        }
        if (this.parser!==null) {
            this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser, dfa, startIndex, stopIndex, prediction, configs);
        }
    }

    // If context sensitive parsing, we know it's ambiguity not conflict//
    reportAmbiguity(dfa, D, startIndex, stopIndex,
                                   exact, ambigAlts, configs ) {
        if (this.debug || this.retry_debug) {
            const interval = new Interval(startIndex, stopIndex + 1);
            console.log("reportAmbiguity " + ambigAlts + ":" + configs +
                               ", input=" + this.parser.getTokenStream().getText(interval));
        }
        if (this.parser!==null) {
            this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);
        }
    }
}

module.exports = ParserATNSimulator;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/PredictionMode.js":
/*!**************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/PredictionMode.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Map, BitSet, AltDict, hashStuff} = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/src/antlr4/Utils.js");
const ATN = __webpack_require__(/*! ./ATN */ "./node_modules/antlr4/src/antlr4/atn/ATN.js");
const {RuleStopState} = __webpack_require__(/*! ./ATNState */ "./node_modules/antlr4/src/antlr4/atn/ATNState.js");
const {ATNConfigSet} = __webpack_require__(/*! ./ATNConfigSet */ "./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js");
const {ATNConfig} = __webpack_require__(/*! ./ATNConfig */ "./node_modules/antlr4/src/antlr4/atn/ATNConfig.js");
const {SemanticContext} = __webpack_require__(/*! ./SemanticContext */ "./node_modules/antlr4/src/antlr4/atn/SemanticContext.js");

/**
 * This enumeration defines the prediction modes available in ANTLR 4 along with
 * utility methods for analyzing configuration sets for conflicts and/or
 * ambiguities.
 */
const PredictionMode = {
    /**
     * The SLL(*) prediction mode. This prediction mode ignores the current
     * parser context when making predictions. This is the fastest prediction
     * mode, and provides correct results for many grammars. This prediction
     * mode is more powerful than the prediction mode provided by ANTLR 3, but
     * may result in syntax errors for grammar and input combinations which are
     * not SLL.
     *
     * <p>
     * When using this prediction mode, the parser will either return a correct
     * parse tree (i.e. the same parse tree that would be returned with the
     * {@link //LL} prediction mode), or it will report a syntax error. If a
     * syntax error is encountered when using the {@link //SLL} prediction mode,
     * it may be due to either an actual syntax error in the input or indicate
     * that the particular combination of grammar and input requires the more
     * powerful {@link //LL} prediction abilities to complete successfully.</p>
     *
     * <p>
     * This prediction mode does not provide any guarantees for prediction
     * behavior for syntactically-incorrect inputs.</p>
     */
    SLL: 0,

    /**
     * The LL(*) prediction mode. This prediction mode allows the current parser
     * context to be used for resolving SLL conflicts that occur during
     * prediction. This is the fastest prediction mode that guarantees correct
     * parse results for all combinations of grammars with syntactically correct
     * inputs.
     *
     * <p>
     * When using this prediction mode, the parser will make correct decisions
     * for all syntactically-correct grammar and input combinations. However, in
     * cases where the grammar is truly ambiguous this prediction mode might not
     * report a precise answer for <em>exactly which</em> alternatives are
     * ambiguous.</p>
     *
     * <p>
     * This prediction mode does not provide any guarantees for prediction
     * behavior for syntactically-incorrect inputs.</p>
     */
    LL: 1,

    /**
     *
     * The LL(*) prediction mode with exact ambiguity detection. In addition to
     * the correctness guarantees provided by the {@link //LL} prediction mode,
     * this prediction mode instructs the prediction algorithm to determine the
     * complete and exact set of ambiguous alternatives for every ambiguous
     * decision encountered while parsing.
     *
     * <p>
     * This prediction mode may be used for diagnosing ambiguities during
     * grammar development. Due to the performance overhead of calculating sets
     * of ambiguous alternatives, this prediction mode should be avoided when
     * the exact results are not necessary.</p>
     *
     * <p>
     * This prediction mode does not provide any guarantees for prediction
     * behavior for syntactically-incorrect inputs.</p>
     */
    LL_EXACT_AMBIG_DETECTION: 2,

    /**
     *
     * Computes the SLL prediction termination condition.
     *
     * <p>
     * This method computes the SLL prediction termination condition for both of
     * the following cases.</p>
     *
     * <ul>
     * <li>The usual SLL+LL fallback upon SLL conflict</li>
     * <li>Pure SLL without LL fallback</li>
     * </ul>
     *
     * <p><strong>COMBINED SLL+LL PARSING</strong></p>
     *
     * <p>When LL-fallback is enabled upon SLL conflict, correct predictions are
     * ensured regardless of how the termination condition is computed by this
     * method. Due to the substantially higher cost of LL prediction, the
     * prediction should only fall back to LL when the additional lookahead
     * cannot lead to a unique SLL prediction.</p>
     *
     * <p>Assuming combined SLL+LL parsing, an SLL configuration set with only
     * conflicting subsets should fall back to full LL, even if the
     * configuration sets don't resolve to the same alternative (e.g.
     * {@code {1,2}} and {@code {3,4}}. If there is at least one non-conflicting
     * configuration, SLL could continue with the hopes that more lookahead will
     * resolve via one of those non-conflicting configurations.</p>
     *
     * <p>Here's the prediction termination rule them: SLL (for SLL+LL parsing)
     * stops when it sees only conflicting configuration subsets. In contrast,
     * full LL keeps going when there is uncertainty.</p>
     *
     * <p><strong>HEURISTIC</strong></p>
     *
     * <p>As a heuristic, we stop prediction when we see any conflicting subset
     * unless we see a state that only has one alternative associated with it.
     * The single-alt-state thing lets prediction continue upon rules like
     * (otherwise, it would admit defeat too soon):</p>
     *
     * <p>{@code [12|1|[], 6|2|[], 12|2|[]]. s : (ID | ID ID?) ';' ;}</p>
     *
     * <p>When the ATN simulation reaches the state before {@code ';'}, it has a
     * DFA state that looks like: {@code [12|1|[], 6|2|[], 12|2|[]]}. Naturally
     * {@code 12|1|[]} and {@code 12|2|[]} conflict, but we cannot stop
     * processing this node because alternative to has another way to continue,
     * via {@code [6|2|[]]}.</p>
     *
     * <p>It also let's us continue for this rule:</p>
     *
     * <p>{@code [1|1|[], 1|2|[], 8|3|[]] a : A | A | A B ;}</p>
     *
     * <p>After matching input A, we reach the stop state for rule A, state 1.
     * State 8 is the state right before B. Clearly alternatives 1 and 2
     * conflict and no amount of further lookahead will separate the two.
     * However, alternative 3 will be able to continue and so we do not stop
     * working on this state. In the previous example, we're concerned with
     * states associated with the conflicting alternatives. Here alt 3 is not
     * associated with the conflicting configs, but since we can continue
     * looking for input reasonably, don't declare the state done.</p>
     *
     * <p><strong>PURE SLL PARSING</strong></p>
     *
     * <p>To handle pure SLL parsing, all we have to do is make sure that we
     * combine stack contexts for configurations that differ only by semantic
     * predicate. From there, we can do the usual SLL termination heuristic.</p>
     *
     * <p><strong>PREDICATES IN SLL+LL PARSING</strong></p>
     *
     * <p>SLL decisions don't evaluate predicates until after they reach DFA stop
     * states because they need to create the DFA cache that works in all
     * semantic situations. In contrast, full LL evaluates predicates collected
     * during start state computation so it can ignore predicates thereafter.
     * This means that SLL termination detection can totally ignore semantic
     * predicates.</p>
     *
     * <p>Implementation-wise, {@link ATNConfigSet} combines stack contexts but not
     * semantic predicate contexts so we might see two configurations like the
     * following.</p>
     *
     * <p>{@code (s, 1, x, {}), (s, 1, x', {p})}</p>
     *
     * <p>Before testing these configurations against others, we have to merge
     * {@code x} and {@code x'} (without modifying the existing configurations).
     * For example, we test {@code (x+x')==x''} when looking for conflicts in
     * the following configurations.</p>
     *
     * <p>{@code (s, 1, x, {}), (s, 1, x', {p}), (s, 2, x'', {})}</p>
     *
     * <p>If the configuration set has predicates (as indicated by
     * {@link ATNConfigSet//hasSemanticContext}), this algorithm makes a copy of
     * the configurations to strip out all of the predicates so that a standard
     * {@link ATNConfigSet} will merge everything ignoring predicates.</p>
     */
    hasSLLConflictTerminatingPrediction: function( mode, configs) {
        // Configs in rule stop states indicate reaching the end of the decision
        // rule (local context) or end of start rule (full context). If all
        // configs meet this condition, then none of the configurations is able
        // to match additional input so we terminate prediction.
        //
        if (PredictionMode.allConfigsInRuleStopStates(configs)) {
            return true;
        }
        // pure SLL mode parsing
        if (mode === PredictionMode.SLL) {
            // Don't bother with combining configs from different semantic
            // contexts if we can fail over to full LL; costs more time
            // since we'll often fail over anyway.
            if (configs.hasSemanticContext) {
                // dup configs, tossing out semantic predicates
                const dup = new ATNConfigSet();
                for(let i=0;i<configs.items.length;i++) {
                    let c = configs.items[i];
                    c = new ATNConfig({semanticContext:SemanticContext.NONE}, c);
                    dup.add(c);
                }
                configs = dup;
            }
            // now we have combined contexts for configs with dissimilar preds
        }
        // pure SLL or combined SLL+LL mode parsing
        const altsets = PredictionMode.getConflictingAltSubsets(configs);
        return PredictionMode.hasConflictingAltSet(altsets) && !PredictionMode.hasStateAssociatedWithOneAlt(configs);
    },

    /**
     * Checks if any configuration in {@code configs} is in a
     * {@link RuleStopState}. Configurations meeting this condition have reached
     * the end of the decision rule (local context) or end of start rule (full
     * context).
     *
     * @param configs the configuration set to test
     * @return {@code true} if any configuration in {@code configs} is in a
     * {@link RuleStopState}, otherwise {@code false}
     */
    hasConfigInRuleStopState: function(configs) {
        for(let i=0;i<configs.items.length;i++) {
            const c = configs.items[i];
            if (c.state instanceof RuleStopState) {
                return true;
            }
        }
        return false;
    },

    /**
     * Checks if all configurations in {@code configs} are in a
     * {@link RuleStopState}. Configurations meeting this condition have reached
     * the end of the decision rule (local context) or end of start rule (full
     * context).
     *
     * @param configs the configuration set to test
     * @return {@code true} if all configurations in {@code configs} are in a
     * {@link RuleStopState}, otherwise {@code false}
     */
    allConfigsInRuleStopStates: function(configs) {
        for(let i=0;i<configs.items.length;i++) {
            const c = configs.items[i];
            if (!(c.state instanceof RuleStopState)) {
                return false;
            }
        }
        return true;
    },

    /**
     *
     * Full LL prediction termination.
     *
     * <p>Can we stop looking ahead during ATN simulation or is there some
     * uncertainty as to which alternative we will ultimately pick, after
     * consuming more input? Even if there are partial conflicts, we might know
     * that everything is going to resolve to the same minimum alternative. That
     * means we can stop since no more lookahead will change that fact. On the
     * other hand, there might be multiple conflicts that resolve to different
     * minimums. That means we need more look ahead to decide which of those
     * alternatives we should predict.</p>
     *
     * <p>The basic idea is to split the set of configurations {@code C}, into
     * conflicting subsets {@code (s, _, ctx, _)} and singleton subsets with
     * non-conflicting configurations. Two configurations conflict if they have
     * identical {@link ATNConfig//state} and {@link ATNConfig//context} values
     * but different {@link ATNConfig//alt} value, e.g. {@code (s, i, ctx, _)}
     * and {@code (s, j, ctx, _)} for {@code i!=j}.</p>
     *
     * <p>Reduce these configuration subsets to the set of possible alternatives.
     * You can compute the alternative subsets in one pass as follows:</p>
     *
     * <p>{@code A_s,ctx = {i | (s, i, ctx, _)}} for each configuration in
     * {@code C} holding {@code s} and {@code ctx} fixed.</p>
     *
     * <p>Or in pseudo-code, for each configuration {@code c} in {@code C}:</p>
     *
     * <pre>
     * map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
     * alt and not pred
     * </pre>
     *
     * <p>The values in {@code map} are the set of {@code A_s,ctx} sets.</p>
     *
     * <p>If {@code |A_s,ctx|=1} then there is no conflict associated with
     * {@code s} and {@code ctx}.</p>
     *
     * <p>Reduce the subsets to singletons by choosing a minimum of each subset. If
     * the union of these alternative subsets is a singleton, then no amount of
     * more lookahead will help us. We will always pick that alternative. If,
     * however, there is more than one alternative, then we are uncertain which
     * alternative to predict and must continue looking for resolution. We may
     * or may not discover an ambiguity in the future, even if there are no
     * conflicting subsets this round.</p>
     *
     * <p>The biggest sin is to terminate early because it means we've made a
     * decision but were uncertain as to the eventual outcome. We haven't used
     * enough lookahead. On the other hand, announcing a conflict too late is no
     * big deal; you will still have the conflict. It's just inefficient. It
     * might even look until the end of file.</p>
     *
     * <p>No special consideration for semantic predicates is required because
     * predicates are evaluated on-the-fly for full LL prediction, ensuring that
     * no configuration contains a semantic context during the termination
     * check.</p>
     *
     * <p><strong>CONFLICTING CONFIGS</strong></p>
     *
     * <p>Two configurations {@code (s, i, x)} and {@code (s, j, x')}, conflict
     * when {@code i!=j} but {@code x=x'}. Because we merge all
     * {@code (s, i, _)} configurations together, that means that there are at
     * most {@code n} configurations associated with state {@code s} for
     * {@code n} possible alternatives in the decision. The merged stacks
     * complicate the comparison of configuration contexts {@code x} and
     * {@code x'}. Sam checks to see if one is a subset of the other by calling
     * merge and checking to see if the merged result is either {@code x} or
     * {@code x'}. If the {@code x} associated with lowest alternative {@code i}
     * is the superset, then {@code i} is the only possible prediction since the
     * others resolve to {@code min(i)} as well. However, if {@code x} is
     * associated with {@code j>i} then at least one stack configuration for
     * {@code j} is not in conflict with alternative {@code i}. The algorithm
     * should keep going, looking for more lookahead due to the uncertainty.</p>
     *
     * <p>For simplicity, I'm doing a equality check between {@code x} and
     * {@code x'} that lets the algorithm continue to consume lookahead longer
     * than necessary. The reason I like the equality is of course the
     * simplicity but also because that is the test you need to detect the
     * alternatives that are actually in conflict.</p>
     *
     * <p><strong>CONTINUE/STOP RULE</strong></p>
     *
     * <p>Continue if union of resolved alternative sets from non-conflicting and
     * conflicting alternative subsets has more than one alternative. We are
     * uncertain about which alternative to predict.</p>
     *
     * <p>The complete set of alternatives, {@code [i for (_,i,_)]}, tells us which
     * alternatives are still in the running for the amount of input we've
     * consumed at this point. The conflicting sets let us to strip away
     * configurations that won't lead to more states because we resolve
     * conflicts to the configuration with a minimum alternate for the
     * conflicting set.</p>
     *
     * <p><strong>CASES</strong></p>
     *
     * <ul>
     *
     * <li>no conflicts and more than 1 alternative in set =&gt; continue</li>
     *
     * <li> {@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s, 3, z)},
     * {@code (s', 1, y)}, {@code (s', 2, y)} yields non-conflicting set
     * {@code {3}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
     * {@code {1,3}} =&gt; continue
     * </li>
     *
     * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
     * {@code (s', 2, y)}, {@code (s'', 1, z)} yields non-conflicting set
     * {@code {1}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =
     * {@code {1}} =&gt; stop and predict 1</li>
     *
     * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},
     * {@code (s', 2, y)} yields conflicting, reduced sets {@code {1}} U
     * {@code {1}} = {@code {1}} =&gt; stop and predict 1, can announce
     * ambiguity {@code {1,2}}</li>
     *
     * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 2, y)},
     * {@code (s', 3, y)} yields conflicting, reduced sets {@code {1}} U
     * {@code {2}} = {@code {1,2}} =&gt; continue</li>
     *
     * <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 3, y)},
     * {@code (s', 4, y)} yields conflicting, reduced sets {@code {1}} U
     * {@code {3}} = {@code {1,3}} =&gt; continue</li>
     *
     * </ul>
     *
     * <p><strong>EXACT AMBIGUITY DETECTION</strong></p>
     *
     * <p>If all states report the same conflicting set of alternatives, then we
     * know we have the exact ambiguity set.</p>
     *
     * <p><code>|A_<em>i</em>|&gt;1</code> and
     * <code>A_<em>i</em> = A_<em>j</em></code> for all <em>i</em>, <em>j</em>.</p>
     *
     * <p>In other words, we continue examining lookahead until all {@code A_i}
     * have more than one alternative and all {@code A_i} are the same. If
     * {@code A={{1,2}, {1,3}}}, then regular LL prediction would terminate
     * because the resolved set is {@code {1}}. To determine what the real
     * ambiguity is, we have to know whether the ambiguity is between one and
     * two or one and three so we keep going. We can only stop prediction when
     * we need exact ambiguity detection when the sets look like
     * {@code A={{1,2}}} or {@code {{1,2},{1,2}}}, etc...</p>
     */
    resolvesToJustOneViableAlt: function(altsets) {
        return PredictionMode.getSingleViableAlt(altsets);
    },

    /**
     * Determines if every alternative subset in {@code altsets} contains more
     * than one alternative.
     *
     * @param altsets a collection of alternative subsets
     * @return {@code true} if every {@link BitSet} in {@code altsets} has
     * {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
     */
    allSubsetsConflict: function(altsets) {
        return ! PredictionMode.hasNonConflictingAltSet(altsets);
    },
    /**
     * Determines if any single alternative subset in {@code altsets} contains
     * exactly one alternative.
     *
     * @param altsets a collection of alternative subsets
     * @return {@code true} if {@code altsets} contains a {@link BitSet} with
     * {@link BitSet//cardinality cardinality} 1, otherwise {@code false}
     */
    hasNonConflictingAltSet: function(altsets) {
        for(let i=0;i<altsets.length;i++) {
            const alts = altsets[i];
            if (alts.length===1) {
                return true;
            }
        }
        return false;
    },


    /**
     * Determines if any single alternative subset in {@code altsets} contains
     * more than one alternative.
     *
     * @param altsets a collection of alternative subsets
     * @return {@code true} if {@code altsets} contains a {@link BitSet} with
     * {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}
     */
    hasConflictingAltSet: function(altsets) {
        for(let i=0;i<altsets.length;i++) {
            const alts = altsets[i];
            if (alts.length>1) {
                return true;
            }
        }
        return false;
    },


    /**
     * Determines if every alternative subset in {@code altsets} is equivalent.
     *
     * @param altsets a collection of alternative subsets
     * @return {@code true} if every member of {@code altsets} is equal to the
     * others, otherwise {@code false}
     */
    allSubsetsEqual: function(altsets) {
        let first = null;
        for(let i=0;i<altsets.length;i++) {
            const alts = altsets[i];
            if (first === null) {
                first = alts;
            } else if (alts!==first) {
                return false;
            }
        }
        return true;
    },


    /**
     * Returns the unique alternative predicted by all alternative subsets in
     * {@code altsets}. If no such alternative exists, this method returns
     * {@link ATN//INVALID_ALT_NUMBER}.
     *
     * @param altsets a collection of alternative subsets
     */
    getUniqueAlt: function(altsets) {
        const all = PredictionMode.getAlts(altsets);
        if (all.length===1) {
            return all.minValue();
        } else {
            return ATN.INVALID_ALT_NUMBER;
        }
    },

    /**
     * Gets the complete set of represented alternatives for a collection of
     * alternative subsets. This method returns the union of each {@link BitSet}
     * in {@code altsets}.
     *
     * @param altsets a collection of alternative subsets
     * @return the set of represented alternatives in {@code altsets}
     */
    getAlts: function(altsets) {
        const all = new BitSet();
        altsets.map( function(alts) { all.or(alts); });
        return all;
    },

    /**
     * This function gets the conflicting alt subsets from a configuration set.
     * For each configuration {@code c} in {@code configs}:
     *
     * <pre>
     * map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not
     * alt and not pred
     * </pre>
     */
    getConflictingAltSubsets: function(configs) {
        const configToAlts = new Map();
        configToAlts.hashFunction = function(cfg) { hashStuff(cfg.state.stateNumber, cfg.context); };
        configToAlts.equalsFunction = function(c1, c2) { return c1.state.stateNumber==c2.state.stateNumber && c1.context.equals(c2.context);}
        configs.items.map(function(cfg) {
            let alts = configToAlts.get(cfg);
            if (alts === null) {
                alts = new BitSet();
                configToAlts.put(cfg, alts);
            }
            alts.add(cfg.alt);
        });
        return configToAlts.getValues();
    },

    /**
     * Get a map from state to alt subset from a configuration set. For each
     * configuration {@code c} in {@code configs}:
     *
     * <pre>
     * map[c.{@link ATNConfig//state state}] U= c.{@link ATNConfig//alt alt}
     * </pre>
     */
    getStateToAltMap: function(configs) {
        const m = new AltDict();
        configs.items.map(function(c) {
            let alts = m.get(c.state);
            if (alts === null) {
                alts = new BitSet();
                m.put(c.state, alts);
            }
            alts.add(c.alt);
        });
        return m;
    },

    hasStateAssociatedWithOneAlt: function(configs) {
        const values = PredictionMode.getStateToAltMap(configs).values();
        for(let i=0;i<values.length;i++) {
            if (values[i].length===1) {
                return true;
            }
        }
        return false;
    },

    getSingleViableAlt: function(altsets) {
        let result = null;
        for(let i=0;i<altsets.length;i++) {
            const alts = altsets[i];
            const minAlt = alts.minValue();
            if(result===null) {
                result = minAlt;
            } else if(result!==minAlt) { // more than 1 viable alt
                return ATN.INVALID_ALT_NUMBER;
            }
        }
        return result;
    }
}

module.exports = PredictionMode;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/SemanticContext.js":
/*!***************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/SemanticContext.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Set, Hash} = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/src/antlr4/Utils.js");

/**
 * A tree structure used to record the semantic context in which
 * an ATN configuration is valid.  It's either a single predicate,
 * a conjunction {@code p1&&p2}, or a sum of products {@code p1||p2}.
 *
 * <p>I have scoped the {@link AND}, {@link OR}, and {@link Predicate} subclasses of
 * {@link SemanticContext} within the scope of this outer class.</p>
 */
class SemanticContext {
	hashCode() {
		const hash = new Hash();
		this.updateHashCode(hash);
		return hash.finish();
	}

	/**
	 * For context independent predicates, we evaluate them without a local
	 * context (i.e., null context). That way, we can evaluate them without
	 * having to create proper rule-specific context during prediction (as
	 * opposed to the parser, which creates them naturally). In a practical
	 * sense, this avoids a cast exception from RuleContext to myruleContext.
	 *
	 * <p>For context dependent predicates, we must pass in a local context so that
	 * references such as $arg evaluate properly as _localctx.arg. We only
	 * capture context dependent predicates in the context in which we begin
	 * prediction, so we passed in the outer context here in case of context
	 * dependent predicate evaluation.</p>
	 */
	evaluate(parser, outerContext) {}

	/**
	 * Evaluate the precedence predicates for the context and reduce the result.
	 *
	 * @param parser The parser instance.
	 * @param outerContext The current parser context object.
	 * @return The simplified semantic context after precedence predicates are
	 * evaluated, which will be one of the following values.
	 * <ul>
	 * <li>{@link //NONE}: if the predicate simplifies to {@code true} after
	 * precedence predicates are evaluated.</li>
	 * <li>{@code null}: if the predicate simplifies to {@code false} after
	 * precedence predicates are evaluated.</li>
	 * <li>{@code this}: if the semantic context is not changed as a result of
	 * precedence predicate evaluation.</li>
	 * <li>A non-{@code null} {@link SemanticContext}: the new simplified
	 * semantic context after precedence predicates are evaluated.</li>
	 * </ul>
	 */
	evalPrecedence(parser, outerContext) {
		return this;
	}

	static andContext(a, b) {
		if (a === null || a === SemanticContext.NONE) {
			return b;
		}
		if (b === null || b === SemanticContext.NONE) {
			return a;
		}
		const result = new AND(a, b);
		if (result.opnds.length === 1) {
			return result.opnds[0];
		} else {
			return result;
		}
	}

	static orContext(a, b) {
		if (a === null) {
			return b;
		}
		if (b === null) {
			return a;
		}
		if (a === SemanticContext.NONE || b === SemanticContext.NONE) {
			return SemanticContext.NONE;
		}
		const result = new OR(a, b);
		if (result.opnds.length === 1) {
			return result.opnds[0];
		} else {
			return result;
		}
	}
}


class Predicate extends SemanticContext {
	constructor(ruleIndex, predIndex, isCtxDependent) {
		super();
		this.ruleIndex = ruleIndex === undefined ? -1 : ruleIndex;
		this.predIndex = predIndex === undefined ? -1 : predIndex;
		this.isCtxDependent = isCtxDependent === undefined ? false : isCtxDependent; // e.g., $i ref in pred
	}

	evaluate(parser, outerContext) {
		const localctx = this.isCtxDependent ? outerContext : null;
		return parser.sempred(localctx, this.ruleIndex, this.predIndex);
	}

	updateHashCode(hash) {
		hash.update(this.ruleIndex, this.predIndex, this.isCtxDependent);
	}

	equals(other) {
		if (this === other) {
			return true;
		} else if (!(other instanceof Predicate)) {
			return false;
		} else {
			return this.ruleIndex === other.ruleIndex &&
					this.predIndex === other.predIndex &&
					this.isCtxDependent === other.isCtxDependent;
		}
	}

	toString() {
		return "{" + this.ruleIndex + ":" + this.predIndex + "}?";
	}
}

/**
 * The default {@link SemanticContext}, which is semantically equivalent to
 * a predicate of the form {@code {true}?}
 */
SemanticContext.NONE = new Predicate();


class PrecedencePredicate extends SemanticContext {
	constructor(precedence) {
		super();
		this.precedence = precedence === undefined ? 0 : precedence;
	}

	evaluate(parser, outerContext) {
		return parser.precpred(outerContext, this.precedence);
	}

	evalPrecedence(parser, outerContext) {
		if (parser.precpred(outerContext, this.precedence)) {
			return SemanticContext.NONE;
		} else {
			return null;
		}
	}

	compareTo(other) {
		return this.precedence - other.precedence;
	}

	updateHashCode(hash) {
		hash.update(31);
	}

	equals(other) {
		if (this === other) {
			return true;
		} else if (!(other instanceof PrecedencePredicate)) {
			return false;
		} else {
			return this.precedence === other.precedence;
		}
	}

	toString() {
		return "{"+this.precedence+">=prec}?";
	}

	static filterPrecedencePredicates(set) {
		const result = [];
		set.values().map( function(context) {
			if (context instanceof PrecedencePredicate) {
				result.push(context);
			}
		});
		return result;
	}
}

class AND extends SemanticContext {
	/**
	 * A semantic context which is true whenever none of the contained contexts
	 * is false
	 */
	constructor(a, b) {
		super();
		const operands = new Set();
		if (a instanceof AND) {
			a.opnds.map(function(o) {
				operands.add(o);
			});
		} else {
			operands.add(a);
		}
		if (b instanceof AND) {
			b.opnds.map(function(o) {
				operands.add(o);
			});
		} else {
			operands.add(b);
		}
		const precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);
		if (precedencePredicates.length > 0) {
			// interested in the transition with the lowest precedence
			let reduced = null;
			precedencePredicates.map( function(p) {
				if(reduced===null || p.precedence<reduced.precedence) {
					reduced = p;
				}
			});
			operands.add(reduced);
		}
		this.opnds = operands.values();
	}

	equals(other) {
		if (this === other) {
			return true;
		} else if (!(other instanceof AND)) {
			return false;
		} else {
			return this.opnds === other.opnds;
		}
	}

	updateHashCode(hash) {
		hash.update(this.opnds, "AND");
	}

	/**
	 * {@inheritDoc}
	 *
	 * <p>
	 * The evaluation of predicates by this context is short-circuiting, but
	 * unordered.</p>
	 */
	evaluate(parser, outerContext) {
		for (let i = 0; i < this.opnds.length; i++) {
			if (!this.opnds[i].evaluate(parser, outerContext)) {
				return false;
			}
		}
		return true;
	}

	evalPrecedence(parser, outerContext) {
		let differs = false;
		const operands = [];
		for (let i = 0; i < this.opnds.length; i++) {
			const context = this.opnds[i];
			const evaluated = context.evalPrecedence(parser, outerContext);
			differs |= (evaluated !== context);
			if (evaluated === null) {
				// The AND context is false if any element is false
				return null;
			} else if (evaluated !== SemanticContext.NONE) {
				// Reduce the result by skipping true elements
				operands.push(evaluated);
			}
		}
		if (!differs) {
			return this;
		}
		if (operands.length === 0) {
			// all elements were true, so the AND context is true
			return SemanticContext.NONE;
		}
		let result = null;
		operands.map(function(o) {
			result = result === null ? o : SemanticContext.andContext(result, o);
		});
		return result;
	}

	toString() {
		let s = "";
		this.opnds.map(function(o) {
			s += "&& " + o.toString();
		});
		return s.length > 3 ? s.slice(3) : s;
	}
}


class OR extends SemanticContext {
	/**
	 * A semantic context which is true whenever at least one of the contained
	 * contexts is true
	 */
	constructor(a, b) {
		super();
		const operands = new Set();
		if (a instanceof OR) {
			a.opnds.map(function(o) {
				operands.add(o);
			});
		} else {
			operands.add(a);
		}
		if (b instanceof OR) {
			b.opnds.map(function(o) {
				operands.add(o);
			});
		} else {
			operands.add(b);
		}

		const precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);
		if (precedencePredicates.length > 0) {
			// interested in the transition with the highest precedence
			const s = precedencePredicates.sort(function(a, b) {
				return a.compareTo(b);
			});
			const reduced = s[s.length-1];
			operands.add(reduced);
		}
		this.opnds = operands.values();
	}

	equals(other) {
		if (this === other) {
			return true;
		} else if (!(other instanceof OR)) {
			return false;
		} else {
			return this.opnds === other.opnds;
		}
	}

	updateHashCode(hash) {
		hash.update(this.opnds, "OR");
	}

	/**
	 * <p>
	 * The evaluation of predicates by this context is short-circuiting, but
	 * unordered.</p>
	 */
	evaluate(parser, outerContext) {
		for (let i = 0; i < this.opnds.length; i++) {
			if (this.opnds[i].evaluate(parser, outerContext)) {
				return true;
			}
		}
		return false;
	}

	evalPrecedence(parser, outerContext) {
		let differs = false;
		const operands = [];
		for (let i = 0; i < this.opnds.length; i++) {
			const context = this.opnds[i];
			const evaluated = context.evalPrecedence(parser, outerContext);
			differs |= (evaluated !== context);
			if (evaluated === SemanticContext.NONE) {
				// The OR context is true if any element is true
				return SemanticContext.NONE;
			} else if (evaluated !== null) {
				// Reduce the result by skipping false elements
				operands.push(evaluated);
			}
		}
		if (!differs) {
			return this;
		}
		if (operands.length === 0) {
			// all elements were false, so the OR context is false
			return null;
		}
		const result = null;
		operands.map(function(o) {
			return result === null ? o : SemanticContext.orContext(result, o);
		});
		return result;
	}

	toString() {
		let s = "";
		this.opnds.map(function(o) {
			s += "|| " + o.toString();
		});
		return s.length > 3 ? s.slice(3) : s;
	}
}

module.exports = {
	SemanticContext,
	PrecedencePredicate,
	Predicate
}


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/Transition.js":
/*!**********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/Transition.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = __webpack_require__(/*! ./../Token */ "./node_modules/antlr4/src/antlr4/Token.js");
const {IntervalSet} = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/src/antlr4/IntervalSet.js");
const {Predicate, PrecedencePredicate} = __webpack_require__(/*! ./SemanticContext */ "./node_modules/antlr4/src/antlr4/atn/SemanticContext.js");

/**
 * An ATN transition between any two ATN states.  Subclasses define
 * atom, set, epsilon, action, predicate, rule transitions.
 *
 * <p>This is a one way link.  It emanates from a state (usually via a list of
 * transitions) and has a target state.</p>
 *
 * <p>Since we never have to change the ATN transitions once we construct it,
 * we can fix these transitions as specific classes. The DFA transitions
 * on the other hand need to update the labels as it adds transitions to
 * the states. We'll use the term Edge for the DFA to distinguish them from
 * ATN transitions.</p>
 */
class Transition {
    constructor(target) {
        // The target of this transition.
        if (target===undefined || target===null) {
            throw "target cannot be null.";
        }
        this.target = target;
        // Are we epsilon, action, sempred?
        this.isEpsilon = false;
        this.label = null;
    }
}

// constants for serialization

Transition.EPSILON = 1;
Transition.RANGE = 2;
Transition.RULE = 3;
// e.g., {isType(input.LT(1))}?
Transition.PREDICATE = 4;
Transition.ATOM = 5;
Transition.ACTION = 6;
// ~(A|B) or ~atom, wildcard, which convert to next 2
Transition.SET = 7;
Transition.NOT_SET = 8;
Transition.WILDCARD = 9;
Transition.PRECEDENCE = 10;

Transition.serializationNames = [
            "INVALID",
            "EPSILON",
            "RANGE",
            "RULE",
            "PREDICATE",
            "ATOM",
            "ACTION",
            "SET",
            "NOT_SET",
            "WILDCARD",
            "PRECEDENCE"
        ];

Transition.serializationTypes = {
        EpsilonTransition: Transition.EPSILON,
        RangeTransition: Transition.RANGE,
        RuleTransition: Transition.RULE,
        PredicateTransition: Transition.PREDICATE,
        AtomTransition: Transition.ATOM,
        ActionTransition: Transition.ACTION,
        SetTransition: Transition.SET,
        NotSetTransition: Transition.NOT_SET,
        WildcardTransition: Transition.WILDCARD,
        PrecedencePredicateTransition: Transition.PRECEDENCE
    };


// TODO: make all transitions sets? no, should remove set edges

class AtomTransition extends Transition {
    constructor(target, label) {
        super(target);
        // The token type or character value; or, signifies special label.
        this.label_ = label;
        this.label = this.makeLabel();
        this.serializationType = Transition.ATOM;
    }

    makeLabel() {
        const s = new IntervalSet();
        s.addOne(this.label_);
        return s;
    }

    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return this.label_ === symbol;
    }

    toString() {
        return this.label_;
    }
}


class RuleTransition extends Transition {
    constructor(ruleStart, ruleIndex, precedence, followState) {
        super(ruleStart);
        // ptr to the rule definition object for this rule ref
        this.ruleIndex = ruleIndex;
        this.precedence = precedence;
        // what node to begin computations following ref to rule
        this.followState = followState;
        this.serializationType = Transition.RULE;
        this.isEpsilon = true;
    }

    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return false;
    }
}

class EpsilonTransition extends Transition {
    constructor(target, outermostPrecedenceReturn) {
        super(target);
        this.serializationType = Transition.EPSILON;
        this.isEpsilon = true;
        this.outermostPrecedenceReturn = outermostPrecedenceReturn;
    }

    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return false;
    }

    toString() {
        return "epsilon";
    }
}


class RangeTransition extends Transition {
    constructor(target, start, stop) {
        super(target);
        this.serializationType = Transition.RANGE;
        this.start = start;
        this.stop = stop;
        this.label = this.makeLabel();
    }

    makeLabel() {
        const s = new IntervalSet();
        s.addRange(this.start, this.stop);
        return s;
    }

    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return symbol >= this.start && symbol <= this.stop;
    }

    toString() {
        return "'" + String.fromCharCode(this.start) + "'..'" + String.fromCharCode(this.stop) + "'";
    }
}


class AbstractPredicateTransition extends Transition {
    constructor(target) {
        super(target);
    }
}

class PredicateTransition extends AbstractPredicateTransition {
    constructor(target, ruleIndex, predIndex, isCtxDependent) {
        super(target);
        this.serializationType = Transition.PREDICATE;
        this.ruleIndex = ruleIndex;
        this.predIndex = predIndex;
        this.isCtxDependent = isCtxDependent; // e.g., $i ref in pred
        this.isEpsilon = true;
    }

    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return false;
    }

    getPredicate() {
        return new Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);
    }

    toString() {
        return "pred_" + this.ruleIndex + ":" + this.predIndex;
    }
}


class ActionTransition extends Transition {
    constructor(target, ruleIndex, actionIndex, isCtxDependent) {
        super(target);
        this.serializationType = Transition.ACTION;
        this.ruleIndex = ruleIndex;
        this.actionIndex = actionIndex===undefined ? -1 : actionIndex;
        this.isCtxDependent = isCtxDependent===undefined ? false : isCtxDependent; // e.g., $i ref in pred
        this.isEpsilon = true;
    }

    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return false;
    }

    toString() {
        return "action_" + this.ruleIndex + ":" + this.actionIndex;
    }
}


// A transition containing a set of values.
class SetTransition extends Transition {
    constructor(target, set) {
        super(target);
        this.serializationType = Transition.SET;
        if (set !==undefined && set !==null) {
            this.label = set;
        } else {
            this.label = new IntervalSet();
            this.label.addOne(Token.INVALID_TYPE);
        }
    }

    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return this.label.contains(symbol);
    }

    toString() {
        return this.label.toString();
    }
}

class NotSetTransition extends SetTransition {
    constructor(target, set) {
        super(target, set);
        this.serializationType = Transition.NOT_SET;
    }

    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return symbol >= minVocabSymbol && symbol <= maxVocabSymbol &&
                !super.matches(symbol, minVocabSymbol, maxVocabSymbol);
    }

    toString() {
        return '~' + super.toString();
    }
}

class WildcardTransition extends Transition {
    constructor(target) {
        super(target);
        this.serializationType = Transition.WILDCARD;
    }

    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return symbol >= minVocabSymbol && symbol <= maxVocabSymbol;
    }

    toString() {
        return ".";
    }
}

class PrecedencePredicateTransition extends AbstractPredicateTransition {
    constructor(target, precedence) {
        super(target);
        this.serializationType = Transition.PRECEDENCE;
        this.precedence = precedence;
        this.isEpsilon = true;
    }

    matches(symbol, minVocabSymbol, maxVocabSymbol) {
        return false;
    }

    getPredicate() {
        return new PrecedencePredicate(this.precedence);
    }

    toString() {
        return this.precedence + " >= _p";
    }
}

module.exports = {
    Transition,
    AtomTransition,
    SetTransition,
    NotSetTransition,
    RuleTransition,
    ActionTransition,
    EpsilonTransition,
    RangeTransition,
    WildcardTransition,
    PredicateTransition,
    PrecedencePredicateTransition,
    AbstractPredicateTransition
}


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/atn/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/atn/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.ATN = __webpack_require__(/*! ./ATN */ "./node_modules/antlr4/src/antlr4/atn/ATN.js");
exports.ATNDeserializer = __webpack_require__(/*! ./ATNDeserializer */ "./node_modules/antlr4/src/antlr4/atn/ATNDeserializer.js");
exports.LexerATNSimulator = __webpack_require__(/*! ./LexerATNSimulator */ "./node_modules/antlr4/src/antlr4/atn/LexerATNSimulator.js");
exports.ParserATNSimulator = __webpack_require__(/*! ./ParserATNSimulator */ "./node_modules/antlr4/src/antlr4/atn/ParserATNSimulator.js");
exports.PredictionMode = __webpack_require__(/*! ./PredictionMode */ "./node_modules/antlr4/src/antlr4/atn/PredictionMode.js");


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/dfa/DFA.js":
/*!***************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/dfa/DFA.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Set} = __webpack_require__(/*! ../Utils */ "./node_modules/antlr4/src/antlr4/Utils.js");
const {DFAState} = __webpack_require__(/*! ./DFAState */ "./node_modules/antlr4/src/antlr4/dfa/DFAState.js");
const {StarLoopEntryState} = __webpack_require__(/*! ../atn/ATNState */ "./node_modules/antlr4/src/antlr4/atn/ATNState.js");
const {ATNConfigSet} = __webpack_require__(/*! ./../atn/ATNConfigSet */ "./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js");
const {DFASerializer} = __webpack_require__(/*! ./DFASerializer */ "./node_modules/antlr4/src/antlr4/dfa/DFASerializer.js");
const {LexerDFASerializer} = __webpack_require__(/*! ./DFASerializer */ "./node_modules/antlr4/src/antlr4/dfa/DFASerializer.js");

class DFA {
	constructor(atnStartState, decision) {
		if (decision === undefined) {
			decision = 0;
		}
		/**
		 * From which ATN state did we create this DFA?
		 */
		this.atnStartState = atnStartState;
		this.decision = decision;
		/**
		 * A set of all DFA states. Use {@link Map} so we can get old state back
		 * ({@link Set} only allows you to see if it's there).
		 */
		this._states = new Set();
		this.s0 = null;
		/**
		 * {@code true} if this DFA is for a precedence decision; otherwise,
		 * {@code false}. This is the backing field for {@link //isPrecedenceDfa},
		 * {@link //setPrecedenceDfa}
		 */
		this.precedenceDfa = false;
		if (atnStartState instanceof StarLoopEntryState)
		{
			if (atnStartState.isPrecedenceDecision) {
				this.precedenceDfa = true;
				const precedenceState = new DFAState(null, new ATNConfigSet());
				precedenceState.edges = [];
				precedenceState.isAcceptState = false;
				precedenceState.requiresFullContext = false;
				this.s0 = precedenceState;
			}
		}
	}

	/**
	 * Get the start state for a specific precedence value.
	 *
	 * @param precedence The current precedence.
	 * @return The start state corresponding to the specified precedence, or
	 * {@code null} if no start state exists for the specified precedence.
	 *
	 * @throws IllegalStateException if this is not a precedence DFA.
	 * @see //isPrecedenceDfa()
	 */
	getPrecedenceStartState(precedence) {
		if (!(this.precedenceDfa)) {
			throw ("Only precedence DFAs may contain a precedence start state.");
		}
		// s0.edges is never null for a precedence DFA
		if (precedence < 0 || precedence >= this.s0.edges.length) {
			return null;
		}
		return this.s0.edges[precedence] || null;
	}

	/**
	 * Set the start state for a specific precedence value.
	 *
	 * @param precedence The current precedence.
	 * @param startState The start state corresponding to the specified
	 * precedence.
	 *
	 * @throws IllegalStateException if this is not a precedence DFA.
	 * @see //isPrecedenceDfa()
	 */
	setPrecedenceStartState(precedence, startState) {
		if (!(this.precedenceDfa)) {
			throw ("Only precedence DFAs may contain a precedence start state.");
		}
		if (precedence < 0) {
			return;
		}

		/**
		 * synchronization on s0 here is ok. when the DFA is turned into a
		 * precedence DFA, s0 will be initialized once and not updated again
		 * s0.edges is never null for a precedence DFA
		 */
		this.s0.edges[precedence] = startState;
	}

	/**
	 * Sets whether this is a precedence DFA. If the specified value differs
	 * from the current DFA configuration, the following actions are taken;
	 * otherwise no changes are made to the current DFA.
	 *
	 * <ul>
	 * <li>The {@link //states} map is cleared</li>
	 * <li>If {@code precedenceDfa} is {@code false}, the initial state
	 * {@link //s0} is set to {@code null}; otherwise, it is initialized to a new
	 * {@link DFAState} with an empty outgoing {@link DFAState//edges} array to
	 * store the start states for individual precedence values.</li>
	 * <li>The {@link //precedenceDfa} field is updated</li>
	 * </ul>
	 *
	 * @param precedenceDfa {@code true} if this is a precedence DFA; otherwise,
	 * {@code false}
	 */
	setPrecedenceDfa(precedenceDfa) {
		if (this.precedenceDfa!==precedenceDfa) {
			this._states = new DFAStatesSet();
			if (precedenceDfa) {
				const precedenceState = new DFAState(null, new ATNConfigSet());
				precedenceState.edges = [];
				precedenceState.isAcceptState = false;
				precedenceState.requiresFullContext = false;
				this.s0 = precedenceState;
			} else {
				this.s0 = null;
			}
			this.precedenceDfa = precedenceDfa;
		}
	}

	/**
	 * Return a list of all states in this DFA, ordered by state number.
	 */
	sortedStates() {
		const list = this._states.values();
		return list.sort(function(a, b) {
			return a.stateNumber - b.stateNumber;
		});
	}

	toString(literalNames, symbolicNames) {
		literalNames = literalNames || null;
		symbolicNames = symbolicNames || null;
		if (this.s0 === null) {
			return "";
		}
		const serializer = new DFASerializer(this, literalNames, symbolicNames);
		return serializer.toString();
	}

	toLexerString() {
		if (this.s0 === null) {
			return "";
		}
		const serializer = new LexerDFASerializer(this);
		return serializer.toString();
	}

	get states(){
		return this._states;
	}
}


module.exports = DFA;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/dfa/DFASerializer.js":
/*!*************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/dfa/DFASerializer.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/**
 * A DFA walker that knows how to dump them to serialized strings.
 */
class DFASerializer {
    constructor(dfa, literalNames, symbolicNames) {
        this.dfa = dfa;
        this.literalNames = literalNames || [];
        this.symbolicNames = symbolicNames || [];
    }

    toString() {
       if(this.dfa.s0 === null) {
           return null;
       }
       let buf = "";
       const states = this.dfa.sortedStates();
       for(let i=0; i<states.length; i++) {
           const s = states[i];
           if(s.edges!==null) {
                const n = s.edges.length;
                for(let j=0;j<n;j++) {
                    const t = s.edges[j] || null;
                    if(t!==null && t.stateNumber !== 0x7FFFFFFF) {
                        buf = buf.concat(this.getStateString(s));
                        buf = buf.concat("-");
                        buf = buf.concat(this.getEdgeLabel(j));
                        buf = buf.concat("->");
                        buf = buf.concat(this.getStateString(t));
                        buf = buf.concat('\n');
                    }
                }
           }
       }
       return buf.length===0 ? null : buf;
    }

    getEdgeLabel(i) {
        if (i===0) {
            return "EOF";
        } else if(this.literalNames !==null || this.symbolicNames!==null) {
            return this.literalNames[i-1] || this.symbolicNames[i-1];
        } else {
            return String.fromCharCode(i-1);
        }
    }

    getStateString(s) {
        const baseStateStr = ( s.isAcceptState ? ":" : "") + "s" + s.stateNumber + ( s.requiresFullContext ? "^" : "");
        if(s.isAcceptState) {
            if (s.predicates !== null) {
                return baseStateStr + "=>" + s.predicates.toString();
            } else {
                return baseStateStr + "=>" + s.prediction.toString();
            }
        } else {
            return baseStateStr;
        }
    }
}

class LexerDFASerializer extends DFASerializer {
    constructor(dfa) {
        super(dfa, null);
    }

    getEdgeLabel(i) {
        return "'" + String.fromCharCode(i) + "'";
    }
}

module.exports = { DFASerializer , LexerDFASerializer };



/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/dfa/DFAState.js":
/*!********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/dfa/DFAState.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {ATNConfigSet} = __webpack_require__(/*! ./../atn/ATNConfigSet */ "./node_modules/antlr4/src/antlr4/atn/ATNConfigSet.js");
const {Hash, Set} = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/src/antlr4/Utils.js");

/**
 * Map a predicate to a predicted alternative.
 */
class PredPrediction {
	constructor(pred, alt) {
		this.alt = alt;
		this.pred = pred;
	}

	toString() {
		return "(" + this.pred + ", " + this.alt + ")";
	}
}

/**
 * A DFA state represents a set of possible ATN configurations.
 * As Aho, Sethi, Ullman p. 117 says "The DFA uses its state
 * to keep track of all possible states the ATN can be in after
 * reading each input symbol. That is to say, after reading
 * input a1a2..an, the DFA is in a state that represents the
 * subset T of the states of the ATN that are reachable from the
 * ATN's start state along some path labeled a1a2..an."
 * In conventional NFA&rarr;DFA conversion, therefore, the subset T
 * would be a bitset representing the set of states the
 * ATN could be in. We need to track the alt predicted by each
 * state as well, however. More importantly, we need to maintain
 * a stack of states, tracking the closure operations as they
 * jump from rule to rule, emulating rule invocations (method calls).
 * I have to add a stack to simulate the proper lookahead sequences for
 * the underlying LL grammar from which the ATN was derived.
 *
 * <p>I use a set of ATNConfig objects not simple states. An ATNConfig
 * is both a state (ala normal conversion) and a RuleContext describing
 * the chain of rules (if any) followed to arrive at that state.</p>
 *
 * <p>A DFA state may have multiple references to a particular state,
 * but with different ATN contexts (with same or different alts)
 * meaning that state was reached via a different set of rule invocations.</p>
 */
class DFAState {
	constructor(stateNumber, configs) {
		if (stateNumber === null) {
			stateNumber = -1;
		}
		if (configs === null) {
			configs = new ATNConfigSet();
		}
		this.stateNumber = stateNumber;
		this.configs = configs;
		/**
		 * {@code edges[symbol]} points to target of symbol. Shift up by 1 so (-1)
		 * {@link Token//EOF} maps to {@code edges[0]}.
		 */
		this.edges = null;
		this.isAcceptState = false;
		/**
		 * if accept state, what ttype do we match or alt do we predict?
		 * This is set to {@link ATN//INVALID_ALT_NUMBER} when {@link//predicates}
		 * {@code !=null} or {@link //requiresFullContext}.
		 */
		this.prediction = 0;
		this.lexerActionExecutor = null;
		/**
		 * Indicates that this state was created during SLL prediction that
		 * discovered a conflict between the configurations in the state. Future
		 * {@link ParserATNSimulator//execATN} invocations immediately jumped doing
		 * full context prediction if this field is true.
		 */
		this.requiresFullContext = false;
		/**
		 * During SLL parsing, this is a list of predicates associated with the
		 * ATN configurations of the DFA state. When we have predicates,
		 * {@link //requiresFullContext} is {@code false} since full context
		 * prediction evaluates predicates
		 * on-the-fly. If this is not null, then {@link //prediction} is
		 * {@link ATN//INVALID_ALT_NUMBER}.
		 *
		 * <p>We only use these for non-{@link //requiresFullContext} but
		 * conflicting states. That
		 * means we know from the context (it's $ or we don't dip into outer
		 * context) that it's an ambiguity not a conflict.</p>
		 *
		 * <p>This list is computed by {@link
		 * ParserATNSimulator//predicateDFAState}.</p>
		 */
		this.predicates = null;
		return this;
	}

	/**
	 * Get the set of all alts mentioned by all ATN configurations in this
	 * DFA state.
	 */
	getAltSet() {
		const alts = new Set();
		if (this.configs !== null) {
			for (let i = 0; i < this.configs.length; i++) {
				const c = this.configs[i];
				alts.add(c.alt);
			}
		}
		if (alts.length === 0) {
			return null;
		} else {
			return alts;
		}
	}

	/**
	 * Two {@link DFAState} instances are equal if their ATN configuration sets
	 * are the same. This method is used to see if a state already exists.
	 *
	 * <p>Because the number of alternatives and number of ATN configurations are
	 * finite, there is a finite number of DFA states that can be processed.
	 * This is necessary to show that the algorithm terminates.</p>
	 *
	 * <p>Cannot test the DFA state numbers here because in
	 * {@link ParserATNSimulator//addDFAState} we need to know if any other state
	 * exists that has this exact set of ATN configurations. The
	 * {@link //stateNumber} is irrelevant.</p>
	 */
	equals(other) {
		// compare set of ATN configurations in this set with other
		return this === other ||
				(other instanceof DFAState &&
					this.configs.equals(other.configs));
	}

	toString() {
		let s = "" + this.stateNumber + ":" + this.configs;
		if(this.isAcceptState) {
			s = s + "=>";
			if (this.predicates !== null)
				s = s + this.predicates;
			else
				s = s + this.prediction;
		}
		return s;
	}

	hashCode() {
		const hash = new Hash();
		hash.update(this.configs);
		return hash.finish();
	}
}

module.exports = { DFAState, PredPrediction };


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/dfa/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/dfa/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

exports.DFA = __webpack_require__(/*! ./DFA */ "./node_modules/antlr4/src/antlr4/dfa/DFA.js");
exports.DFASerializer = __webpack_require__(/*! ./DFASerializer */ "./node_modules/antlr4/src/antlr4/dfa/DFASerializer.js").DFASerializer;
exports.LexerDFASerializer = __webpack_require__(/*! ./DFASerializer */ "./node_modules/antlr4/src/antlr4/dfa/DFASerializer.js").LexerDFASerializer;
exports.PredPrediction = __webpack_require__(/*! ./DFAState */ "./node_modules/antlr4/src/antlr4/dfa/DFAState.js").PredPrediction;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/error/DiagnosticErrorListener.js":
/*!*************************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/error/DiagnosticErrorListener.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {BitSet} = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/src/antlr4/Utils.js");
const {ErrorListener} = __webpack_require__(/*! ./ErrorListener */ "./node_modules/antlr4/src/antlr4/error/ErrorListener.js")
const {Interval} = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/src/antlr4/IntervalSet.js")


/**
 * This implementation of {@link ANTLRErrorListener} can be used to identify
 *  certain potential correctness and performance problems in grammars. "Reports"
 *  are made by calling {@link Parser//notifyErrorListeners} with the appropriate
 *  message.
 *
 *  <ul>
 *  <li><b>Ambiguities</b>: These are cases where more than one path through the
 *  grammar can match the input.</li>
 *  <li><b>Weak context sensitivity</b>: These are cases where full-context
 *  prediction resolved an SLL conflict to a unique alternative which equaled the
 *  minimum alternative of the SLL conflict.</li>
 *  <li><b>Strong (forced) context sensitivity</b>: These are cases where the
 *  full-context prediction resolved an SLL conflict to a unique alternative,
 *  <em>and</em> the minimum alternative of the SLL conflict was found to not be
 *  a truly viable alternative. Two-stage parsing cannot be used for inputs where
 *  this situation occurs.</li>
 *  </ul>
 */
class DiagnosticErrorListener extends ErrorListener {
	constructor(exactOnly) {
		super();
		exactOnly = exactOnly || true;
		// whether all ambiguities or only exact ambiguities are reported.
		this.exactOnly = exactOnly;
	}

	reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
		if (this.exactOnly && !exact) {
			return;
		}
		const msg = "reportAmbiguity d=" +
			this.getDecisionDescription(recognizer, dfa) +
			": ambigAlts=" +
			this.getConflictingAlts(ambigAlts, configs) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'"
		recognizer.notifyErrorListeners(msg);
	}

	reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
		const msg = "reportAttemptingFullContext d=" +
			this.getDecisionDescription(recognizer, dfa) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'"
		recognizer.notifyErrorListeners(msg);
	}

	reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
		const msg = "reportContextSensitivity d=" +
			this.getDecisionDescription(recognizer, dfa) +
			", input='" +
			recognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + "'"
		recognizer.notifyErrorListeners(msg);
	}

	getDecisionDescription(recognizer, dfa) {
		const decision = dfa.decision
		const ruleIndex = dfa.atnStartState.ruleIndex

		const ruleNames = recognizer.ruleNames
		if (ruleIndex < 0 || ruleIndex >= ruleNames.length) {
			return "" + decision;
		}
		const ruleName = ruleNames[ruleIndex] || null
		if (ruleName === null || ruleName.length === 0) {
			return "" + decision;
		}
		return `${decision} (${ruleName})`;
	}

	/**
	 * Computes the set of conflicting or ambiguous alternatives from a
	 * configuration set, if that information was not already provided by the
	 * parser.
	 *
	 * @param reportedAlts The set of conflicting or ambiguous alternatives, as
	 * reported by the parser.
	 * @param configs The conflicting or ambiguous configuration set.
	 * @return Returns {@code reportedAlts} if it is not {@code null}, otherwise
	 * returns the set of alternatives represented in {@code configs}.
     */
	getConflictingAlts(reportedAlts, configs) {
		if (reportedAlts !== null) {
			return reportedAlts;
		}
		const result = new BitSet()
		for (let i = 0; i < configs.items.length; i++) {
			result.add(configs.items[i].alt);
		}
		return `{${result.values().join(", ")}}`;
	}
}

module.exports = DiagnosticErrorListener


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/error/ErrorListener.js":
/*!***************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/error/ErrorListener.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/**
 * Provides an empty default implementation of {@link ANTLRErrorListener}. The
 * default implementation of each method does nothing, but can be overridden as
 * necessary.
 */
class ErrorListener {
    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {
    }

    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
    }

    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
    }

    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
    }
}

/**
 * {@inheritDoc}
 *
 * <p>
 * This implementation prints messages to {@link System//err} containing the
 * values of {@code line}, {@code charPositionInLine}, and {@code msg} using
 * the following format.</p>
 *
 * <pre>
 * line <em>line</em>:<em>charPositionInLine</em> <em>msg</em>
 * </pre>
 *
 */
class ConsoleErrorListener extends ErrorListener {
    constructor() {
        super();
    }

    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {
        console.error("line " + line + ":" + column + " " + msg);
    }
}


/**
 * Provides a default instance of {@link ConsoleErrorListener}.
 */
ConsoleErrorListener.INSTANCE = new ConsoleErrorListener();

class ProxyErrorListener extends ErrorListener {
    constructor(delegates) {
        super();
        if (delegates===null) {
            throw "delegates";
        }
        this.delegates = delegates;
        return this;
    }

    syntaxError(recognizer, offendingSymbol, line, column, msg, e) {
        this.delegates.map(d => d.syntaxError(recognizer, offendingSymbol, line, column, msg, e));
    }

    reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {
        this.delegates.map(d => d.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs));
    }

    reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {
        this.delegates.map(d => d.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs));
    }

    reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs) {
        this.delegates.map(d => d.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs));
    }
}

module.exports = {ErrorListener, ConsoleErrorListener, ProxyErrorListener}



/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/error/ErrorStrategy.js":
/*!***************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/error/ErrorStrategy.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = __webpack_require__(/*! ./../Token */ "./node_modules/antlr4/src/antlr4/Token.js")
const {NoViableAltException, InputMismatchException, FailedPredicateException, ParseCancellationException} = __webpack_require__(/*! ./Errors */ "./node_modules/antlr4/src/antlr4/error/Errors.js")
const {ATNState} = __webpack_require__(/*! ./../atn/ATNState */ "./node_modules/antlr4/src/antlr4/atn/ATNState.js")
const {Interval, IntervalSet} = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/src/antlr4/IntervalSet.js")

class ErrorStrategy {

    reset(recognizer) {
    }

    recoverInline(recognizer) {
    }

    recover(recognizer, e) {
    }

    sync(recognizer) {
    }

    inErrorRecoveryMode(recognizer) {
    }

    reportError(recognizer) {
    }
}


/**
 * This is the default implementation of {@link ANTLRErrorStrategy} used for
 * error reporting and recovery in ANTLR parsers.
*/
class DefaultErrorStrategy extends ErrorStrategy {
    constructor() {
        super();
        /**
         * Indicates whether the error strategy is currently "recovering from an
         * error". This is used to suppress reporting multiple error messages while
         * attempting to recover from a detected syntax error.
         *
         * @see //inErrorRecoveryMode
         */
        this.errorRecoveryMode = false;

        /**
         * The index into the input stream where the last error occurred.
         * This is used to prevent infinite loops where an error is found
         * but no token is consumed during recovery...another error is found,
         * ad nauseum. This is a failsafe mechanism to guarantee that at least
         * one token/tree node is consumed for two errors.
         */
        this.lastErrorIndex = -1;
        this.lastErrorStates = null;
    }

    /**
     * <p>The default implementation simply calls {@link //endErrorCondition} to
     * ensure that the handler is not in error recovery mode.</p>
    */
    reset(recognizer) {
        this.endErrorCondition(recognizer);
    }

    /**
     * This method is called to enter error recovery mode when a recognition
     * exception is reported.
     *
     * @param recognizer the parser instance
    */
    beginErrorCondition(recognizer) {
        this.errorRecoveryMode = true;
    }

    inErrorRecoveryMode(recognizer) {
        return this.errorRecoveryMode;
    }

    /**
     * This method is called to leave error recovery mode after recovering from
     * a recognition exception.
     * @param recognizer
     */
    endErrorCondition(recognizer) {
        this.errorRecoveryMode = false;
        this.lastErrorStates = null;
        this.lastErrorIndex = -1;
    }

    /**
     * {@inheritDoc}
     * <p>The default implementation simply calls {@link //endErrorCondition}.</p>
     */
    reportMatch(recognizer) {
        this.endErrorCondition(recognizer);
    }

    /**
     * {@inheritDoc}
     *
     * <p>The default implementation returns immediately if the handler is already
     * in error recovery mode. Otherwise, it calls {@link //beginErrorCondition}
     * and dispatches the reporting task based on the runtime type of {@code e}
     * according to the following table.</p>
     *
     * <ul>
     * <li>{@link NoViableAltException}: Dispatches the call to
     * {@link //reportNoViableAlternative}</li>
     * <li>{@link InputMismatchException}: Dispatches the call to
     * {@link //reportInputMismatch}</li>
     * <li>{@link FailedPredicateException}: Dispatches the call to
     * {@link //reportFailedPredicate}</li>
     * <li>All other types: calls {@link Parser//notifyErrorListeners} to report
     * the exception</li>
     * </ul>
     */
    reportError(recognizer, e) {
       // if we've already reported an error and have not matched a token
       // yet successfully, don't report any errors.
        if(this.inErrorRecoveryMode(recognizer)) {
            return; // don't report spurious errors
        }
        this.beginErrorCondition(recognizer);
        if ( e instanceof NoViableAltException ) {
            this.reportNoViableAlternative(recognizer, e);
        } else if ( e instanceof InputMismatchException ) {
            this.reportInputMismatch(recognizer, e);
        } else if ( e instanceof FailedPredicateException ) {
            this.reportFailedPredicate(recognizer, e);
        } else {
            console.log("unknown recognition error type: " + e.constructor.name);
            console.log(e.stack);
            recognizer.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e);
        }
    }

    /**
     *
     * {@inheritDoc}
     *
     * <p>The default implementation resynchronizes the parser by consuming tokens
     * until we find one in the resynchronization set--loosely the set of tokens
     * that can follow the current rule.</p>
     *
     */
    recover(recognizer, e) {
        if (this.lastErrorIndex===recognizer.getInputStream().index &&
            this.lastErrorStates !== null && this.lastErrorStates.indexOf(recognizer.state)>=0) {
            // uh oh, another error at same token index and previously-visited
            // state in ATN; must be a case where LT(1) is in the recovery
            // token set so nothing got consumed. Consume a single token
            // at least to prevent an infinite loop; this is a failsafe.
            recognizer.consume();
        }
        this.lastErrorIndex = recognizer._input.index;
        if (this.lastErrorStates === null) {
            this.lastErrorStates = [];
        }
        this.lastErrorStates.push(recognizer.state);
        const followSet = this.getErrorRecoverySet(recognizer)
        this.consumeUntil(recognizer, followSet);
    }

    /**
     * The default implementation of {@link ANTLRErrorStrategy//sync} makes sure
     * that the current lookahead symbol is consistent with what were expecting
     * at this point in the ATN. You can call this anytime but ANTLR only
     * generates code to check before subrules/loops and each iteration.
     *
     * <p>Implements Jim Idle's magic sync mechanism in closures and optional
     * subrules. E.g.,</p>
     *
     * <pre>
     * a : sync ( stuff sync )* ;
     * sync : {consume to what can follow sync} ;
     * </pre>
     *
     * At the start of a sub rule upon error, {@link //sync} performs single
     * token deletion, if possible. If it can't do that, it bails on the current
     * rule and uses the default error recovery, which consumes until the
     * resynchronization set of the current rule.
     *
     * <p>If the sub rule is optional ({@code (...)?}, {@code (...)*}, or block
     * with an empty alternative), then the expected set includes what follows
     * the subrule.</p>
     *
     * <p>During loop iteration, it consumes until it sees a token that can start a
     * sub rule or what follows loop. Yes, that is pretty aggressive. We opt to
     * stay in the loop as long as possible.</p>
     *
     * <p><strong>ORIGINS</strong></p>
     *
     * <p>Previous versions of ANTLR did a poor job of their recovery within loops.
     * A single mismatch token or missing token would force the parser to bail
     * out of the entire rules surrounding the loop. So, for rule</p>
     *
     * <pre>
     * classDef : 'class' ID '{' member* '}'
     * </pre>
     *
     * input with an extra token between members would force the parser to
     * consume until it found the next class definition rather than the next
     * member definition of the current class.
     *
     * <p>This functionality cost a little bit of effort because the parser has to
     * compare token set at the start of the loop and at each iteration. If for
     * some reason speed is suffering for you, you can turn off this
     * functionality by simply overriding this method as a blank { }.</p>
     *
     */
    sync(recognizer) {
        // If already recovering, don't try to sync
        if (this.inErrorRecoveryMode(recognizer)) {
            return;
        }
        const s = recognizer._interp.atn.states[recognizer.state]
        const la = recognizer.getTokenStream().LA(1)
        // try cheaper subset first; might get lucky. seems to shave a wee bit off
        const nextTokens = recognizer.atn.nextTokens(s)
        if (nextTokens.contains(Token.EPSILON) || nextTokens.contains(la)) {
            return;
        }
        switch (s.stateType) {
        case ATNState.BLOCK_START:
        case ATNState.STAR_BLOCK_START:
        case ATNState.PLUS_BLOCK_START:
        case ATNState.STAR_LOOP_ENTRY:
           // report error and recover if possible
            if( this.singleTokenDeletion(recognizer) !== null) {
                return;
            } else {
                throw new InputMismatchException(recognizer);
            }
        case ATNState.PLUS_LOOP_BACK:
        case ATNState.STAR_LOOP_BACK:
            this.reportUnwantedToken(recognizer);
            const expecting = new IntervalSet()
            expecting.addSet(recognizer.getExpectedTokens());
            const whatFollowsLoopIterationOrRule = expecting.addSet(this.getErrorRecoverySet(recognizer))
            this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);
            break;
        default:
            // do nothing if we can't identify the exact kind of ATN state
        }
    }

    /**
     * This is called by {@link //reportError} when the exception is a
     * {@link NoViableAltException}.
     *
     * @see //reportError
     *
     * @param recognizer the parser instance
     * @param e the recognition exception
     */
    reportNoViableAlternative(recognizer, e) {
        const tokens = recognizer.getTokenStream()
        let input
        if(tokens !== null) {
            if (e.startToken.type===Token.EOF) {
                input = "<EOF>";
            } else {
                input = tokens.getText(new Interval(e.startToken.tokenIndex, e.offendingToken.tokenIndex));
            }
        } else {
            input = "<unknown input>";
        }
        const msg = "no viable alternative at input " + this.escapeWSAndQuote(input)
        recognizer.notifyErrorListeners(msg, e.offendingToken, e);
    }

    /**
     * This is called by {@link //reportError} when the exception is an
     * {@link InputMismatchException}.
     *
     * @see //reportError
     *
     * @param recognizer the parser instance
     * @param e the recognition exception
     */
    reportInputMismatch(recognizer, e) {
        const msg = "mismatched input " + this.getTokenErrorDisplay(e.offendingToken) +
            " expecting " + e.getExpectedTokens().toString(recognizer.literalNames, recognizer.symbolicNames)
        recognizer.notifyErrorListeners(msg, e.offendingToken, e);
    }

    /**
     * This is called by {@link //reportError} when the exception is a
     * {@link FailedPredicateException}.
     *
     * @see //reportError
     *
     * @param recognizer the parser instance
     * @param e the recognition exception
     */
    reportFailedPredicate(recognizer, e) {
        const ruleName = recognizer.ruleNames[recognizer._ctx.ruleIndex]
        const msg = "rule " + ruleName + " " + e.message
        recognizer.notifyErrorListeners(msg, e.offendingToken, e);
    }

    /**
     * This method is called to report a syntax error which requires the removal
     * of a token from the input stream. At the time this method is called, the
     * erroneous symbol is current {@code LT(1)} symbol and has not yet been
     * removed from the input stream. When this method returns,
     * {@code recognizer} is in error recovery mode.
     *
     * <p>This method is called when {@link //singleTokenDeletion} identifies
     * single-token deletion as a viable recovery strategy for a mismatched
     * input error.</p>
     *
     * <p>The default implementation simply returns if the handler is already in
     * error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
     * enter error recovery mode, followed by calling
     * {@link Parser//notifyErrorListeners}.</p>
     *
     * @param recognizer the parser instance
     *
     */
    reportUnwantedToken(recognizer) {
        if (this.inErrorRecoveryMode(recognizer)) {
            return;
        }
        this.beginErrorCondition(recognizer);
        const t = recognizer.getCurrentToken()
        const tokenName = this.getTokenErrorDisplay(t)
        const expecting = this.getExpectedTokens(recognizer)
        const msg = "extraneous input " + tokenName + " expecting " +
            expecting.toString(recognizer.literalNames, recognizer.symbolicNames)
        recognizer.notifyErrorListeners(msg, t, null);
    }

    /**
     * This method is called to report a syntax error which requires the
     * insertion of a missing token into the input stream. At the time this
     * method is called, the missing token has not yet been inserted. When this
     * method returns, {@code recognizer} is in error recovery mode.
     *
     * <p>This method is called when {@link //singleTokenInsertion} identifies
     * single-token insertion as a viable recovery strategy for a mismatched
     * input error.</p>
     *
     * <p>The default implementation simply returns if the handler is already in
     * error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to
     * enter error recovery mode, followed by calling
     * {@link Parser//notifyErrorListeners}.</p>
     *
     * @param recognizer the parser instance
     */
    reportMissingToken(recognizer) {
        if ( this.inErrorRecoveryMode(recognizer)) {
            return;
        }
        this.beginErrorCondition(recognizer);
        const t = recognizer.getCurrentToken()
        const expecting = this.getExpectedTokens(recognizer)
        const msg = "missing " + expecting.toString(recognizer.literalNames, recognizer.symbolicNames) +
            " at " + this.getTokenErrorDisplay(t)
        recognizer.notifyErrorListeners(msg, t, null);
    }

    /**
     * <p>The default implementation attempts to recover from the mismatched input
     * by using single token insertion and deletion as described below. If the
     * recovery attempt fails, this method throws an
     * {@link InputMismatchException}.</p>
     *
     * <p><strong>EXTRA TOKEN</strong> (single token deletion)</p>
     *
     * <p>{@code LA(1)} is not what we are looking for. If {@code LA(2)} has the
     * right token, however, then assume {@code LA(1)} is some extra spurious
     * token and delete it. Then consume and return the next token (which was
     * the {@code LA(2)} token) as the successful result of the match operation.</p>
     *
     * <p>This recovery strategy is implemented by {@link
     * //singleTokenDeletion}.</p>
     *
     * <p><strong>MISSING TOKEN</strong> (single token insertion)</p>
     *
     * <p>If current token (at {@code LA(1)}) is consistent with what could come
     * after the expected {@code LA(1)} token, then assume the token is missing
     * and use the parser's {@link TokenFactory} to create it on the fly. The
     * "insertion" is performed by returning the created token as the successful
     * result of the match operation.</p>
     *
     * <p>This recovery strategy is implemented by {@link
     * //singleTokenInsertion}.</p>
     *
     * <p><strong>EXAMPLE</strong></p>
     *
     * <p>For example, Input {@code i=(3;} is clearly missing the {@code ')'}. When
     * the parser returns from the nested call to {@code expr}, it will have
     * call chain:</p>
     *
     * <pre>
     * stat &rarr; expr &rarr; atom
     * </pre>
     *
     * and it will be trying to match the {@code ')'} at this point in the
     * derivation:
     *
     * <pre>
     * =&gt; ID '=' '(' INT ')' ('+' atom)* ';'
     * ^
     * </pre>
     *
     * The attempt to match {@code ')'} will fail when it sees {@code ';'} and
     * call {@link //recoverInline}. To recover, it sees that {@code LA(1)==';'}
     * is in the set of tokens that can follow the {@code ')'} token reference
     * in rule {@code atom}. It can assume that you forgot the {@code ')'}.
     */
    recoverInline(recognizer) {
        // SINGLE TOKEN DELETION
        const matchedSymbol = this.singleTokenDeletion(recognizer)
        if (matchedSymbol !== null) {
            // we have deleted the extra token.
            // now, move past ttype token as if all were ok
            recognizer.consume();
            return matchedSymbol;
        }
        // SINGLE TOKEN INSERTION
        if (this.singleTokenInsertion(recognizer)) {
            return this.getMissingSymbol(recognizer);
        }
        // even that didn't work; must throw the exception
        throw new InputMismatchException(recognizer);
    }

    /**
     * This method implements the single-token insertion inline error recovery
     * strategy. It is called by {@link //recoverInline} if the single-token
     * deletion strategy fails to recover from the mismatched input. If this
     * method returns {@code true}, {@code recognizer} will be in error recovery
     * mode.
     *
     * <p>This method determines whether or not single-token insertion is viable by
     * checking if the {@code LA(1)} input symbol could be successfully matched
     * if it were instead the {@code LA(2)} symbol. If this method returns
     * {@code true}, the caller is responsible for creating and inserting a
     * token with the correct type to produce this behavior.</p>
     *
     * @param recognizer the parser instance
     * @return {@code true} if single-token insertion is a viable recovery
     * strategy for the current mismatched input, otherwise {@code false}
     */
    singleTokenInsertion(recognizer) {
        const currentSymbolType = recognizer.getTokenStream().LA(1)
        // if current token is consistent with what could come after current
        // ATN state, then we know we're missing a token; error recovery
        // is free to conjure up and insert the missing token
        const atn = recognizer._interp.atn
        const currentState = atn.states[recognizer.state]
        const next = currentState.transitions[0].target
        const expectingAtLL2 = atn.nextTokens(next, recognizer._ctx)
        if (expectingAtLL2.contains(currentSymbolType) ){
            this.reportMissingToken(recognizer);
            return true;
        } else {
            return false;
        }
    }

    /**
     * This method implements the single-token deletion inline error recovery
     * strategy. It is called by {@link //recoverInline} to attempt to recover
     * from mismatched input. If this method returns null, the parser and error
     * handler state will not have changed. If this method returns non-null,
     * {@code recognizer} will <em>not</em> be in error recovery mode since the
     * returned token was a successful match.
     *
     * <p>If the single-token deletion is successful, this method calls
     * {@link //reportUnwantedToken} to report the error, followed by
     * {@link Parser//consume} to actually "delete" the extraneous token. Then,
     * before returning {@link //reportMatch} is called to signal a successful
     * match.</p>
     *
     * @param recognizer the parser instance
     * @return the successfully matched {@link Token} instance if single-token
     * deletion successfully recovers from the mismatched input, otherwise
     * {@code null}
     */
    singleTokenDeletion(recognizer) {
        const nextTokenType = recognizer.getTokenStream().LA(2)
        const expecting = this.getExpectedTokens(recognizer)
        if (expecting.contains(nextTokenType)) {
            this.reportUnwantedToken(recognizer);
            // print("recoverFromMismatchedToken deleting " \
            // + str(recognizer.getTokenStream().LT(1)) \
            // + " since " + str(recognizer.getTokenStream().LT(2)) \
            // + " is what we want", file=sys.stderr)
            recognizer.consume(); // simply delete extra token
            // we want to return the token we're actually matching
            const matchedSymbol = recognizer.getCurrentToken()
            this.reportMatch(recognizer); // we know current token is correct
            return matchedSymbol;
        } else {
            return null;
        }
    }

    /**
     * Conjure up a missing token during error recovery.
     *
     * The recognizer attempts to recover from single missing
     * symbols. But, actions might refer to that missing symbol.
     * For example, x=ID {f($x);}. The action clearly assumes
     * that there has been an identifier matched previously and that
     * $x points at that token. If that token is missing, but
     * the next token in the stream is what we want we assume that
     * this token is missing and we keep going. Because we
     * have to return some token to replace the missing token,
     * we have to conjure one up. This method gives the user control
     * over the tokens returned for missing tokens. Mostly,
     * you will want to create something special for identifier
     * tokens. For literals such as '{' and ',', the default
     * action in the parser or tree parser works. It simply creates
     * a CommonToken of the appropriate type. The text will be the token.
     * If you change what tokens must be created by the lexer,
     * override this method to create the appropriate tokens.
     *
     */
    getMissingSymbol(recognizer) {
        const currentSymbol = recognizer.getCurrentToken()
        const expecting = this.getExpectedTokens(recognizer)
        const expectedTokenType = expecting.first() // get any element
        let tokenText
        if (expectedTokenType===Token.EOF) {
            tokenText = "<missing EOF>";
        } else {
            tokenText = "<missing " + recognizer.literalNames[expectedTokenType] + ">";
        }
        let current = currentSymbol
        const lookback = recognizer.getTokenStream().LT(-1)
        if (current.type===Token.EOF && lookback !== null) {
            current = lookback;
        }
        return recognizer.getTokenFactory().create(current.source,
            expectedTokenType, tokenText, Token.DEFAULT_CHANNEL,
            -1, -1, current.line, current.column);
    }

    getExpectedTokens(recognizer) {
        return recognizer.getExpectedTokens();
    }

    /**
     * How should a token be displayed in an error message? The default
     * is to display just the text, but during development you might
     * want to have a lot of information spit out. Override in that case
     * to use t.toString() (which, for CommonToken, dumps everything about
     * the token). This is better than forcing you to override a method in
     * your token objects because you don't have to go modify your lexer
     * so that it creates a new Java type.
     */
    getTokenErrorDisplay(t) {
        if (t === null) {
            return "<no token>";
        }
        let s = t.text
        if (s === null) {
            if (t.type===Token.EOF) {
                s = "<EOF>";
            } else {
                s = "<" + t.type + ">";
            }
        }
        return this.escapeWSAndQuote(s);
    }

    escapeWSAndQuote(s) {
        s = s.replace(/\n/g,"\\n");
        s = s.replace(/\r/g,"\\r");
        s = s.replace(/\t/g,"\\t");
        return "'" + s + "'";
    }

    /**
     * Compute the error recovery set for the current rule. During
     * rule invocation, the parser pushes the set of tokens that can
     * follow that rule reference on the stack; this amounts to
     * computing FIRST of what follows the rule reference in the
     * enclosing rule. See LinearApproximator.FIRST().
     * This local follow set only includes tokens
     * from within the rule; i.e., the FIRST computation done by
     * ANTLR stops at the end of a rule.
     *
     * EXAMPLE
     *
     * When you find a "no viable alt exception", the input is not
     * consistent with any of the alternatives for rule r. The best
     * thing to do is to consume tokens until you see something that
     * can legally follow a call to r//or* any rule that called r.
     * You don't want the exact set of viable next tokens because the
     * input might just be missing a token--you might consume the
     * rest of the input looking for one of the missing tokens.
     *
     * Consider grammar:
     *
     * a : '[' b ']'
     * | '(' b ')'
     * ;
     * b : c '^' INT ;
     * c : ID
     * | INT
     * ;
     *
     * At each rule invocation, the set of tokens that could follow
     * that rule is pushed on a stack. Here are the various
     * context-sensitive follow sets:
     *
     * FOLLOW(b1_in_a) = FIRST(']') = ']'
     * FOLLOW(b2_in_a) = FIRST(')') = ')'
     * FOLLOW(c_in_b) = FIRST('^') = '^'
     *
     * Upon erroneous input "[]", the call chain is
     *
     * a -> b -> c
     *
     * and, hence, the follow context stack is:
     *
     * depth follow set start of rule execution
     * 0 <EOF> a (from main())
     * 1 ']' b
     * 2 '^' c
     *
     * Notice that ')' is not included, because b would have to have
     * been called from a different context in rule a for ')' to be
     * included.
     *
     * For error recovery, we cannot consider FOLLOW(c)
     * (context-sensitive or otherwise). We need the combined set of
     * all context-sensitive FOLLOW sets--the set of all tokens that
     * could follow any reference in the call chain. We need to
     * resync to one of those tokens. Note that FOLLOW(c)='^' and if
     * we resync'd to that token, we'd consume until EOF. We need to
     * sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.
     * In this case, for input "[]", LA(1) is ']' and in the set, so we would
     * not consume anything. After printing an error, rule c would
     * return normally. Rule b would not find the required '^' though.
     * At this point, it gets a mismatched token error and throws an
     * exception (since LA(1) is not in the viable following token
     * set). The rule exception handler tries to recover, but finds
     * the same recovery set and doesn't consume anything. Rule b
     * exits normally returning to rule a. Now it finds the ']' (and
     * with the successful match exits errorRecovery mode).
     *
     * So, you can see that the parser walks up the call chain looking
     * for the token that was a member of the recovery set.
     *
     * Errors are not generated in errorRecovery mode.
     *
     * ANTLR's error recovery mechanism is based upon original ideas:
     *
     * "Algorithms + Data Structures = Programs" by Niklaus Wirth
     *
     * and
     *
     * "A note on error recovery in recursive descent parsers":
     * http://portal.acm.org/citation.cfm?id=947902.947905
     *
     * Later, Josef Grosch had some good ideas:
     *
     * "Efficient and Comfortable Error Recovery in Recursive Descent
     * Parsers":
     * ftp://www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip
     *
     * Like Grosch I implement context-sensitive FOLLOW sets that are combined
     * at run-time upon error to avoid overhead during parsing.
     */
    getErrorRecoverySet(recognizer) {
        const atn = recognizer._interp.atn
        let ctx = recognizer._ctx
        const recoverSet = new IntervalSet()
        while (ctx !== null && ctx.invokingState>=0) {
            // compute what follows who invoked us
            const invokingState = atn.states[ctx.invokingState]
            const rt = invokingState.transitions[0]
            const follow = atn.nextTokens(rt.followState)
            recoverSet.addSet(follow);
            ctx = ctx.parentCtx;
        }
        recoverSet.removeOne(Token.EPSILON);
        return recoverSet;
    }

// Consume tokens until one matches the given token set.//
    consumeUntil(recognizer, set) {
        let ttype = recognizer.getTokenStream().LA(1)
        while( ttype !== Token.EOF && !set.contains(ttype)) {
            recognizer.consume();
            ttype = recognizer.getTokenStream().LA(1);
        }
    }
}


/**
 * This implementation of {@link ANTLRErrorStrategy} responds to syntax errors
 * by immediately canceling the parse operation with a
 * {@link ParseCancellationException}. The implementation ensures that the
 * {@link ParserRuleContext//exception} field is set for all parse tree nodes
 * that were not completed prior to encountering the error.
 *
 * <p>
 * This error strategy is useful in the following scenarios.</p>
 *
 * <ul>
 * <li><strong>Two-stage parsing:</strong> This error strategy allows the first
 * stage of two-stage parsing to immediately terminate if an error is
 * encountered, and immediately fall back to the second stage. In addition to
 * avoiding wasted work by attempting to recover from errors here, the empty
 * implementation of {@link BailErrorStrategy//sync} improves the performance of
 * the first stage.</li>
 * <li><strong>Silent validation:</strong> When syntax errors are not being
 * reported or logged, and the parse result is simply ignored if errors occur,
 * the {@link BailErrorStrategy} avoids wasting work on recovering from errors
 * when the result will be ignored either way.</li>
 * </ul>
 *
 * <p>
 * {@code myparser.setErrorHandler(new BailErrorStrategy());}</p>
 *
 * @see Parser//setErrorHandler(ANTLRErrorStrategy)
 * */
class BailErrorStrategy extends DefaultErrorStrategy {
    constructor() {
        super();
    }

    /**
     * Instead of recovering from exception {@code e}, re-throw it wrapped
     * in a {@link ParseCancellationException} so it is not caught by the
     * rule function catches. Use {@link Exception//getCause()} to get the
     * original {@link RecognitionException}.
     */
    recover(recognizer, e) {
        let context = recognizer._ctx
        while (context !== null) {
            context.exception = e;
            context = context.parentCtx;
        }
        throw new ParseCancellationException(e);
    }

    /**
     * Make sure we don't attempt to recover inline; if the parser
     * successfully recovers, it won't throw an exception.
     */
    recoverInline(recognizer) {
        this.recover(recognizer, new InputMismatchException(recognizer));
    }

// Make sure we don't attempt to recover from problems in subrules.//
    sync(recognizer) {
        // pass
    }
}


module.exports = {BailErrorStrategy, DefaultErrorStrategy};


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/error/Errors.js":
/*!********************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/error/Errors.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

/**
 * The root of the ANTLR exception hierarchy. In general, ANTLR tracks just
 *  3 kinds of errors: prediction errors, failed predicate errors, and
 *  mismatched input errors. In each case, the parser knows where it is
 *  in the input, where it is in the ATN, the rule invocation stack,
 *  and what kind of problem occurred.
 */

const {PredicateTransition} = __webpack_require__(/*! ./../atn/Transition */ "./node_modules/antlr4/src/antlr4/atn/Transition.js")

class RecognitionException extends Error {
    constructor(params) {
        super(params.message);
        if (!!Error.captureStackTrace) {
            Error.captureStackTrace(this, RecognitionException);
        } else {
            var stack = new Error().stack;
        }
        this.message = params.message;
        this.recognizer = params.recognizer;
        this.input = params.input;
        this.ctx = params.ctx;
        /**
         * The current {@link Token} when an error occurred. Since not all streams
         * support accessing symbols by index, we have to track the {@link Token}
         * instance itself
        */
        this.offendingToken = null;
        /**
         * Get the ATN state number the parser was in at the time the error
         * occurred. For {@link NoViableAltException} and
         * {@link LexerNoViableAltException} exceptions, this is the
         * {@link DecisionState} number. For others, it is the state whose outgoing
         * edge we couldn't match.
         */
        this.offendingState = -1;
        if (this.recognizer!==null) {
            this.offendingState = this.recognizer.state;
        }
    }

    /**
     * Gets the set of input symbols which could potentially follow the
     * previously matched symbol at the time this exception was thrown.
     *
     * <p>If the set of expected tokens is not known and could not be computed,
     * this method returns {@code null}.</p>
     *
     * @return The set of token types that could potentially follow the current
     * state in the ATN, or {@code null} if the information is not available.
     */
    getExpectedTokens() {
        if (this.recognizer!==null) {
            return this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx);
        } else {
            return null;
        }
    }

    // <p>If the state number is not known, this method returns -1.</p>
    toString() {
        return this.message;
    }
}

class LexerNoViableAltException extends RecognitionException {
    constructor(lexer, input, startIndex, deadEndConfigs) {
        super({message: "", recognizer: lexer, input: input, ctx: null});
        this.startIndex = startIndex;
        this.deadEndConfigs = deadEndConfigs;
    }

    toString() {
        let symbol = ""
        if (this.startIndex >= 0 && this.startIndex < this.input.size) {
            symbol = this.input.getText((this.startIndex,this.startIndex));
        }
        return "LexerNoViableAltException" + symbol;
    }
}


/**
 * Indicates that the parser could not decide which of two or more paths
 * to take based upon the remaining input. It tracks the starting token
 * of the offending input and also knows where the parser was
 * in the various paths when the error. Reported by reportNoViableAlternative()
 */
class NoViableAltException extends RecognitionException {
    constructor(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {
        ctx = ctx || recognizer._ctx;
        offendingToken = offendingToken || recognizer.getCurrentToken();
        startToken = startToken || recognizer.getCurrentToken();
        input = input || recognizer.getInputStream();
        super({message: "", recognizer: recognizer, input: input, ctx: ctx});
        // Which configurations did we try at input.index() that couldn't match
        // input.LT(1)?//
        this.deadEndConfigs = deadEndConfigs;
        // The token object at the start index; the input stream might
        // not be buffering tokens so get a reference to it. (At the
        // time the error occurred, of course the stream needs to keep a
        // buffer all of the tokens but later we might not have access to those.)
        this.startToken = startToken;
        this.offendingToken = offendingToken;
    }
}

/**
 * This signifies any kind of mismatched input exceptions such as
 * when the current input does not match the expected token.
*/
class InputMismatchException extends RecognitionException {
    constructor(recognizer) {
        super({message: "", recognizer: recognizer, input: recognizer.getInputStream(), ctx: recognizer._ctx});
        this.offendingToken = recognizer.getCurrentToken();
    }
}

function formatMessage(predicate, message) {
    if (message !==null) {
        return message;
    } else {
        return "failed predicate: {" + predicate + "}?";
    }
}

/**
 * A semantic predicate failed during validation. Validation of predicates
 * occurs when normally parsing the alternative just like matching a token.
 * Disambiguating predicate evaluation occurs when we test a predicate during
 * prediction.
*/
class FailedPredicateException extends RecognitionException {
    constructor(recognizer, predicate, message) {
        super({
            message: formatMessage(predicate, message || null), recognizer: recognizer,
            input: recognizer.getInputStream(), ctx: recognizer._ctx
        });
        const s = recognizer._interp.atn.states[recognizer.state]
        const trans = s.transitions[0]
        if (trans instanceof PredicateTransition) {
            this.ruleIndex = trans.ruleIndex;
            this.predicateIndex = trans.predIndex;
        } else {
            this.ruleIndex = 0;
            this.predicateIndex = 0;
        }
        this.predicate = predicate;
        this.offendingToken = recognizer.getCurrentToken();
    }
}


class ParseCancellationException extends Error{
    constructor() {
        super()
        Error.captureStackTrace(this, ParseCancellationException);
    }
}

module.exports = {
    RecognitionException,
    NoViableAltException,
    LexerNoViableAltException,
    InputMismatchException,
    FailedPredicateException,
    ParseCancellationException
};


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/error/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/error/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

module.exports.RecognitionException = __webpack_require__(/*! ./Errors */ "./node_modules/antlr4/src/antlr4/error/Errors.js").RecognitionException;
module.exports.NoViableAltException = __webpack_require__(/*! ./Errors */ "./node_modules/antlr4/src/antlr4/error/Errors.js").NoViableAltException;
module.exports.LexerNoViableAltException = __webpack_require__(/*! ./Errors */ "./node_modules/antlr4/src/antlr4/error/Errors.js").LexerNoViableAltException;
module.exports.InputMismatchException = __webpack_require__(/*! ./Errors */ "./node_modules/antlr4/src/antlr4/error/Errors.js").InputMismatchException;
module.exports.FailedPredicateException = __webpack_require__(/*! ./Errors */ "./node_modules/antlr4/src/antlr4/error/Errors.js").FailedPredicateException;
module.exports.DiagnosticErrorListener = __webpack_require__(/*! ./DiagnosticErrorListener */ "./node_modules/antlr4/src/antlr4/error/DiagnosticErrorListener.js");
module.exports.BailErrorStrategy = __webpack_require__(/*! ./ErrorStrategy */ "./node_modules/antlr4/src/antlr4/error/ErrorStrategy.js").BailErrorStrategy;
module.exports.DefaultErrorStrategy = __webpack_require__(/*! ./ErrorStrategy */ "./node_modules/antlr4/src/antlr4/error/ErrorStrategy.js").DefaultErrorStrategy;
module.exports.ErrorListener = __webpack_require__(/*! ./ErrorListener */ "./node_modules/antlr4/src/antlr4/error/ErrorListener.js").ErrorListener;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/index.js":
/*!*************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */
exports.atn = __webpack_require__(/*! ./atn/index */ "./node_modules/antlr4/src/antlr4/atn/index.js");
exports.codepointat = __webpack_require__(/*! ./polyfills/codepointat */ "./node_modules/antlr4/src/antlr4/polyfills/codepointat.js");
exports.dfa = __webpack_require__(/*! ./dfa/index */ "./node_modules/antlr4/src/antlr4/dfa/index.js");
exports.fromcodepoint = __webpack_require__(/*! ./polyfills/fromcodepoint */ "./node_modules/antlr4/src/antlr4/polyfills/fromcodepoint.js");
exports.tree = __webpack_require__(/*! ./tree/index */ "./node_modules/antlr4/src/antlr4/tree/index.js");
exports.error = __webpack_require__(/*! ./error/index */ "./node_modules/antlr4/src/antlr4/error/index.js");
exports.Token = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/src/antlr4/Token.js").Token;
exports.CharStreams = __webpack_require__(/*! ./CharStreams */ "./node_modules/antlr4/src/antlr4/CharStreams.js");
exports.CommonToken = __webpack_require__(/*! ./Token */ "./node_modules/antlr4/src/antlr4/Token.js").CommonToken;
exports.InputStream = __webpack_require__(/*! ./InputStream */ "./node_modules/antlr4/src/antlr4/InputStream.js");
exports.FileStream = __webpack_require__(/*! ./FileStream */ "./node_modules/antlr4/src/antlr4/FileStream.js");
exports.CommonTokenStream = __webpack_require__(/*! ./CommonTokenStream */ "./node_modules/antlr4/src/antlr4/CommonTokenStream.js");
exports.Lexer = __webpack_require__(/*! ./Lexer */ "./node_modules/antlr4/src/antlr4/Lexer.js");
exports.Parser = __webpack_require__(/*! ./Parser */ "./node_modules/antlr4/src/antlr4/Parser.js");
var pc = __webpack_require__(/*! ./PredictionContext */ "./node_modules/antlr4/src/antlr4/PredictionContext.js");
exports.PredictionContextCache = pc.PredictionContextCache;
exports.ParserRuleContext = __webpack_require__(/*! ./ParserRuleContext */ "./node_modules/antlr4/src/antlr4/ParserRuleContext.js");
exports.Interval = __webpack_require__(/*! ./IntervalSet */ "./node_modules/antlr4/src/antlr4/IntervalSet.js").Interval;
exports.IntervalSet = __webpack_require__(/*! ./IntervalSet */ "./node_modules/antlr4/src/antlr4/IntervalSet.js").IntervalSet;
exports.Utils = __webpack_require__(/*! ./Utils */ "./node_modules/antlr4/src/antlr4/Utils.js");
exports.LL1Analyzer = __webpack_require__(/*! ./LL1Analyzer */ "./node_modules/antlr4/src/antlr4/LL1Analyzer.js").LL1Analyzer;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/polyfills/codepointat.js":
/*!*****************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/polyfills/codepointat.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*! https://mths.be/codepointat v0.2.0 by @mathias */
if (!String.prototype.codePointAt) {
	(function() {
		'use strict'; // needed to support `apply`/`call` with `undefined`/`null`
		var defineProperty = (function() {
			// IE 8 only supports `Object.defineProperty` on DOM elements
			try {
				var object = {};
				var $defineProperty = Object.defineProperty;
				var result = $defineProperty(object, object, object) && $defineProperty;
			} catch(error) {}
			return result;
		}());
		var codePointAt = function(position) {
			if (this == null) {
				throw TypeError();
			}
			var string = String(this);
			var size = string.length;
			// `ToInteger`
			var index = position ? Number(position) : 0;
			if (index != index) { // better `isNaN`
				index = 0;
			}
			// Account for out-of-bounds indices:
			if (index < 0 || index >= size) {
				return undefined;
			}
			// Get the first code unit
			var first = string.charCodeAt(index);
			var second;
			if ( // check if it’s the start of a surrogate pair
				first >= 0xD800 && first <= 0xDBFF && // high surrogate
				size > index + 1 // there is a next code unit
			) {
				second = string.charCodeAt(index + 1);
				if (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate
					// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
					return (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
				}
			}
			return first;
		};
		if (defineProperty) {
			defineProperty(String.prototype, 'codePointAt', {
				'value': codePointAt,
				'configurable': true,
				'writable': true
			});
		} else {
			String.prototype.codePointAt = codePointAt;
		}
	}());
}


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/polyfills/fromcodepoint.js":
/*!*******************************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/polyfills/fromcodepoint.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */
if (!String.fromCodePoint) {
	(function() {
		var defineProperty = (function() {
			// IE 8 only supports `Object.defineProperty` on DOM elements
			try {
				var object = {};
				var $defineProperty = Object.defineProperty;
				var result = $defineProperty(object, object, object) && $defineProperty;
			} catch(error) {}
			return result;
		}());
		var stringFromCharCode = String.fromCharCode;
		var floor = Math.floor;
		var fromCodePoint = function(_) {
			var MAX_SIZE = 0x4000;
			var codeUnits = [];
			var highSurrogate;
			var lowSurrogate;
			var index = -1;
			var length = arguments.length;
			if (!length) {
				return '';
			}
			var result = '';
			while (++index < length) {
				var codePoint = Number(arguments[index]);
				if (
					!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
					codePoint < 0 || // not a valid Unicode code point
					codePoint > 0x10FFFF || // not a valid Unicode code point
					floor(codePoint) != codePoint // not an integer
				) {
					throw RangeError('Invalid code point: ' + codePoint);
				}
				if (codePoint <= 0xFFFF) { // BMP code point
					codeUnits.push(codePoint);
				} else { // Astral code point; split in surrogate halves
					// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
					codePoint -= 0x10000;
					highSurrogate = (codePoint >> 10) + 0xD800;
					lowSurrogate = (codePoint % 0x400) + 0xDC00;
					codeUnits.push(highSurrogate, lowSurrogate);
				}
				if (index + 1 == length || codeUnits.length > MAX_SIZE) {
					result += stringFromCharCode.apply(null, codeUnits);
					codeUnits.length = 0;
				}
			}
			return result;
		};
		if (defineProperty) {
			defineProperty(String, 'fromCodePoint', {
				'value': fromCodePoint,
				'configurable': true,
				'writable': true
			});
		} else {
			String.fromCodePoint = fromCodePoint;
		}
	}());
}


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/tree/Tree.js":
/*!*****************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/tree/Tree.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const {Token} = __webpack_require__(/*! ./../Token */ "./node_modules/antlr4/src/antlr4/Token.js");
const {Interval} = __webpack_require__(/*! ./../IntervalSet */ "./node_modules/antlr4/src/antlr4/IntervalSet.js");
const INVALID_INTERVAL = new Interval(-1, -2);

/**
 * The basic notion of a tree has a parent, a payload, and a list of children.
 * It is the most abstract interface for all the trees used by ANTLR.
 */
class Tree {}

class SyntaxTree extends Tree {
	constructor() {
		super();
	}
}

class ParseTree extends SyntaxTree {
	constructor() {
		super();
	}
}

class RuleNode extends ParseTree {
	constructor() {
		super();
	}

	getRuleContext(){
		throw new Error("missing interface implementation")
	}
}

class TerminalNode extends ParseTree {
	constructor() {
		super();
	}
}

class ErrorNode extends TerminalNode {
	constructor() {
		super();
	}
}

class ParseTreeVisitor {
	visit(ctx) {
		 if (Array.isArray(ctx)) {
			return ctx.map(function(child) {
				return child.accept(this);
			}, this);
		} else {
			return ctx.accept(this);
		}
	}

	visitChildren(ctx) {
		if (ctx.children) {
			return this.visit(ctx.children);
		} else {
			return null;
		}
	}

	visitTerminal(node) {
	}

	visitErrorNode(node) {
	}
}

class ParseTreeListener {
	visitTerminal(node) {
	}

	visitErrorNode(node) {
	}

	enterEveryRule(node) {
	}

	exitEveryRule(node) {
	}
}

class TerminalNodeImpl extends TerminalNode {
	constructor(symbol) {
		super();
		this.parentCtx = null;
		this.symbol = symbol;
	}

	getChild(i) {
		return null;
	}

	getSymbol() {
		return this.symbol;
	}

	getParent() {
		return this.parentCtx;
	}

	getPayload() {
		return this.symbol;
	}

	getSourceInterval() {
		if (this.symbol === null) {
			return INVALID_INTERVAL;
		}
		const tokenIndex = this.symbol.tokenIndex;
		return new Interval(tokenIndex, tokenIndex);
	}

	getChildCount() {
		return 0;
	}

	accept(visitor) {
		return visitor.visitTerminal(this);
	}

	getText() {
		return this.symbol.text;
	}

	toString() {
		if (this.symbol.type === Token.EOF) {
			return "<EOF>";
		} else {
			return this.symbol.text;
		}
	}
}


/**
 * Represents a token that was consumed during resynchronization
 * rather than during a valid match operation. For example,
 * we will create this kind of a node during single token insertion
 * and deletion as well as during "consume until error recovery set"
 * upon no viable alternative exceptions.
 */
class ErrorNodeImpl extends TerminalNodeImpl {
	constructor(token) {
		super(token);
	}

	isErrorNode() {
		return true;
	}

	accept(visitor) {
		return visitor.visitErrorNode(this);
	}
}

class ParseTreeWalker {

	/**
	 * Performs a walk on the given parse tree starting at the root and going down recursively
	 * with depth-first search. On each node, {@link ParseTreeWalker//enterRule} is called before
	 * recursively walking down into child nodes, then
	 * {@link ParseTreeWalker//exitRule} is called after the recursive call to wind up.
	 * @param listener The listener used by the walker to process grammar rules
	 * @param t The parse tree to be walked on
	 */
	walk(listener, t) {
		const errorNode = t instanceof ErrorNode ||
				(t.isErrorNode !== undefined && t.isErrorNode());
		if (errorNode) {
			listener.visitErrorNode(t);
		} else if (t instanceof TerminalNode) {
			listener.visitTerminal(t);
		} else {
			this.enterRule(listener, t);
			for (let i = 0; i < t.getChildCount(); i++) {
				const child = t.getChild(i);
				this.walk(listener, child);
			}
			this.exitRule(listener, t);
		}
	}

	/**
	 * Enters a grammar rule by first triggering the generic event {@link ParseTreeListener//enterEveryRule}
	 * then by triggering the event specific to the given parse tree node
	 * @param listener The listener responding to the trigger events
	 * @param r The grammar rule containing the rule context
	 */
	enterRule(listener, r) {
		const ctx = r.getRuleContext();
		listener.enterEveryRule(ctx);
		ctx.enterRule(listener);
	}

	/**
	 * Exits a grammar rule by first triggering the event specific to the given parse tree node
	 * then by triggering the generic event {@link ParseTreeListener//exitEveryRule}
	 * @param listener The listener responding to the trigger events
	 * @param r The grammar rule containing the rule context
	 */
	exitRule(listener, r) {
		const ctx = r.getRuleContext();
		ctx.exitRule(listener);
		listener.exitEveryRule(ctx);
	}
}

ParseTreeWalker.DEFAULT = new ParseTreeWalker();

module.exports = {
	RuleNode,
	ErrorNode,
	TerminalNode,
	ErrorNodeImpl,
	TerminalNodeImpl,
	ParseTreeListener,
	ParseTreeVisitor,
	ParseTreeWalker,
	INVALID_INTERVAL
}


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/tree/Trees.js":
/*!******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/tree/Trees.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const Utils = __webpack_require__(/*! ./../Utils */ "./node_modules/antlr4/src/antlr4/Utils.js");
const {Token} = __webpack_require__(/*! ./../Token */ "./node_modules/antlr4/src/antlr4/Token.js");
const {ErrorNode, TerminalNode, RuleNode} = __webpack_require__(/*! ./Tree */ "./node_modules/antlr4/src/antlr4/tree/Tree.js");

/** A set of utility routines useful for all kinds of ANTLR trees. */
const Trees = {
    /**
     * Print out a whole tree in LISP form. {@link //getNodeText} is used on the
     *  node payloads to get the text for the nodes.  Detect
     *  parse trees and extract data appropriately.
     */
    toStringTree: function(tree, ruleNames, recog) {
        ruleNames = ruleNames || null;
        recog = recog || null;
        if(recog!==null) {
            ruleNames = recog.ruleNames;
        }
        let s = Trees.getNodeText(tree, ruleNames);
        s = Utils.escapeWhitespace(s, false);
        const c = tree.getChildCount();
        if(c===0) {
            return s;
        }
        let res = "(" + s + ' ';
        if(c>0) {
            s = Trees.toStringTree(tree.getChild(0), ruleNames);
            res = res.concat(s);
        }
        for(let i=1;i<c;i++) {
            s = Trees.toStringTree(tree.getChild(i), ruleNames);
            res = res.concat(' ' + s);
        }
        res = res.concat(")");
        return res;
    },

    getNodeText: function(t, ruleNames, recog) {
        ruleNames = ruleNames || null;
        recog = recog || null;
        if(recog!==null) {
            ruleNames = recog.ruleNames;
        }
        if(ruleNames!==null) {
            if (t instanceof RuleNode) {
                const context = t.getRuleContext()
                const altNumber = context.getAltNumber();
                // use const value of ATN.INVALID_ALT_NUMBER to avoid circular dependency
                if ( altNumber != 0 ) {
                    return ruleNames[t.ruleIndex]+":"+altNumber;
                }
                return ruleNames[t.ruleIndex];
            } else if ( t instanceof ErrorNode) {
                return t.toString();
            } else if(t instanceof TerminalNode) {
                if(t.symbol!==null) {
                    return t.symbol.text;
                }
            }
        }
        // no recog for rule names
        const payload = t.getPayload();
        if (payload instanceof Token ) {
            return payload.text;
        }
        return t.getPayload().toString();
    },

    /**
     * Return ordered list of all children of this node
     */
    getChildren: function(t) {
        const list = [];
        for(let i=0;i<t.getChildCount();i++) {
            list.push(t.getChild(i));
        }
        return list;
    },

    /**
     * Return a list of all ancestors of this node.  The first node of
     * list is the root and the last is the parent of this node.
     */
    getAncestors: function(t) {
        let ancestors = [];
        t = t.getParent();
        while(t!==null) {
            ancestors = [t].concat(ancestors);
            t = t.getParent();
        }
        return ancestors;
    },

    findAllTokenNodes: function(t, ttype) {
        return Trees.findAllNodes(t, ttype, true);
    },

    findAllRuleNodes: function(t, ruleIndex) {
        return Trees.findAllNodes(t, ruleIndex, false);
    },

    findAllNodes: function(t, index, findTokens) {
        const nodes = [];
        Trees._findAllNodes(t, index, findTokens, nodes);
        return nodes;
    },

    _findAllNodes: function(t, index, findTokens, nodes) {
        // check this node (the root) first
        if(findTokens && (t instanceof TerminalNode)) {
            if(t.symbol.type===index) {
                nodes.push(t);
            }
        } else if(!findTokens && (t instanceof RuleNode)) {
            if(t.ruleIndex===index) {
                nodes.push(t);
            }
        }
        // check children
        for(let i=0;i<t.getChildCount();i++) {
            Trees._findAllNodes(t.getChild(i), index, findTokens, nodes);
        }
    },

    descendants: function(t) {
        let nodes = [t];
        for(let i=0;i<t.getChildCount();i++) {
            nodes = nodes.concat(Trees.descendants(t.getChild(i)));
        }
        return nodes;
    }
}

module.exports = Trees;


/***/ }),

/***/ "./node_modules/antlr4/src/antlr4/tree/index.js":
/*!******************************************************!*\
  !*** ./node_modules/antlr4/src/antlr4/tree/index.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.
 * Use of this file is governed by the BSD 3-clause license that
 * can be found in the LICENSE.txt file in the project root.
 */

const Tree = __webpack_require__(/*! ./Tree */ "./node_modules/antlr4/src/antlr4/tree/Tree.js");
const Trees = __webpack_require__(/*! ./Trees */ "./node_modules/antlr4/src/antlr4/tree/Trees.js");
module.exports = {...Tree, Trees}


/***/ }),

/***/ "./node_modules/node-libs-browser/mock/empty.js":
/*!******************************************************!*\
  !*** ./node_modules/node-libs-browser/mock/empty.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/util/node_modules/inherits/inherits_browser.js":
/*!*********************************************************************!*\
  !*** ./node_modules/util/node_modules/inherits/inherits_browser.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}


/***/ }),

/***/ "./node_modules/util/support/isBufferBrowser.js":
/*!******************************************************!*\
  !*** ./node_modules/util/support/isBufferBrowser.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),

/***/ "./node_modules/util/util.js":
/*!***********************************!*\
  !*** ./node_modules/util/util.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }

  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ "./node_modules/util/support/isBufferBrowser.js");

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(/*! inherits */ "./node_modules/util/node_modules/inherits/inherits_browser.js");

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}

exports.promisify.custom = kCustomPromisifiedSymbol

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { process.nextTick(cb, null, ret) },
            function(rej) { process.nextTick(callbackifyOnRejected, rej, cb) });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified,
                          getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ })

/******/ });
});
//# sourceMappingURL=index.js.map